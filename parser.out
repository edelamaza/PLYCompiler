Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHAR
    FALSE
    FOR
    LBRACKET
    NOT
    PERIOD
    RBRACKET
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE
Rule 2     vars -> VAR varsp COLON type seentype SEMICOLON
Rule 3     vars -> VAR varsp COLON type seentype SEMICOLON vars
Rule 4     vars -> empty
Rule 5     varsp -> IDENTIFIER seenid
Rule 6     varsp -> IDENTIFIER seenid COMMA varsp
Rule 7     seenid -> <empty>
Rule 8     seentype -> <empty>
Rule 9     type -> INT
Rule 10    type -> REAL
Rule 11    type -> STRING
Rule 12    type -> BOOLEAN
Rule 13    block -> BEGIN SEMICOLON statement END SEMICOLON
Rule 14    statement -> empty
Rule 15    statement -> assign
Rule 16    statement -> assign statement
Rule 17    statement -> writefunction
Rule 18    statement -> writefunction statement
Rule 19    statement -> condition
Rule 20    statement -> condition statement
Rule 21    statement -> while
Rule 22    statement -> while statement
Rule 23    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
Rule 24    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
Rule 25    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
Rule 26    checkbool -> <empty>
Rule 27    seenif -> <empty>
Rule 28    seencurlyif -> <empty>
Rule 29    seencurlyelse -> <empty>
Rule 30    while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
Rule 31    seenwhile -> <empty>
Rule 32    seencurlywhile -> <empty>
Rule 33    assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
Rule 34    assignnow -> <empty>
Rule 35    expression -> simpleexpression
Rule 36    expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad
Rule 37    expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
Rule 38    expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad
Rule 39    expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
Rule 40    expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
Rule 41    expression -> simpleexpression EQUALS seenoperator simpleexpression genquad
Rule 42    simpleexpression -> term seenterm simpleexpressionp
Rule 43    seenterm -> <empty>
Rule 44    simpleexpressionp -> empty
Rule 45    simpleexpressionp -> PLUS seenoperator simpleexpression
Rule 46    simpleexpressionp -> MINUS seenoperator simpleexpression
Rule 47    simpleexpressionp -> OR seenoperator simpleexpression
Rule 48    term -> factor seenfactor termp
Rule 49    termp -> empty
Rule 50    termp -> MULTIPLY seenoperator term
Rule 51    termp -> DIV seenoperator term
Rule 52    termp -> DIVIDE seenoperator term
Rule 53    termp -> MOD seenoperator term
Rule 54    termp -> AND seenoperator term
Rule 55    termp -> PLUSPLUS seenoperator
Rule 56    termp -> MINUSMINUS seenoperator
Rule 57    seenoperator -> <empty>
Rule 58    seenfactor -> <empty>
Rule 59    genquad -> <empty>
Rule 60    factor -> const
Rule 61    factor -> LPAREN seenoperator expression RPAREN exitparen
Rule 62    exitparen -> <empty>
Rule 63    const -> PLUS IDENTIFIER
Rule 64    const -> MINUS IDENTIFIER
Rule 65    const -> IDENTIFIER
Rule 66    const -> PLUS NUMBER_CONST
Rule 67    const -> MINUS NUMBER_CONST
Rule 68    const -> NUMBER_CONST
Rule 69    const -> STRING_CONST
Rule 70    writefunction -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 71    writefunction -> WRITE LPAREN expression RPAREN SEMICOLON
Rule 72    empty -> <empty>

Terminals, with rules where they appear

AND                  : 54
ASSIGNOP             : 33
BEGIN                : 13
BOOLEAN              : 12
CHAR                 : 
COLON                : 2 3
COMMA                : 6
DIV                  : 51
DIVIDE               : 52
DO                   : 30
ELSE                 : 24 25
END                  : 13
EQUALS               : 41
FALSE                : 
FOR                  : 
GREATER_THAN         : 38
GREATER_THAN_EQUALS  : 39
IDENTIFIER           : 1 5 6 33 63 64 65
IF                   : 23 24 25
INT                  : 9
LBRACKET             : 
LCURLYBRACE          : 1 23 24 25 25 30
LESS_THAN            : 36
LESS_THAN_EQUALS     : 37
LPAREN               : 23 24 25 30 61 70 71
MINUS                : 46 64 67
MINUSMINUS           : 56
MOD                  : 53
MULTIPLY             : 50
NOT                  : 
NOT_EQUALS           : 40
NUMBER_CONST         : 66 67 68
OR                   : 47
PERIOD               : 
PLUS                 : 45 63 66
PLUSPLUS             : 55
PRINT                : 70
PROGRAM              : 1
RBRACKET             : 
RCURLYBRACE          : 1 23 24 25 25 30
REAL                 : 10
RPAREN               : 23 24 25 30 61 70 71
SEMICOLON            : 2 3 13 13 33 70 71
STRING               : 11
STRING_CONST         : 69
THEN                 : 23 24 25
TRUE                 : 
VAR                  : 2 3
WHILE                : 30
WRITE                : 71
error                : 

Nonterminals, with rules where they appear

assign               : 15 16
assignnow            : 33
block                : 1
checkbool            : 23 24 25 30
condition            : 19 20 24
const                : 60
empty                : 4 14 44 49
exitparen            : 61
expression           : 23 24 25 30 33 61 70 71
factor               : 48
genquad              : 36 37 38 39 40 41
program              : 0
seencurlyelse        : 23 24 25
seencurlyif          : 23 24 25
seencurlywhile       : 30
seenfactor           : 48
seenid               : 5 6
seenif               : 23 24 25
seenoperator         : 36 37 38 39 40 41 45 46 47 50 51 52 53 54 55 56 61
seenterm             : 42
seentype             : 2 3
seenwhile            : 30
simpleexpression     : 35 36 36 37 37 38 38 39 39 40 40 41 41 45 46 47
simpleexpressionp    : 42
statement            : 13 16 18 20 22 23 24 25 25 30
term                 : 42 50 51 52 53 54
termp                : 48
type                 : 2 3
vars                 : 1 3
varsp                : 2 3 6
while                : 21 22
writefunction        : 17 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . IDENTIFIER LCURLYBRACE vars block RCURLYBRACE

    IDENTIFIER      shift and go to state 3


state 3

    (1) program -> PROGRAM IDENTIFIER . LCURLYBRACE vars block RCURLYBRACE

    LCURLYBRACE     shift and go to state 4


state 4

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE . vars block RCURLYBRACE
    (2) vars -> . VAR varsp COLON type seentype SEMICOLON
    (3) vars -> . VAR varsp COLON type seentype SEMICOLON vars
    (4) vars -> . empty
    (72) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 72 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars . block RCURLYBRACE
    (13) block -> . BEGIN SEMICOLON statement END SEMICOLON

    BEGIN           shift and go to state 9

    block                          shift and go to state 8

state 6

    (2) vars -> VAR . varsp COLON type seentype SEMICOLON
    (3) vars -> VAR . varsp COLON type seentype SEMICOLON vars
    (5) varsp -> . IDENTIFIER seenid
    (6) varsp -> . IDENTIFIER seenid COMMA varsp

    IDENTIFIER      shift and go to state 11

    varsp                          shift and go to state 10

state 7

    (4) vars -> empty .

    BEGIN           reduce using rule 4 (vars -> empty .)


state 8

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars block . RCURLYBRACE

    RCURLYBRACE     shift and go to state 12


state 9

    (13) block -> BEGIN . SEMICOLON statement END SEMICOLON

    SEMICOLON       shift and go to state 13


state 10

    (2) vars -> VAR varsp . COLON type seentype SEMICOLON
    (3) vars -> VAR varsp . COLON type seentype SEMICOLON vars

    COLON           shift and go to state 14


state 11

    (5) varsp -> IDENTIFIER . seenid
    (6) varsp -> IDENTIFIER . seenid COMMA varsp
    (7) seenid -> .

    COMMA           reduce using rule 7 (seenid -> .)
    COLON           reduce using rule 7 (seenid -> .)

    seenid                         shift and go to state 15

state 12

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE .

    $end            reduce using rule 1 (program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE .)


state 13

    (13) block -> BEGIN SEMICOLON . statement END SEMICOLON
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (72) empty -> .
    (33) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (70) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (71) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (30) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    END             reduce using rule 72 (empty -> .)
    IDENTIFIER      shift and go to state 22
    PRINT           shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    statement                      shift and go to state 16
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21

state 14

    (2) vars -> VAR varsp COLON . type seentype SEMICOLON
    (3) vars -> VAR varsp COLON . type seentype SEMICOLON vars
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . STRING
    (12) type -> . BOOLEAN

    INT             shift and go to state 28
    REAL            shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31

    type                           shift and go to state 27

state 15

    (5) varsp -> IDENTIFIER seenid .
    (6) varsp -> IDENTIFIER seenid . COMMA varsp

    COLON           reduce using rule 5 (varsp -> IDENTIFIER seenid .)
    COMMA           shift and go to state 32


state 16

    (13) block -> BEGIN SEMICOLON statement . END SEMICOLON

    END             shift and go to state 33


state 17

    (14) statement -> empty .

    END             reduce using rule 14 (statement -> empty .)
    RCURLYBRACE     reduce using rule 14 (statement -> empty .)


state 18

    (15) statement -> assign .
    (16) statement -> assign . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (72) empty -> .
    (33) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (70) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (71) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (30) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

  ! reduce/reduce conflict for END resolved using rule 15 (statement -> assign .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 15 (statement -> assign .)
    END             reduce using rule 15 (statement -> assign .)
    RCURLYBRACE     reduce using rule 15 (statement -> assign .)
    IDENTIFIER      shift and go to state 22
    PRINT           shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26

  ! END             [ reduce using rule 72 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 72 (empty -> .) ]

    assign                         shift and go to state 18
    statement                      shift and go to state 34
    empty                          shift and go to state 17
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21

state 19

    (17) statement -> writefunction .
    (18) statement -> writefunction . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (72) empty -> .
    (33) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (70) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (71) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (30) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

  ! reduce/reduce conflict for END resolved using rule 17 (statement -> writefunction .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 17 (statement -> writefunction .)
    END             reduce using rule 17 (statement -> writefunction .)
    RCURLYBRACE     reduce using rule 17 (statement -> writefunction .)
    IDENTIFIER      shift and go to state 22
    PRINT           shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26

  ! END             [ reduce using rule 72 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 72 (empty -> .) ]

    writefunction                  shift and go to state 19
    statement                      shift and go to state 35
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    condition                      shift and go to state 20
    while                          shift and go to state 21

state 20

    (19) statement -> condition .
    (20) statement -> condition . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (72) empty -> .
    (33) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (70) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (71) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (30) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

  ! reduce/reduce conflict for END resolved using rule 19 (statement -> condition .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 19 (statement -> condition .)
    END             reduce using rule 19 (statement -> condition .)
    RCURLYBRACE     reduce using rule 19 (statement -> condition .)
    IDENTIFIER      shift and go to state 22
    PRINT           shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26

  ! END             [ reduce using rule 72 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 72 (empty -> .) ]

    condition                      shift and go to state 20
    statement                      shift and go to state 36
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    while                          shift and go to state 21

state 21

    (21) statement -> while .
    (22) statement -> while . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (72) empty -> .
    (33) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (70) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (71) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (30) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

  ! reduce/reduce conflict for END resolved using rule 21 (statement -> while .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 21 (statement -> while .)
    END             reduce using rule 21 (statement -> while .)
    RCURLYBRACE     reduce using rule 21 (statement -> while .)
    IDENTIFIER      shift and go to state 22
    PRINT           shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26

  ! END             [ reduce using rule 72 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 72 (empty -> .) ]

    while                          shift and go to state 21
    statement                      shift and go to state 37
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20

state 22

    (33) assign -> IDENTIFIER . ASSIGNOP expression assignnow SEMICOLON

    ASSIGNOP        shift and go to state 38


state 23

    (70) writefunction -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 39


state 24

    (71) writefunction -> WRITE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 40


state 25

    (23) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LPAREN          shift and go to state 41


state 26

    (30) while -> WHILE . LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    LPAREN          shift and go to state 42


state 27

    (2) vars -> VAR varsp COLON type . seentype SEMICOLON
    (3) vars -> VAR varsp COLON type . seentype SEMICOLON vars
    (8) seentype -> .

    SEMICOLON       reduce using rule 8 (seentype -> .)

    seentype                       shift and go to state 43

state 28

    (9) type -> INT .

    SEMICOLON       reduce using rule 9 (type -> INT .)


state 29

    (10) type -> REAL .

    SEMICOLON       reduce using rule 10 (type -> REAL .)


state 30

    (11) type -> STRING .

    SEMICOLON       reduce using rule 11 (type -> STRING .)


state 31

    (12) type -> BOOLEAN .

    SEMICOLON       reduce using rule 12 (type -> BOOLEAN .)


state 32

    (6) varsp -> IDENTIFIER seenid COMMA . varsp
    (5) varsp -> . IDENTIFIER seenid
    (6) varsp -> . IDENTIFIER seenid COMMA varsp

    IDENTIFIER      shift and go to state 11

    varsp                          shift and go to state 44

state 33

    (13) block -> BEGIN SEMICOLON statement END . SEMICOLON

    SEMICOLON       shift and go to state 45


state 34

    (16) statement -> assign statement .

    END             reduce using rule 16 (statement -> assign statement .)
    RCURLYBRACE     reduce using rule 16 (statement -> assign statement .)


state 35

    (18) statement -> writefunction statement .

    END             reduce using rule 18 (statement -> writefunction statement .)
    RCURLYBRACE     reduce using rule 18 (statement -> writefunction statement .)


state 36

    (20) statement -> condition statement .

    END             reduce using rule 20 (statement -> condition statement .)
    RCURLYBRACE     reduce using rule 20 (statement -> condition statement .)


state 37

    (22) statement -> while statement .

    END             reduce using rule 22 (statement -> while statement .)
    RCURLYBRACE     reduce using rule 22 (statement -> while statement .)


state 38

    (33) assign -> IDENTIFIER ASSIGNOP . expression assignnow SEMICOLON
    (35) expression -> . simpleexpression
    (36) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (37) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (38) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (39) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (40) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (41) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    expression                     shift and go to state 47
    simpleexpression               shift and go to state 48
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 39

    (70) writefunction -> PRINT LPAREN . expression RPAREN SEMICOLON
    (35) expression -> . simpleexpression
    (36) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (37) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (38) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (39) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (40) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (41) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    expression                     shift and go to state 57
    simpleexpression               shift and go to state 48
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 40

    (71) writefunction -> WRITE LPAREN . expression RPAREN SEMICOLON
    (35) expression -> . simpleexpression
    (36) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (37) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (38) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (39) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (40) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (41) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    expression                     shift and go to state 58
    simpleexpression               shift and go to state 48
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 41

    (23) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (35) expression -> . simpleexpression
    (36) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (37) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (38) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (39) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (40) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (41) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    expression                     shift and go to state 59
    simpleexpression               shift and go to state 48
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 42

    (30) while -> WHILE LPAREN . expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (35) expression -> . simpleexpression
    (36) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (37) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (38) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (39) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (40) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (41) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    expression                     shift and go to state 60
    simpleexpression               shift and go to state 48
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 43

    (2) vars -> VAR varsp COLON type seentype . SEMICOLON
    (3) vars -> VAR varsp COLON type seentype . SEMICOLON vars

    SEMICOLON       shift and go to state 61


state 44

    (6) varsp -> IDENTIFIER seenid COMMA varsp .

    COLON           reduce using rule 6 (varsp -> IDENTIFIER seenid COMMA varsp .)


state 45

    (13) block -> BEGIN SEMICOLON statement END SEMICOLON .

    RCURLYBRACE     reduce using rule 13 (block -> BEGIN SEMICOLON statement END SEMICOLON .)


state 46

    (65) const -> IDENTIFIER .

    MULTIPLY        reduce using rule 65 (const -> IDENTIFIER .)
    DIV             reduce using rule 65 (const -> IDENTIFIER .)
    DIVIDE          reduce using rule 65 (const -> IDENTIFIER .)
    MOD             reduce using rule 65 (const -> IDENTIFIER .)
    AND             reduce using rule 65 (const -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 65 (const -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 65 (const -> IDENTIFIER .)
    PLUS            reduce using rule 65 (const -> IDENTIFIER .)
    MINUS           reduce using rule 65 (const -> IDENTIFIER .)
    OR              reduce using rule 65 (const -> IDENTIFIER .)
    LESS_THAN       reduce using rule 65 (const -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 65 (const -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 65 (const -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 65 (const -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 65 (const -> IDENTIFIER .)
    EQUALS          reduce using rule 65 (const -> IDENTIFIER .)
    SEMICOLON       reduce using rule 65 (const -> IDENTIFIER .)
    RPAREN          reduce using rule 65 (const -> IDENTIFIER .)


state 47

    (33) assign -> IDENTIFIER ASSIGNOP expression . assignnow SEMICOLON
    (34) assignnow -> .

    SEMICOLON       reduce using rule 34 (assignnow -> .)

    assignnow                      shift and go to state 62

state 48

    (35) expression -> simpleexpression .
    (36) expression -> simpleexpression . LESS_THAN seenoperator simpleexpression genquad
    (37) expression -> simpleexpression . LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (38) expression -> simpleexpression . GREATER_THAN seenoperator simpleexpression genquad
    (39) expression -> simpleexpression . GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (40) expression -> simpleexpression . NOT_EQUALS seenoperator simpleexpression genquad
    (41) expression -> simpleexpression . EQUALS seenoperator simpleexpression genquad

    SEMICOLON       reduce using rule 35 (expression -> simpleexpression .)
    RPAREN          reduce using rule 35 (expression -> simpleexpression .)
    LESS_THAN       shift and go to state 63
    LESS_THAN_EQUALS shift and go to state 64
    GREATER_THAN    shift and go to state 65
    GREATER_THAN_EQUALS shift and go to state 66
    NOT_EQUALS      shift and go to state 67
    EQUALS          shift and go to state 68


state 49

    (42) simpleexpression -> term . seenterm simpleexpressionp
    (43) seenterm -> .

    PLUS            reduce using rule 43 (seenterm -> .)
    MINUS           reduce using rule 43 (seenterm -> .)
    OR              reduce using rule 43 (seenterm -> .)
    LESS_THAN       reduce using rule 43 (seenterm -> .)
    LESS_THAN_EQUALS reduce using rule 43 (seenterm -> .)
    GREATER_THAN    reduce using rule 43 (seenterm -> .)
    GREATER_THAN_EQUALS reduce using rule 43 (seenterm -> .)
    NOT_EQUALS      reduce using rule 43 (seenterm -> .)
    EQUALS          reduce using rule 43 (seenterm -> .)
    SEMICOLON       reduce using rule 43 (seenterm -> .)
    RPAREN          reduce using rule 43 (seenterm -> .)

    seenterm                       shift and go to state 69

state 50

    (48) term -> factor . seenfactor termp
    (58) seenfactor -> .

    MULTIPLY        reduce using rule 58 (seenfactor -> .)
    DIV             reduce using rule 58 (seenfactor -> .)
    DIVIDE          reduce using rule 58 (seenfactor -> .)
    MOD             reduce using rule 58 (seenfactor -> .)
    AND             reduce using rule 58 (seenfactor -> .)
    PLUSPLUS        reduce using rule 58 (seenfactor -> .)
    MINUSMINUS      reduce using rule 58 (seenfactor -> .)
    PLUS            reduce using rule 58 (seenfactor -> .)
    MINUS           reduce using rule 58 (seenfactor -> .)
    OR              reduce using rule 58 (seenfactor -> .)
    LESS_THAN       reduce using rule 58 (seenfactor -> .)
    LESS_THAN_EQUALS reduce using rule 58 (seenfactor -> .)
    GREATER_THAN    reduce using rule 58 (seenfactor -> .)
    GREATER_THAN_EQUALS reduce using rule 58 (seenfactor -> .)
    NOT_EQUALS      reduce using rule 58 (seenfactor -> .)
    EQUALS          reduce using rule 58 (seenfactor -> .)
    SEMICOLON       reduce using rule 58 (seenfactor -> .)
    RPAREN          reduce using rule 58 (seenfactor -> .)

    seenfactor                     shift and go to state 70

state 51

    (60) factor -> const .

    MULTIPLY        reduce using rule 60 (factor -> const .)
    DIV             reduce using rule 60 (factor -> const .)
    DIVIDE          reduce using rule 60 (factor -> const .)
    MOD             reduce using rule 60 (factor -> const .)
    AND             reduce using rule 60 (factor -> const .)
    PLUSPLUS        reduce using rule 60 (factor -> const .)
    MINUSMINUS      reduce using rule 60 (factor -> const .)
    PLUS            reduce using rule 60 (factor -> const .)
    MINUS           reduce using rule 60 (factor -> const .)
    OR              reduce using rule 60 (factor -> const .)
    LESS_THAN       reduce using rule 60 (factor -> const .)
    LESS_THAN_EQUALS reduce using rule 60 (factor -> const .)
    GREATER_THAN    reduce using rule 60 (factor -> const .)
    GREATER_THAN_EQUALS reduce using rule 60 (factor -> const .)
    NOT_EQUALS      reduce using rule 60 (factor -> const .)
    EQUALS          reduce using rule 60 (factor -> const .)
    SEMICOLON       reduce using rule 60 (factor -> const .)
    RPAREN          reduce using rule 60 (factor -> const .)


state 52

    (61) factor -> LPAREN . seenoperator expression RPAREN exitparen
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 71

state 53

    (63) const -> PLUS . IDENTIFIER
    (66) const -> PLUS . NUMBER_CONST

    IDENTIFIER      shift and go to state 72
    NUMBER_CONST    shift and go to state 73


state 54

    (64) const -> MINUS . IDENTIFIER
    (67) const -> MINUS . NUMBER_CONST

    IDENTIFIER      shift and go to state 74
    NUMBER_CONST    shift and go to state 75


state 55

    (68) const -> NUMBER_CONST .

    MULTIPLY        reduce using rule 68 (const -> NUMBER_CONST .)
    DIV             reduce using rule 68 (const -> NUMBER_CONST .)
    DIVIDE          reduce using rule 68 (const -> NUMBER_CONST .)
    MOD             reduce using rule 68 (const -> NUMBER_CONST .)
    AND             reduce using rule 68 (const -> NUMBER_CONST .)
    PLUSPLUS        reduce using rule 68 (const -> NUMBER_CONST .)
    MINUSMINUS      reduce using rule 68 (const -> NUMBER_CONST .)
    PLUS            reduce using rule 68 (const -> NUMBER_CONST .)
    MINUS           reduce using rule 68 (const -> NUMBER_CONST .)
    OR              reduce using rule 68 (const -> NUMBER_CONST .)
    LESS_THAN       reduce using rule 68 (const -> NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 68 (const -> NUMBER_CONST .)
    GREATER_THAN    reduce using rule 68 (const -> NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 68 (const -> NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 68 (const -> NUMBER_CONST .)
    EQUALS          reduce using rule 68 (const -> NUMBER_CONST .)
    SEMICOLON       reduce using rule 68 (const -> NUMBER_CONST .)
    RPAREN          reduce using rule 68 (const -> NUMBER_CONST .)


state 56

    (69) const -> STRING_CONST .

    MULTIPLY        reduce using rule 69 (const -> STRING_CONST .)
    DIV             reduce using rule 69 (const -> STRING_CONST .)
    DIVIDE          reduce using rule 69 (const -> STRING_CONST .)
    MOD             reduce using rule 69 (const -> STRING_CONST .)
    AND             reduce using rule 69 (const -> STRING_CONST .)
    PLUSPLUS        reduce using rule 69 (const -> STRING_CONST .)
    MINUSMINUS      reduce using rule 69 (const -> STRING_CONST .)
    PLUS            reduce using rule 69 (const -> STRING_CONST .)
    MINUS           reduce using rule 69 (const -> STRING_CONST .)
    OR              reduce using rule 69 (const -> STRING_CONST .)
    LESS_THAN       reduce using rule 69 (const -> STRING_CONST .)
    LESS_THAN_EQUALS reduce using rule 69 (const -> STRING_CONST .)
    GREATER_THAN    reduce using rule 69 (const -> STRING_CONST .)
    GREATER_THAN_EQUALS reduce using rule 69 (const -> STRING_CONST .)
    NOT_EQUALS      reduce using rule 69 (const -> STRING_CONST .)
    EQUALS          reduce using rule 69 (const -> STRING_CONST .)
    SEMICOLON       reduce using rule 69 (const -> STRING_CONST .)
    RPAREN          reduce using rule 69 (const -> STRING_CONST .)


state 57

    (70) writefunction -> PRINT LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 76


state 58

    (71) writefunction -> WRITE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 77


state 59

    (23) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    RPAREN          shift and go to state 78


state 60

    (30) while -> WHILE LPAREN expression . RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    RPAREN          shift and go to state 79


state 61

    (2) vars -> VAR varsp COLON type seentype SEMICOLON .
    (3) vars -> VAR varsp COLON type seentype SEMICOLON . vars
    (2) vars -> . VAR varsp COLON type seentype SEMICOLON
    (3) vars -> . VAR varsp COLON type seentype SEMICOLON vars
    (4) vars -> . empty
    (72) empty -> .

  ! reduce/reduce conflict for BEGIN resolved using rule 2 (vars -> VAR varsp COLON type seentype SEMICOLON .)
    BEGIN           reduce using rule 2 (vars -> VAR varsp COLON type seentype SEMICOLON .)
    VAR             shift and go to state 6

  ! BEGIN           [ reduce using rule 72 (empty -> .) ]

    vars                           shift and go to state 80
    empty                          shift and go to state 7

state 62

    (33) assign -> IDENTIFIER ASSIGNOP expression assignnow . SEMICOLON

    SEMICOLON       shift and go to state 81


state 63

    (36) expression -> simpleexpression LESS_THAN . seenoperator simpleexpression genquad
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 82

state 64

    (37) expression -> simpleexpression LESS_THAN_EQUALS . seenoperator simpleexpression genquad
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 83

state 65

    (38) expression -> simpleexpression GREATER_THAN . seenoperator simpleexpression genquad
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 84

state 66

    (39) expression -> simpleexpression GREATER_THAN_EQUALS . seenoperator simpleexpression genquad
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 85

state 67

    (40) expression -> simpleexpression NOT_EQUALS . seenoperator simpleexpression genquad
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 86

state 68

    (41) expression -> simpleexpression EQUALS . seenoperator simpleexpression genquad
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 87

state 69

    (42) simpleexpression -> term seenterm . simpleexpressionp
    (44) simpleexpressionp -> . empty
    (45) simpleexpressionp -> . PLUS seenoperator simpleexpression
    (46) simpleexpressionp -> . MINUS seenoperator simpleexpression
    (47) simpleexpressionp -> . OR seenoperator simpleexpression
    (72) empty -> .

    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    OR              shift and go to state 92
    LESS_THAN       reduce using rule 72 (empty -> .)
    LESS_THAN_EQUALS reduce using rule 72 (empty -> .)
    GREATER_THAN    reduce using rule 72 (empty -> .)
    GREATER_THAN_EQUALS reduce using rule 72 (empty -> .)
    NOT_EQUALS      reduce using rule 72 (empty -> .)
    EQUALS          reduce using rule 72 (empty -> .)
    SEMICOLON       reduce using rule 72 (empty -> .)
    RPAREN          reduce using rule 72 (empty -> .)

    simpleexpressionp              shift and go to state 88
    empty                          shift and go to state 89

state 70

    (48) term -> factor seenfactor . termp
    (49) termp -> . empty
    (50) termp -> . MULTIPLY seenoperator term
    (51) termp -> . DIV seenoperator term
    (52) termp -> . DIVIDE seenoperator term
    (53) termp -> . MOD seenoperator term
    (54) termp -> . AND seenoperator term
    (55) termp -> . PLUSPLUS seenoperator
    (56) termp -> . MINUSMINUS seenoperator
    (72) empty -> .

    MULTIPLY        shift and go to state 95
    DIV             shift and go to state 96
    DIVIDE          shift and go to state 97
    MOD             shift and go to state 98
    AND             shift and go to state 99
    PLUSPLUS        shift and go to state 100
    MINUSMINUS      shift and go to state 101
    PLUS            reduce using rule 72 (empty -> .)
    MINUS           reduce using rule 72 (empty -> .)
    OR              reduce using rule 72 (empty -> .)
    LESS_THAN       reduce using rule 72 (empty -> .)
    LESS_THAN_EQUALS reduce using rule 72 (empty -> .)
    GREATER_THAN    reduce using rule 72 (empty -> .)
    GREATER_THAN_EQUALS reduce using rule 72 (empty -> .)
    NOT_EQUALS      reduce using rule 72 (empty -> .)
    EQUALS          reduce using rule 72 (empty -> .)
    SEMICOLON       reduce using rule 72 (empty -> .)
    RPAREN          reduce using rule 72 (empty -> .)

    termp                          shift and go to state 93
    empty                          shift and go to state 94

state 71

    (61) factor -> LPAREN seenoperator . expression RPAREN exitparen
    (35) expression -> . simpleexpression
    (36) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (37) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (38) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (39) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (40) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (41) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    expression                     shift and go to state 102
    simpleexpression               shift and go to state 48
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 72

    (63) const -> PLUS IDENTIFIER .

    MULTIPLY        reduce using rule 63 (const -> PLUS IDENTIFIER .)
    DIV             reduce using rule 63 (const -> PLUS IDENTIFIER .)
    DIVIDE          reduce using rule 63 (const -> PLUS IDENTIFIER .)
    MOD             reduce using rule 63 (const -> PLUS IDENTIFIER .)
    AND             reduce using rule 63 (const -> PLUS IDENTIFIER .)
    PLUSPLUS        reduce using rule 63 (const -> PLUS IDENTIFIER .)
    MINUSMINUS      reduce using rule 63 (const -> PLUS IDENTIFIER .)
    PLUS            reduce using rule 63 (const -> PLUS IDENTIFIER .)
    MINUS           reduce using rule 63 (const -> PLUS IDENTIFIER .)
    OR              reduce using rule 63 (const -> PLUS IDENTIFIER .)
    LESS_THAN       reduce using rule 63 (const -> PLUS IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 63 (const -> PLUS IDENTIFIER .)
    GREATER_THAN    reduce using rule 63 (const -> PLUS IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 63 (const -> PLUS IDENTIFIER .)
    NOT_EQUALS      reduce using rule 63 (const -> PLUS IDENTIFIER .)
    EQUALS          reduce using rule 63 (const -> PLUS IDENTIFIER .)
    SEMICOLON       reduce using rule 63 (const -> PLUS IDENTIFIER .)
    RPAREN          reduce using rule 63 (const -> PLUS IDENTIFIER .)


state 73

    (66) const -> PLUS NUMBER_CONST .

    MULTIPLY        reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    DIV             reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    DIVIDE          reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    MOD             reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    AND             reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    PLUSPLUS        reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    MINUSMINUS      reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    PLUS            reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    MINUS           reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    OR              reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    LESS_THAN       reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    GREATER_THAN    reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    EQUALS          reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    SEMICOLON       reduce using rule 66 (const -> PLUS NUMBER_CONST .)
    RPAREN          reduce using rule 66 (const -> PLUS NUMBER_CONST .)


state 74

    (64) const -> MINUS IDENTIFIER .

    MULTIPLY        reduce using rule 64 (const -> MINUS IDENTIFIER .)
    DIV             reduce using rule 64 (const -> MINUS IDENTIFIER .)
    DIVIDE          reduce using rule 64 (const -> MINUS IDENTIFIER .)
    MOD             reduce using rule 64 (const -> MINUS IDENTIFIER .)
    AND             reduce using rule 64 (const -> MINUS IDENTIFIER .)
    PLUSPLUS        reduce using rule 64 (const -> MINUS IDENTIFIER .)
    MINUSMINUS      reduce using rule 64 (const -> MINUS IDENTIFIER .)
    PLUS            reduce using rule 64 (const -> MINUS IDENTIFIER .)
    MINUS           reduce using rule 64 (const -> MINUS IDENTIFIER .)
    OR              reduce using rule 64 (const -> MINUS IDENTIFIER .)
    LESS_THAN       reduce using rule 64 (const -> MINUS IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 64 (const -> MINUS IDENTIFIER .)
    GREATER_THAN    reduce using rule 64 (const -> MINUS IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 64 (const -> MINUS IDENTIFIER .)
    NOT_EQUALS      reduce using rule 64 (const -> MINUS IDENTIFIER .)
    EQUALS          reduce using rule 64 (const -> MINUS IDENTIFIER .)
    SEMICOLON       reduce using rule 64 (const -> MINUS IDENTIFIER .)
    RPAREN          reduce using rule 64 (const -> MINUS IDENTIFIER .)


state 75

    (67) const -> MINUS NUMBER_CONST .

    MULTIPLY        reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    DIV             reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    DIVIDE          reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    MOD             reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    AND             reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    PLUSPLUS        reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    MINUSMINUS      reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    PLUS            reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    MINUS           reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    OR              reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    LESS_THAN       reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    GREATER_THAN    reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    EQUALS          reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    SEMICOLON       reduce using rule 67 (const -> MINUS NUMBER_CONST .)
    RPAREN          reduce using rule 67 (const -> MINUS NUMBER_CONST .)


state 76

    (70) writefunction -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 103


state 77

    (71) writefunction -> WRITE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 104


state 78

    (23) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (26) checkbool -> .

    THEN            reduce using rule 26 (checkbool -> .)

    checkbool                      shift and go to state 105

state 79

    (30) while -> WHILE LPAREN expression RPAREN . checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (26) checkbool -> .

    DO              reduce using rule 26 (checkbool -> .)

    checkbool                      shift and go to state 106

state 80

    (3) vars -> VAR varsp COLON type seentype SEMICOLON vars .

    BEGIN           reduce using rule 3 (vars -> VAR varsp COLON type seentype SEMICOLON vars .)


state 81

    (33) assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .

    IDENTIFIER      reduce using rule 33 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    PRINT           reduce using rule 33 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    WRITE           reduce using rule 33 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    IF              reduce using rule 33 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    WHILE           reduce using rule 33 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    END             reduce using rule 33 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    RCURLYBRACE     reduce using rule 33 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)


state 82

    (36) expression -> simpleexpression LESS_THAN seenoperator . simpleexpression genquad
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    simpleexpression               shift and go to state 107
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 83

    (37) expression -> simpleexpression LESS_THAN_EQUALS seenoperator . simpleexpression genquad
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    simpleexpression               shift and go to state 108
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 84

    (38) expression -> simpleexpression GREATER_THAN seenoperator . simpleexpression genquad
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    simpleexpression               shift and go to state 109
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 85

    (39) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator . simpleexpression genquad
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    simpleexpression               shift and go to state 110
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 86

    (40) expression -> simpleexpression NOT_EQUALS seenoperator . simpleexpression genquad
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    simpleexpression               shift and go to state 111
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 87

    (41) expression -> simpleexpression EQUALS seenoperator . simpleexpression genquad
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    simpleexpression               shift and go to state 112
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 88

    (42) simpleexpression -> term seenterm simpleexpressionp .

    LESS_THAN       reduce using rule 42 (simpleexpression -> term seenterm simpleexpressionp .)
    LESS_THAN_EQUALS reduce using rule 42 (simpleexpression -> term seenterm simpleexpressionp .)
    GREATER_THAN    reduce using rule 42 (simpleexpression -> term seenterm simpleexpressionp .)
    GREATER_THAN_EQUALS reduce using rule 42 (simpleexpression -> term seenterm simpleexpressionp .)
    NOT_EQUALS      reduce using rule 42 (simpleexpression -> term seenterm simpleexpressionp .)
    EQUALS          reduce using rule 42 (simpleexpression -> term seenterm simpleexpressionp .)
    SEMICOLON       reduce using rule 42 (simpleexpression -> term seenterm simpleexpressionp .)
    RPAREN          reduce using rule 42 (simpleexpression -> term seenterm simpleexpressionp .)


state 89

    (44) simpleexpressionp -> empty .

    LESS_THAN       reduce using rule 44 (simpleexpressionp -> empty .)
    LESS_THAN_EQUALS reduce using rule 44 (simpleexpressionp -> empty .)
    GREATER_THAN    reduce using rule 44 (simpleexpressionp -> empty .)
    GREATER_THAN_EQUALS reduce using rule 44 (simpleexpressionp -> empty .)
    NOT_EQUALS      reduce using rule 44 (simpleexpressionp -> empty .)
    EQUALS          reduce using rule 44 (simpleexpressionp -> empty .)
    SEMICOLON       reduce using rule 44 (simpleexpressionp -> empty .)
    RPAREN          reduce using rule 44 (simpleexpressionp -> empty .)


state 90

    (45) simpleexpressionp -> PLUS . seenoperator simpleexpression
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 113

state 91

    (46) simpleexpressionp -> MINUS . seenoperator simpleexpression
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 114

state 92

    (47) simpleexpressionp -> OR . seenoperator simpleexpression
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 115

state 93

    (48) term -> factor seenfactor termp .

    PLUS            reduce using rule 48 (term -> factor seenfactor termp .)
    MINUS           reduce using rule 48 (term -> factor seenfactor termp .)
    OR              reduce using rule 48 (term -> factor seenfactor termp .)
    LESS_THAN       reduce using rule 48 (term -> factor seenfactor termp .)
    LESS_THAN_EQUALS reduce using rule 48 (term -> factor seenfactor termp .)
    GREATER_THAN    reduce using rule 48 (term -> factor seenfactor termp .)
    GREATER_THAN_EQUALS reduce using rule 48 (term -> factor seenfactor termp .)
    NOT_EQUALS      reduce using rule 48 (term -> factor seenfactor termp .)
    EQUALS          reduce using rule 48 (term -> factor seenfactor termp .)
    SEMICOLON       reduce using rule 48 (term -> factor seenfactor termp .)
    RPAREN          reduce using rule 48 (term -> factor seenfactor termp .)


state 94

    (49) termp -> empty .

    PLUS            reduce using rule 49 (termp -> empty .)
    MINUS           reduce using rule 49 (termp -> empty .)
    OR              reduce using rule 49 (termp -> empty .)
    LESS_THAN       reduce using rule 49 (termp -> empty .)
    LESS_THAN_EQUALS reduce using rule 49 (termp -> empty .)
    GREATER_THAN    reduce using rule 49 (termp -> empty .)
    GREATER_THAN_EQUALS reduce using rule 49 (termp -> empty .)
    NOT_EQUALS      reduce using rule 49 (termp -> empty .)
    EQUALS          reduce using rule 49 (termp -> empty .)
    SEMICOLON       reduce using rule 49 (termp -> empty .)
    RPAREN          reduce using rule 49 (termp -> empty .)


state 95

    (50) termp -> MULTIPLY . seenoperator term
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 116

state 96

    (51) termp -> DIV . seenoperator term
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 117

state 97

    (52) termp -> DIVIDE . seenoperator term
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 118

state 98

    (53) termp -> MOD . seenoperator term
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 119

state 99

    (54) termp -> AND . seenoperator term
    (57) seenoperator -> .

    LPAREN          reduce using rule 57 (seenoperator -> .)
    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    IDENTIFIER      reduce using rule 57 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 57 (seenoperator -> .)
    STRING_CONST    reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 120

state 100

    (55) termp -> PLUSPLUS . seenoperator
    (57) seenoperator -> .

    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    OR              reduce using rule 57 (seenoperator -> .)
    LESS_THAN       reduce using rule 57 (seenoperator -> .)
    LESS_THAN_EQUALS reduce using rule 57 (seenoperator -> .)
    GREATER_THAN    reduce using rule 57 (seenoperator -> .)
    GREATER_THAN_EQUALS reduce using rule 57 (seenoperator -> .)
    NOT_EQUALS      reduce using rule 57 (seenoperator -> .)
    EQUALS          reduce using rule 57 (seenoperator -> .)
    SEMICOLON       reduce using rule 57 (seenoperator -> .)
    RPAREN          reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 121

state 101

    (56) termp -> MINUSMINUS . seenoperator
    (57) seenoperator -> .

    PLUS            reduce using rule 57 (seenoperator -> .)
    MINUS           reduce using rule 57 (seenoperator -> .)
    OR              reduce using rule 57 (seenoperator -> .)
    LESS_THAN       reduce using rule 57 (seenoperator -> .)
    LESS_THAN_EQUALS reduce using rule 57 (seenoperator -> .)
    GREATER_THAN    reduce using rule 57 (seenoperator -> .)
    GREATER_THAN_EQUALS reduce using rule 57 (seenoperator -> .)
    NOT_EQUALS      reduce using rule 57 (seenoperator -> .)
    EQUALS          reduce using rule 57 (seenoperator -> .)
    SEMICOLON       reduce using rule 57 (seenoperator -> .)
    RPAREN          reduce using rule 57 (seenoperator -> .)

    seenoperator                   shift and go to state 122

state 102

    (61) factor -> LPAREN seenoperator expression . RPAREN exitparen

    RPAREN          shift and go to state 123


state 103

    (70) writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 70 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 70 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 70 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 70 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 70 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 70 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RCURLYBRACE     reduce using rule 70 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 104

    (71) writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 71 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 71 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 71 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 71 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 71 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 71 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    RCURLYBRACE     reduce using rule 71 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)


state 105

    (23) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (27) seenif -> .

    THEN            reduce using rule 27 (seenif -> .)

    seenif                         shift and go to state 124

state 106

    (30) while -> WHILE LPAREN expression RPAREN checkbool . seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (31) seenwhile -> .

    DO              reduce using rule 31 (seenwhile -> .)

    seenwhile                      shift and go to state 125

state 107

    (36) expression -> simpleexpression LESS_THAN seenoperator simpleexpression . genquad
    (59) genquad -> .

    SEMICOLON       reduce using rule 59 (genquad -> .)
    RPAREN          reduce using rule 59 (genquad -> .)

    genquad                        shift and go to state 126

state 108

    (37) expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression . genquad
    (59) genquad -> .

    SEMICOLON       reduce using rule 59 (genquad -> .)
    RPAREN          reduce using rule 59 (genquad -> .)

    genquad                        shift and go to state 127

state 109

    (38) expression -> simpleexpression GREATER_THAN seenoperator simpleexpression . genquad
    (59) genquad -> .

    SEMICOLON       reduce using rule 59 (genquad -> .)
    RPAREN          reduce using rule 59 (genquad -> .)

    genquad                        shift and go to state 128

state 110

    (39) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression . genquad
    (59) genquad -> .

    SEMICOLON       reduce using rule 59 (genquad -> .)
    RPAREN          reduce using rule 59 (genquad -> .)

    genquad                        shift and go to state 129

state 111

    (40) expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression . genquad
    (59) genquad -> .

    SEMICOLON       reduce using rule 59 (genquad -> .)
    RPAREN          reduce using rule 59 (genquad -> .)

    genquad                        shift and go to state 130

state 112

    (41) expression -> simpleexpression EQUALS seenoperator simpleexpression . genquad
    (59) genquad -> .

    SEMICOLON       reduce using rule 59 (genquad -> .)
    RPAREN          reduce using rule 59 (genquad -> .)

    genquad                        shift and go to state 131

state 113

    (45) simpleexpressionp -> PLUS seenoperator . simpleexpression
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    simpleexpression               shift and go to state 132
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 114

    (46) simpleexpressionp -> MINUS seenoperator . simpleexpression
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    simpleexpression               shift and go to state 133
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 115

    (47) simpleexpressionp -> OR seenoperator . simpleexpression
    (42) simpleexpression -> . term seenterm simpleexpressionp
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    simpleexpression               shift and go to state 134
    term                           shift and go to state 49
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 116

    (50) termp -> MULTIPLY seenoperator . term
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    term                           shift and go to state 135
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 117

    (51) termp -> DIV seenoperator . term
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    term                           shift and go to state 136
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 118

    (52) termp -> DIVIDE seenoperator . term
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    term                           shift and go to state 137
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 119

    (53) termp -> MOD seenoperator . term
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    term                           shift and go to state 138
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 120

    (54) termp -> AND seenoperator . term
    (48) term -> . factor seenfactor termp
    (60) factor -> . const
    (61) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (63) const -> . PLUS IDENTIFIER
    (64) const -> . MINUS IDENTIFIER
    (65) const -> . IDENTIFIER
    (66) const -> . PLUS NUMBER_CONST
    (67) const -> . MINUS NUMBER_CONST
    (68) const -> . NUMBER_CONST
    (69) const -> . STRING_CONST

    LPAREN          shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    IDENTIFIER      shift and go to state 46
    NUMBER_CONST    shift and go to state 55
    STRING_CONST    shift and go to state 56

    term                           shift and go to state 139
    factor                         shift and go to state 50
    const                          shift and go to state 51

state 121

    (55) termp -> PLUSPLUS seenoperator .

    PLUS            reduce using rule 55 (termp -> PLUSPLUS seenoperator .)
    MINUS           reduce using rule 55 (termp -> PLUSPLUS seenoperator .)
    OR              reduce using rule 55 (termp -> PLUSPLUS seenoperator .)
    LESS_THAN       reduce using rule 55 (termp -> PLUSPLUS seenoperator .)
    LESS_THAN_EQUALS reduce using rule 55 (termp -> PLUSPLUS seenoperator .)
    GREATER_THAN    reduce using rule 55 (termp -> PLUSPLUS seenoperator .)
    GREATER_THAN_EQUALS reduce using rule 55 (termp -> PLUSPLUS seenoperator .)
    NOT_EQUALS      reduce using rule 55 (termp -> PLUSPLUS seenoperator .)
    EQUALS          reduce using rule 55 (termp -> PLUSPLUS seenoperator .)
    SEMICOLON       reduce using rule 55 (termp -> PLUSPLUS seenoperator .)
    RPAREN          reduce using rule 55 (termp -> PLUSPLUS seenoperator .)


state 122

    (56) termp -> MINUSMINUS seenoperator .

    PLUS            reduce using rule 56 (termp -> MINUSMINUS seenoperator .)
    MINUS           reduce using rule 56 (termp -> MINUSMINUS seenoperator .)
    OR              reduce using rule 56 (termp -> MINUSMINUS seenoperator .)
    LESS_THAN       reduce using rule 56 (termp -> MINUSMINUS seenoperator .)
    LESS_THAN_EQUALS reduce using rule 56 (termp -> MINUSMINUS seenoperator .)
    GREATER_THAN    reduce using rule 56 (termp -> MINUSMINUS seenoperator .)
    GREATER_THAN_EQUALS reduce using rule 56 (termp -> MINUSMINUS seenoperator .)
    NOT_EQUALS      reduce using rule 56 (termp -> MINUSMINUS seenoperator .)
    EQUALS          reduce using rule 56 (termp -> MINUSMINUS seenoperator .)
    SEMICOLON       reduce using rule 56 (termp -> MINUSMINUS seenoperator .)
    RPAREN          reduce using rule 56 (termp -> MINUSMINUS seenoperator .)


state 123

    (61) factor -> LPAREN seenoperator expression RPAREN . exitparen
    (62) exitparen -> .

    MULTIPLY        reduce using rule 62 (exitparen -> .)
    DIV             reduce using rule 62 (exitparen -> .)
    DIVIDE          reduce using rule 62 (exitparen -> .)
    MOD             reduce using rule 62 (exitparen -> .)
    AND             reduce using rule 62 (exitparen -> .)
    PLUSPLUS        reduce using rule 62 (exitparen -> .)
    MINUSMINUS      reduce using rule 62 (exitparen -> .)
    PLUS            reduce using rule 62 (exitparen -> .)
    MINUS           reduce using rule 62 (exitparen -> .)
    OR              reduce using rule 62 (exitparen -> .)
    LESS_THAN       reduce using rule 62 (exitparen -> .)
    LESS_THAN_EQUALS reduce using rule 62 (exitparen -> .)
    GREATER_THAN    reduce using rule 62 (exitparen -> .)
    GREATER_THAN_EQUALS reduce using rule 62 (exitparen -> .)
    NOT_EQUALS      reduce using rule 62 (exitparen -> .)
    EQUALS          reduce using rule 62 (exitparen -> .)
    SEMICOLON       reduce using rule 62 (exitparen -> .)
    RPAREN          reduce using rule 62 (exitparen -> .)

    exitparen                      shift and go to state 140

state 124

    (23) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    THEN            shift and go to state 141


state 125

    (30) while -> WHILE LPAREN expression RPAREN checkbool seenwhile . DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    DO              shift and go to state 142


state 126

    (36) expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 36 (expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 36 (expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .)


state 127

    (37) expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 37 (expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 37 (expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .)


state 128

    (38) expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 38 (expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 38 (expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .)


state 129

    (39) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 39 (expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 39 (expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .)


state 130

    (40) expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 40 (expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 40 (expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .)


state 131

    (41) expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 41 (expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 41 (expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .)


state 132

    (45) simpleexpressionp -> PLUS seenoperator simpleexpression .

    LESS_THAN       reduce using rule 45 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 45 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 45 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 45 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 45 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    EQUALS          reduce using rule 45 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 45 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    RPAREN          reduce using rule 45 (simpleexpressionp -> PLUS seenoperator simpleexpression .)


state 133

    (46) simpleexpressionp -> MINUS seenoperator simpleexpression .

    LESS_THAN       reduce using rule 46 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 46 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 46 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 46 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 46 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    EQUALS          reduce using rule 46 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 46 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    RPAREN          reduce using rule 46 (simpleexpressionp -> MINUS seenoperator simpleexpression .)


state 134

    (47) simpleexpressionp -> OR seenoperator simpleexpression .

    LESS_THAN       reduce using rule 47 (simpleexpressionp -> OR seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 47 (simpleexpressionp -> OR seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 47 (simpleexpressionp -> OR seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 47 (simpleexpressionp -> OR seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 47 (simpleexpressionp -> OR seenoperator simpleexpression .)
    EQUALS          reduce using rule 47 (simpleexpressionp -> OR seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 47 (simpleexpressionp -> OR seenoperator simpleexpression .)
    RPAREN          reduce using rule 47 (simpleexpressionp -> OR seenoperator simpleexpression .)


state 135

    (50) termp -> MULTIPLY seenoperator term .

    PLUS            reduce using rule 50 (termp -> MULTIPLY seenoperator term .)
    MINUS           reduce using rule 50 (termp -> MULTIPLY seenoperator term .)
    OR              reduce using rule 50 (termp -> MULTIPLY seenoperator term .)
    LESS_THAN       reduce using rule 50 (termp -> MULTIPLY seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 50 (termp -> MULTIPLY seenoperator term .)
    GREATER_THAN    reduce using rule 50 (termp -> MULTIPLY seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 50 (termp -> MULTIPLY seenoperator term .)
    NOT_EQUALS      reduce using rule 50 (termp -> MULTIPLY seenoperator term .)
    EQUALS          reduce using rule 50 (termp -> MULTIPLY seenoperator term .)
    SEMICOLON       reduce using rule 50 (termp -> MULTIPLY seenoperator term .)
    RPAREN          reduce using rule 50 (termp -> MULTIPLY seenoperator term .)


state 136

    (51) termp -> DIV seenoperator term .

    PLUS            reduce using rule 51 (termp -> DIV seenoperator term .)
    MINUS           reduce using rule 51 (termp -> DIV seenoperator term .)
    OR              reduce using rule 51 (termp -> DIV seenoperator term .)
    LESS_THAN       reduce using rule 51 (termp -> DIV seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 51 (termp -> DIV seenoperator term .)
    GREATER_THAN    reduce using rule 51 (termp -> DIV seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 51 (termp -> DIV seenoperator term .)
    NOT_EQUALS      reduce using rule 51 (termp -> DIV seenoperator term .)
    EQUALS          reduce using rule 51 (termp -> DIV seenoperator term .)
    SEMICOLON       reduce using rule 51 (termp -> DIV seenoperator term .)
    RPAREN          reduce using rule 51 (termp -> DIV seenoperator term .)


state 137

    (52) termp -> DIVIDE seenoperator term .

    PLUS            reduce using rule 52 (termp -> DIVIDE seenoperator term .)
    MINUS           reduce using rule 52 (termp -> DIVIDE seenoperator term .)
    OR              reduce using rule 52 (termp -> DIVIDE seenoperator term .)
    LESS_THAN       reduce using rule 52 (termp -> DIVIDE seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 52 (termp -> DIVIDE seenoperator term .)
    GREATER_THAN    reduce using rule 52 (termp -> DIVIDE seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 52 (termp -> DIVIDE seenoperator term .)
    NOT_EQUALS      reduce using rule 52 (termp -> DIVIDE seenoperator term .)
    EQUALS          reduce using rule 52 (termp -> DIVIDE seenoperator term .)
    SEMICOLON       reduce using rule 52 (termp -> DIVIDE seenoperator term .)
    RPAREN          reduce using rule 52 (termp -> DIVIDE seenoperator term .)


state 138

    (53) termp -> MOD seenoperator term .

    PLUS            reduce using rule 53 (termp -> MOD seenoperator term .)
    MINUS           reduce using rule 53 (termp -> MOD seenoperator term .)
    OR              reduce using rule 53 (termp -> MOD seenoperator term .)
    LESS_THAN       reduce using rule 53 (termp -> MOD seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 53 (termp -> MOD seenoperator term .)
    GREATER_THAN    reduce using rule 53 (termp -> MOD seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 53 (termp -> MOD seenoperator term .)
    NOT_EQUALS      reduce using rule 53 (termp -> MOD seenoperator term .)
    EQUALS          reduce using rule 53 (termp -> MOD seenoperator term .)
    SEMICOLON       reduce using rule 53 (termp -> MOD seenoperator term .)
    RPAREN          reduce using rule 53 (termp -> MOD seenoperator term .)


state 139

    (54) termp -> AND seenoperator term .

    PLUS            reduce using rule 54 (termp -> AND seenoperator term .)
    MINUS           reduce using rule 54 (termp -> AND seenoperator term .)
    OR              reduce using rule 54 (termp -> AND seenoperator term .)
    LESS_THAN       reduce using rule 54 (termp -> AND seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 54 (termp -> AND seenoperator term .)
    GREATER_THAN    reduce using rule 54 (termp -> AND seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 54 (termp -> AND seenoperator term .)
    NOT_EQUALS      reduce using rule 54 (termp -> AND seenoperator term .)
    EQUALS          reduce using rule 54 (termp -> AND seenoperator term .)
    SEMICOLON       reduce using rule 54 (termp -> AND seenoperator term .)
    RPAREN          reduce using rule 54 (termp -> AND seenoperator term .)


state 140

    (61) factor -> LPAREN seenoperator expression RPAREN exitparen .

    MULTIPLY        reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    DIV             reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    DIVIDE          reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MOD             reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    AND             reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    PLUSPLUS        reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MINUSMINUS      reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    PLUS            reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MINUS           reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    OR              reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    LESS_THAN       reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    LESS_THAN_EQUALS reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    GREATER_THAN    reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    GREATER_THAN_EQUALS reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    NOT_EQUALS      reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    EQUALS          reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    SEMICOLON       reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    RPAREN          reduce using rule 61 (factor -> LPAREN seenoperator expression RPAREN exitparen .)


state 141

    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LCURLYBRACE     shift and go to state 143


state 142

    (30) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO . LCURLYBRACE statement RCURLYBRACE seencurlywhile

    LCURLYBRACE     shift and go to state 144


state 143

    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (72) empty -> .
    (33) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (70) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (71) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (30) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    RCURLYBRACE     reduce using rule 72 (empty -> .)
    IDENTIFIER      shift and go to state 22
    PRINT           shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    statement                      shift and go to state 145
    condition                      shift and go to state 20
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    while                          shift and go to state 21

state 144

    (30) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE . statement RCURLYBRACE seencurlywhile
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (72) empty -> .
    (33) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (70) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (71) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (30) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    RCURLYBRACE     reduce using rule 72 (empty -> .)
    IDENTIFIER      shift and go to state 22
    PRINT           shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    statement                      shift and go to state 146
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21

state 145

    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    RCURLYBRACE     shift and go to state 147


state 146

    (30) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement . RCURLYBRACE seencurlywhile

    RCURLYBRACE     shift and go to state 148


state 147

    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif seencurlyelse
    (24) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif ELSE condition seencurlyelse
    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (28) seencurlyif -> .

    ELSE            reduce using rule 28 (seencurlyif -> .)
    IDENTIFIER      reduce using rule 28 (seencurlyif -> .)
    PRINT           reduce using rule 28 (seencurlyif -> .)
    WRITE           reduce using rule 28 (seencurlyif -> .)
    IF              reduce using rule 28 (seencurlyif -> .)
    WHILE           reduce using rule 28 (seencurlyif -> .)
    END             reduce using rule 28 (seencurlyif -> .)
    RCURLYBRACE     reduce using rule 28 (seencurlyif -> .)

    seencurlyif                    shift and go to state 149

state 148

    (30) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE . seencurlywhile
    (32) seencurlywhile -> .

    IDENTIFIER      reduce using rule 32 (seencurlywhile -> .)
    PRINT           reduce using rule 32 (seencurlywhile -> .)
    WRITE           reduce using rule 32 (seencurlywhile -> .)
    IF              reduce using rule 32 (seencurlywhile -> .)
    WHILE           reduce using rule 32 (seencurlywhile -> .)
    END             reduce using rule 32 (seencurlywhile -> .)
    RCURLYBRACE     reduce using rule 32 (seencurlywhile -> .)

    seencurlywhile                 shift and go to state 150

state 149

    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . seencurlyelse
    (24) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . ELSE condition seencurlyelse
    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (29) seencurlyelse -> .

    ELSE            shift and go to state 152
    IDENTIFIER      reduce using rule 29 (seencurlyelse -> .)
    PRINT           reduce using rule 29 (seencurlyelse -> .)
    WRITE           reduce using rule 29 (seencurlyelse -> .)
    IF              reduce using rule 29 (seencurlyelse -> .)
    WHILE           reduce using rule 29 (seencurlyelse -> .)
    END             reduce using rule 29 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 29 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 151

state 150

    (30) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .

    IDENTIFIER      reduce using rule 30 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    PRINT           reduce using rule 30 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    WRITE           reduce using rule 30 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    IF              reduce using rule 30 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    WHILE           reduce using rule 30 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    END             reduce using rule 30 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    RCURLYBRACE     reduce using rule 30 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)


state 151

    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .

    IDENTIFIER      reduce using rule 23 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    PRINT           reduce using rule 23 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    WRITE           reduce using rule 23 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    IF              reduce using rule 23 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    WHILE           reduce using rule 23 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    END             reduce using rule 23 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    RCURLYBRACE     reduce using rule 23 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)


state 152

    (24) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE . condition seencurlyelse
    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE . LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LCURLYBRACE     shift and go to state 153
    IF              shift and go to state 25

    condition                      shift and go to state 154

state 153

    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE . statement RCURLYBRACE seencurlyelse
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (72) empty -> .
    (33) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (70) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (71) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (24) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (30) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    RCURLYBRACE     reduce using rule 72 (empty -> .)
    IDENTIFIER      shift and go to state 22
    PRINT           shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26

    statement                      shift and go to state 155
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21

state 154

    (24) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition . seencurlyelse
    (29) seencurlyelse -> .

    IDENTIFIER      reduce using rule 29 (seencurlyelse -> .)
    PRINT           reduce using rule 29 (seencurlyelse -> .)
    WRITE           reduce using rule 29 (seencurlyelse -> .)
    IF              reduce using rule 29 (seencurlyelse -> .)
    WHILE           reduce using rule 29 (seencurlyelse -> .)
    END             reduce using rule 29 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 29 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 156

state 155

    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement . RCURLYBRACE seencurlyelse

    RCURLYBRACE     shift and go to state 157


state 156

    (24) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .

    IDENTIFIER      reduce using rule 24 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    PRINT           reduce using rule 24 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    WRITE           reduce using rule 24 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    IF              reduce using rule 24 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    WHILE           reduce using rule 24 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    END             reduce using rule 24 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    RCURLYBRACE     reduce using rule 24 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)


state 157

    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE . seencurlyelse
    (29) seencurlyelse -> .

    IDENTIFIER      reduce using rule 29 (seencurlyelse -> .)
    PRINT           reduce using rule 29 (seencurlyelse -> .)
    WRITE           reduce using rule 29 (seencurlyelse -> .)
    IF              reduce using rule 29 (seencurlyelse -> .)
    WHILE           reduce using rule 29 (seencurlyelse -> .)
    END             reduce using rule 29 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 29 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 158

state 158

    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .

    IDENTIFIER      reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    PRINT           reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    WRITE           reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    IF              reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    WHILE           reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    END             reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    RCURLYBRACE     reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 18 resolved using rule (statement -> assign)
WARNING: rejected rule (empty -> <empty>) in state 18
WARNING: reduce/reduce conflict in state 19 resolved using rule (statement -> writefunction)
WARNING: rejected rule (empty -> <empty>) in state 19
WARNING: reduce/reduce conflict in state 20 resolved using rule (statement -> condition)
WARNING: rejected rule (empty -> <empty>) in state 20
WARNING: reduce/reduce conflict in state 21 resolved using rule (statement -> while)
WARNING: rejected rule (empty -> <empty>) in state 21
WARNING: reduce/reduce conflict in state 61 resolved using rule (vars -> VAR varsp COLON type seentype SEMICOLON)
WARNING: rejected rule (empty -> <empty>) in state 61
