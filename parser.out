Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHAR
    FALSE
    LBRACKET
    NOT
    PERIOD
    RBRACKET
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE
Rule 2     vars -> VAR varsp COLON type seentype SEMICOLON
Rule 3     vars -> VAR varsp COLON type seentype SEMICOLON vars
Rule 4     vars -> empty
Rule 5     varsp -> IDENTIFIER seenid
Rule 6     varsp -> IDENTIFIER seenid COMMA varsp
Rule 7     seenid -> <empty>
Rule 8     seentype -> <empty>
Rule 9     type -> INT
Rule 10    type -> REAL
Rule 11    type -> STRING
Rule 12    type -> BOOLEAN
Rule 13    block -> BEGIN SEMICOLON statement END SEMICOLON
Rule 14    statement -> empty
Rule 15    statement -> assign
Rule 16    statement -> assign statement
Rule 17    statement -> writefunction
Rule 18    statement -> writefunction statement
Rule 19    statement -> condition
Rule 20    statement -> condition statement
Rule 21    statement -> while
Rule 22    statement -> while statement
Rule 23    statement -> for
Rule 24    statement -> for statement
Rule 25    statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON
Rule 26    statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON
Rule 27    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
Rule 28    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
Rule 29    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
Rule 30    checkbool -> <empty>
Rule 31    seenif -> <empty>
Rule 32    seencurlyif -> <empty>
Rule 33    seencurlyelse -> <empty>
Rule 34    while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
Rule 35    seenwhile -> <empty>
Rule 36    seencurlywhile -> <empty>
Rule 37    for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
Rule 38    for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
Rule 39    seenboolfor -> <empty>
Rule 40    seenchangefor -> <empty>
Rule 41    seencurlyfor -> <empty>
Rule 42    assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
Rule 43    assignfor -> IDENTIFIER ASSIGNOP expression assignnow
Rule 44    assignnow -> <empty>
Rule 45    expression -> simpleexpression
Rule 46    expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad
Rule 47    expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
Rule 48    expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad
Rule 49    expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
Rule 50    expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
Rule 51    expression -> simpleexpression EQUALS seenoperator simpleexpression genquad
Rule 52    expression -> IDENTIFIER PLUSPLUS seenunary
Rule 53    expression -> IDENTIFIER MINUSMINUS seenunary
Rule 54    seenunary -> <empty>
Rule 55    simpleexpression -> term seenterm simpleexpressionp
Rule 56    seenterm -> <empty>
Rule 57    simpleexpressionp -> empty
Rule 58    simpleexpressionp -> PLUS seenoperator simpleexpression
Rule 59    simpleexpressionp -> MINUS seenoperator simpleexpression
Rule 60    simpleexpressionp -> OR seenoperator simpleexpression
Rule 61    term -> factor seenfactor termp
Rule 62    termp -> empty
Rule 63    termp -> MULTIPLY seenoperator term
Rule 64    termp -> DIV seenoperator term
Rule 65    termp -> DIVIDE seenoperator term
Rule 66    termp -> MOD seenoperator term
Rule 67    termp -> AND seenoperator term
Rule 68    termp -> PLUSPLUS seenoperator
Rule 69    termp -> MINUSMINUS seenoperator
Rule 70    seenoperator -> <empty>
Rule 71    seenfactor -> <empty>
Rule 72    genquad -> <empty>
Rule 73    factor -> const
Rule 74    factor -> LPAREN seenoperator expression RPAREN exitparen
Rule 75    exitparen -> <empty>
Rule 76    const -> PLUS IDENTIFIER
Rule 77    const -> MINUS IDENTIFIER
Rule 78    const -> IDENTIFIER
Rule 79    const -> PLUS NUMBER_CONST
Rule 80    const -> MINUS NUMBER_CONST
Rule 81    const -> NUMBER_CONST
Rule 82    const -> STRING_CONST
Rule 83    writefunction -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 84    writefunction -> WRITE LPAREN expression RPAREN SEMICOLON
Rule 85    empty -> <empty>

Terminals, with rules where they appear

AND                  : 67
ASSIGNOP             : 42 43
BEGIN                : 13
BOOLEAN              : 12
CHAR                 : 
COLON                : 2 3
COMMA                : 6
DIV                  : 64
DIVIDE               : 65
DO                   : 34
ELSE                 : 28 29
END                  : 13
EQUALS               : 51
FALSE                : 
FOR                  : 37 38
GREATER_THAN         : 48
GREATER_THAN_EQUALS  : 49
IDENTIFIER           : 1 5 6 25 26 42 43 52 53 76 77 78
IF                   : 27 28 29
INT                  : 9
LBRACKET             : 
LCURLYBRACE          : 1 27 28 29 29 34 37 38
LESS_THAN            : 46
LESS_THAN_EQUALS     : 47
LPAREN               : 27 28 29 34 37 38 74 83 84
MINUS                : 59 77 80
MINUSMINUS           : 26 53 69
MOD                  : 66
MULTIPLY             : 63
NOT                  : 
NOT_EQUALS           : 50
NUMBER_CONST         : 79 80 81
OR                   : 60
PERIOD               : 
PLUS                 : 58 76 79
PLUSPLUS             : 25 52 68
PRINT                : 83
PROGRAM              : 1
RBRACKET             : 
RCURLYBRACE          : 1 27 28 29 29 34 37 38
REAL                 : 10
RPAREN               : 27 28 29 34 37 38 74 83 84
SEMICOLON            : 2 3 13 13 25 26 37 38 42 83 84
STRING               : 11
STRING_CONST         : 82
THEN                 : 27 28 29
TRUE                 : 
VAR                  : 2 3
WHILE                : 34
WRITE                : 84
error                : 

Nonterminals, with rules where they appear

assign               : 15 16 37 38
assignfor            : 38
assignnow            : 42 43
block                : 1
checkbool            : 27 28 29 34 37 38
condition            : 19 20 28
const                : 73
empty                : 4 14 57 62
exitparen            : 74
expression           : 27 28 29 34 37 37 38 42 43 74 83 84
factor               : 61
for                  : 23 24
genquad              : 46 47 48 49 50 51
program              : 0
seenboolfor          : 37 38
seenchangefor        : 37 38
seencurlyelse        : 27 28 29
seencurlyfor         : 37 38
seencurlyif          : 27 28 29
seencurlywhile       : 34
seenfactor           : 61
seenid               : 5 6
seenif               : 27 28 29
seenoperator         : 46 47 48 49 50 51 58 59 60 63 64 65 66 67 68 69 74
seenterm             : 55
seentype             : 2 3
seenunary            : 25 26 52 53
seenwhile            : 34
simpleexpression     : 45 46 46 47 47 48 48 49 49 50 50 51 51 58 59 60
simpleexpressionp    : 55
statement            : 13 16 18 20 22 24 27 28 29 29 34 37 38
term                 : 55 63 64 65 66 67
termp                : 61
type                 : 2 3
vars                 : 1 3
varsp                : 2 3 6
while                : 21 22
writefunction        : 17 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . IDENTIFIER LCURLYBRACE vars block RCURLYBRACE

    IDENTIFIER      shift and go to state 3


state 3

    (1) program -> PROGRAM IDENTIFIER . LCURLYBRACE vars block RCURLYBRACE

    LCURLYBRACE     shift and go to state 4


state 4

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE . vars block RCURLYBRACE
    (2) vars -> . VAR varsp COLON type seentype SEMICOLON
    (3) vars -> . VAR varsp COLON type seentype SEMICOLON vars
    (4) vars -> . empty
    (85) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 85 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars . block RCURLYBRACE
    (13) block -> . BEGIN SEMICOLON statement END SEMICOLON

    BEGIN           shift and go to state 9

    block                          shift and go to state 8

state 6

    (2) vars -> VAR . varsp COLON type seentype SEMICOLON
    (3) vars -> VAR . varsp COLON type seentype SEMICOLON vars
    (5) varsp -> . IDENTIFIER seenid
    (6) varsp -> . IDENTIFIER seenid COMMA varsp

    IDENTIFIER      shift and go to state 11

    varsp                          shift and go to state 10

state 7

    (4) vars -> empty .

    BEGIN           reduce using rule 4 (vars -> empty .)


state 8

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars block . RCURLYBRACE

    RCURLYBRACE     shift and go to state 12


state 9

    (13) block -> BEGIN . SEMICOLON statement END SEMICOLON

    SEMICOLON       shift and go to state 13


state 10

    (2) vars -> VAR varsp . COLON type seentype SEMICOLON
    (3) vars -> VAR varsp . COLON type seentype SEMICOLON vars

    COLON           shift and go to state 14


state 11

    (5) varsp -> IDENTIFIER . seenid
    (6) varsp -> IDENTIFIER . seenid COMMA varsp
    (7) seenid -> .

    COMMA           reduce using rule 7 (seenid -> .)
    COLON           reduce using rule 7 (seenid -> .)

    seenid                         shift and go to state 15

state 12

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE .

    $end            reduce using rule 1 (program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE .)


state 13

    (13) block -> BEGIN SEMICOLON . statement END SEMICOLON
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (85) empty -> .
    (42) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (83) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (84) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (34) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (37) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    IDENTIFIER      shift and go to state 23
    END             reduce using rule 85 (empty -> .)
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 16
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 14

    (2) vars -> VAR varsp COLON . type seentype SEMICOLON
    (3) vars -> VAR varsp COLON . type seentype SEMICOLON vars
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . STRING
    (12) type -> . BOOLEAN

    INT             shift and go to state 30
    REAL            shift and go to state 31
    STRING          shift and go to state 32
    BOOLEAN         shift and go to state 33

    type                           shift and go to state 29

state 15

    (5) varsp -> IDENTIFIER seenid .
    (6) varsp -> IDENTIFIER seenid . COMMA varsp

    COLON           reduce using rule 5 (varsp -> IDENTIFIER seenid .)
    COMMA           shift and go to state 34


state 16

    (13) block -> BEGIN SEMICOLON statement . END SEMICOLON

    END             shift and go to state 35


state 17

    (14) statement -> empty .

    END             reduce using rule 14 (statement -> empty .)
    RCURLYBRACE     reduce using rule 14 (statement -> empty .)


state 18

    (15) statement -> assign .
    (16) statement -> assign . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (85) empty -> .
    (42) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (83) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (84) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (34) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (37) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 15 (statement -> assign .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 15 (statement -> assign .)
    END             reduce using rule 15 (statement -> assign .)
    RCURLYBRACE     reduce using rule 15 (statement -> assign .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 85 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 85 (empty -> .) ]

    assign                         shift and go to state 18
    statement                      shift and go to state 36
    empty                          shift and go to state 17
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 19

    (17) statement -> writefunction .
    (18) statement -> writefunction . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (85) empty -> .
    (42) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (83) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (84) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (34) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (37) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 17 (statement -> writefunction .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 17 (statement -> writefunction .)
    END             reduce using rule 17 (statement -> writefunction .)
    RCURLYBRACE     reduce using rule 17 (statement -> writefunction .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 85 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 85 (empty -> .) ]

    writefunction                  shift and go to state 19
    statement                      shift and go to state 37
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 20

    (19) statement -> condition .
    (20) statement -> condition . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (85) empty -> .
    (42) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (83) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (84) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (34) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (37) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 19 (statement -> condition .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 19 (statement -> condition .)
    END             reduce using rule 19 (statement -> condition .)
    RCURLYBRACE     reduce using rule 19 (statement -> condition .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 85 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 85 (empty -> .) ]

    condition                      shift and go to state 20
    statement                      shift and go to state 38
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    while                          shift and go to state 21
    for                            shift and go to state 22

state 21

    (21) statement -> while .
    (22) statement -> while . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (85) empty -> .
    (42) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (83) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (84) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (34) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (37) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 21 (statement -> while .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 21 (statement -> while .)
    END             reduce using rule 21 (statement -> while .)
    RCURLYBRACE     reduce using rule 21 (statement -> while .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 85 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 85 (empty -> .) ]

    while                          shift and go to state 21
    statement                      shift and go to state 39
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    for                            shift and go to state 22

state 22

    (23) statement -> for .
    (24) statement -> for . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (85) empty -> .
    (42) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (83) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (84) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (34) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (37) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 23 (statement -> for .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 23 (statement -> for .)
    END             reduce using rule 23 (statement -> for .)
    RCURLYBRACE     reduce using rule 23 (statement -> for .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 85 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 85 (empty -> .) ]

    for                            shift and go to state 22
    statement                      shift and go to state 40
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21

state 23

    (25) statement -> IDENTIFIER . PLUSPLUS seenunary SEMICOLON
    (26) statement -> IDENTIFIER . MINUSMINUS seenunary SEMICOLON
    (42) assign -> IDENTIFIER . ASSIGNOP expression assignnow SEMICOLON

    PLUSPLUS        shift and go to state 41
    MINUSMINUS      shift and go to state 42
    ASSIGNOP        shift and go to state 43


state 24

    (83) writefunction -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 44


state 25

    (84) writefunction -> WRITE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 45


state 26

    (27) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LPAREN          shift and go to state 46


state 27

    (34) while -> WHILE . LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    LPAREN          shift and go to state 47


state 28

    (37) for -> FOR . LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> FOR . LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    LPAREN          shift and go to state 48


state 29

    (2) vars -> VAR varsp COLON type . seentype SEMICOLON
    (3) vars -> VAR varsp COLON type . seentype SEMICOLON vars
    (8) seentype -> .

    SEMICOLON       reduce using rule 8 (seentype -> .)

    seentype                       shift and go to state 49

state 30

    (9) type -> INT .

    SEMICOLON       reduce using rule 9 (type -> INT .)


state 31

    (10) type -> REAL .

    SEMICOLON       reduce using rule 10 (type -> REAL .)


state 32

    (11) type -> STRING .

    SEMICOLON       reduce using rule 11 (type -> STRING .)


state 33

    (12) type -> BOOLEAN .

    SEMICOLON       reduce using rule 12 (type -> BOOLEAN .)


state 34

    (6) varsp -> IDENTIFIER seenid COMMA . varsp
    (5) varsp -> . IDENTIFIER seenid
    (6) varsp -> . IDENTIFIER seenid COMMA varsp

    IDENTIFIER      shift and go to state 11

    varsp                          shift and go to state 50

state 35

    (13) block -> BEGIN SEMICOLON statement END . SEMICOLON

    SEMICOLON       shift and go to state 51


state 36

    (16) statement -> assign statement .

    END             reduce using rule 16 (statement -> assign statement .)
    RCURLYBRACE     reduce using rule 16 (statement -> assign statement .)


state 37

    (18) statement -> writefunction statement .

    END             reduce using rule 18 (statement -> writefunction statement .)
    RCURLYBRACE     reduce using rule 18 (statement -> writefunction statement .)


state 38

    (20) statement -> condition statement .

    END             reduce using rule 20 (statement -> condition statement .)
    RCURLYBRACE     reduce using rule 20 (statement -> condition statement .)


state 39

    (22) statement -> while statement .

    END             reduce using rule 22 (statement -> while statement .)
    RCURLYBRACE     reduce using rule 22 (statement -> while statement .)


state 40

    (24) statement -> for statement .

    END             reduce using rule 24 (statement -> for statement .)
    RCURLYBRACE     reduce using rule 24 (statement -> for statement .)


state 41

    (25) statement -> IDENTIFIER PLUSPLUS . seenunary SEMICOLON
    (54) seenunary -> .

    SEMICOLON       reduce using rule 54 (seenunary -> .)

    seenunary                      shift and go to state 52

state 42

    (26) statement -> IDENTIFIER MINUSMINUS . seenunary SEMICOLON
    (54) seenunary -> .

    SEMICOLON       reduce using rule 54 (seenunary -> .)

    seenunary                      shift and go to state 53

state 43

    (42) assign -> IDENTIFIER ASSIGNOP . expression assignnow SEMICOLON
    (45) expression -> . simpleexpression
    (46) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (48) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (52) expression -> . IDENTIFIER PLUSPLUS seenunary
    (53) expression -> . IDENTIFIER MINUSMINUS seenunary
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 55
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 44

    (83) writefunction -> PRINT LPAREN . expression RPAREN SEMICOLON
    (45) expression -> . simpleexpression
    (46) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (48) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (52) expression -> . IDENTIFIER PLUSPLUS seenunary
    (53) expression -> . IDENTIFIER MINUSMINUS seenunary
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 65
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 45

    (84) writefunction -> WRITE LPAREN . expression RPAREN SEMICOLON
    (45) expression -> . simpleexpression
    (46) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (48) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (52) expression -> . IDENTIFIER PLUSPLUS seenunary
    (53) expression -> . IDENTIFIER MINUSMINUS seenunary
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 66
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 46

    (27) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (45) expression -> . simpleexpression
    (46) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (48) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (52) expression -> . IDENTIFIER PLUSPLUS seenunary
    (53) expression -> . IDENTIFIER MINUSMINUS seenunary
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 67
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 47

    (34) while -> WHILE LPAREN . expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (45) expression -> . simpleexpression
    (46) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (48) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (52) expression -> . IDENTIFIER PLUSPLUS seenunary
    (53) expression -> . IDENTIFIER MINUSMINUS seenunary
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 68
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 48

    (37) for -> FOR LPAREN . assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> FOR LPAREN . assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (42) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON

    IDENTIFIER      shift and go to state 70

    assign                         shift and go to state 69

state 49

    (2) vars -> VAR varsp COLON type seentype . SEMICOLON
    (3) vars -> VAR varsp COLON type seentype . SEMICOLON vars

    SEMICOLON       shift and go to state 71


state 50

    (6) varsp -> IDENTIFIER seenid COMMA varsp .

    COLON           reduce using rule 6 (varsp -> IDENTIFIER seenid COMMA varsp .)


state 51

    (13) block -> BEGIN SEMICOLON statement END SEMICOLON .

    RCURLYBRACE     reduce using rule 13 (block -> BEGIN SEMICOLON statement END SEMICOLON .)


state 52

    (25) statement -> IDENTIFIER PLUSPLUS seenunary . SEMICOLON

    SEMICOLON       shift and go to state 72


state 53

    (26) statement -> IDENTIFIER MINUSMINUS seenunary . SEMICOLON

    SEMICOLON       shift and go to state 73


state 54

    (52) expression -> IDENTIFIER . PLUSPLUS seenunary
    (53) expression -> IDENTIFIER . MINUSMINUS seenunary
    (78) const -> IDENTIFIER .

  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    PLUSPLUS        shift and go to state 74
    MINUSMINUS      shift and go to state 75
    MULTIPLY        reduce using rule 78 (const -> IDENTIFIER .)
    DIV             reduce using rule 78 (const -> IDENTIFIER .)
    DIVIDE          reduce using rule 78 (const -> IDENTIFIER .)
    MOD             reduce using rule 78 (const -> IDENTIFIER .)
    AND             reduce using rule 78 (const -> IDENTIFIER .)
    PLUS            reduce using rule 78 (const -> IDENTIFIER .)
    MINUS           reduce using rule 78 (const -> IDENTIFIER .)
    OR              reduce using rule 78 (const -> IDENTIFIER .)
    LESS_THAN       reduce using rule 78 (const -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 78 (const -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 78 (const -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 78 (const -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 78 (const -> IDENTIFIER .)
    EQUALS          reduce using rule 78 (const -> IDENTIFIER .)
    SEMICOLON       reduce using rule 78 (const -> IDENTIFIER .)
    RPAREN          reduce using rule 78 (const -> IDENTIFIER .)

  ! PLUSPLUS        [ reduce using rule 78 (const -> IDENTIFIER .) ]
  ! MINUSMINUS      [ reduce using rule 78 (const -> IDENTIFIER .) ]


state 55

    (42) assign -> IDENTIFIER ASSIGNOP expression . assignnow SEMICOLON
    (44) assignnow -> .

    SEMICOLON       reduce using rule 44 (assignnow -> .)

    assignnow                      shift and go to state 76

state 56

    (45) expression -> simpleexpression .
    (46) expression -> simpleexpression . LESS_THAN seenoperator simpleexpression genquad
    (47) expression -> simpleexpression . LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (48) expression -> simpleexpression . GREATER_THAN seenoperator simpleexpression genquad
    (49) expression -> simpleexpression . GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> simpleexpression . NOT_EQUALS seenoperator simpleexpression genquad
    (51) expression -> simpleexpression . EQUALS seenoperator simpleexpression genquad

    SEMICOLON       reduce using rule 45 (expression -> simpleexpression .)
    RPAREN          reduce using rule 45 (expression -> simpleexpression .)
    LESS_THAN       shift and go to state 77
    LESS_THAN_EQUALS shift and go to state 78
    GREATER_THAN    shift and go to state 79
    GREATER_THAN_EQUALS shift and go to state 80
    NOT_EQUALS      shift and go to state 81
    EQUALS          shift and go to state 82


state 57

    (55) simpleexpression -> term . seenterm simpleexpressionp
    (56) seenterm -> .

    PLUS            reduce using rule 56 (seenterm -> .)
    MINUS           reduce using rule 56 (seenterm -> .)
    OR              reduce using rule 56 (seenterm -> .)
    LESS_THAN       reduce using rule 56 (seenterm -> .)
    LESS_THAN_EQUALS reduce using rule 56 (seenterm -> .)
    GREATER_THAN    reduce using rule 56 (seenterm -> .)
    GREATER_THAN_EQUALS reduce using rule 56 (seenterm -> .)
    NOT_EQUALS      reduce using rule 56 (seenterm -> .)
    EQUALS          reduce using rule 56 (seenterm -> .)
    SEMICOLON       reduce using rule 56 (seenterm -> .)
    RPAREN          reduce using rule 56 (seenterm -> .)

    seenterm                       shift and go to state 83

state 58

    (61) term -> factor . seenfactor termp
    (71) seenfactor -> .

    MULTIPLY        reduce using rule 71 (seenfactor -> .)
    DIV             reduce using rule 71 (seenfactor -> .)
    DIVIDE          reduce using rule 71 (seenfactor -> .)
    MOD             reduce using rule 71 (seenfactor -> .)
    AND             reduce using rule 71 (seenfactor -> .)
    PLUSPLUS        reduce using rule 71 (seenfactor -> .)
    MINUSMINUS      reduce using rule 71 (seenfactor -> .)
    PLUS            reduce using rule 71 (seenfactor -> .)
    MINUS           reduce using rule 71 (seenfactor -> .)
    OR              reduce using rule 71 (seenfactor -> .)
    LESS_THAN       reduce using rule 71 (seenfactor -> .)
    LESS_THAN_EQUALS reduce using rule 71 (seenfactor -> .)
    GREATER_THAN    reduce using rule 71 (seenfactor -> .)
    GREATER_THAN_EQUALS reduce using rule 71 (seenfactor -> .)
    NOT_EQUALS      reduce using rule 71 (seenfactor -> .)
    EQUALS          reduce using rule 71 (seenfactor -> .)
    SEMICOLON       reduce using rule 71 (seenfactor -> .)
    RPAREN          reduce using rule 71 (seenfactor -> .)

    seenfactor                     shift and go to state 84

state 59

    (73) factor -> const .

    MULTIPLY        reduce using rule 73 (factor -> const .)
    DIV             reduce using rule 73 (factor -> const .)
    DIVIDE          reduce using rule 73 (factor -> const .)
    MOD             reduce using rule 73 (factor -> const .)
    AND             reduce using rule 73 (factor -> const .)
    PLUSPLUS        reduce using rule 73 (factor -> const .)
    MINUSMINUS      reduce using rule 73 (factor -> const .)
    PLUS            reduce using rule 73 (factor -> const .)
    MINUS           reduce using rule 73 (factor -> const .)
    OR              reduce using rule 73 (factor -> const .)
    LESS_THAN       reduce using rule 73 (factor -> const .)
    LESS_THAN_EQUALS reduce using rule 73 (factor -> const .)
    GREATER_THAN    reduce using rule 73 (factor -> const .)
    GREATER_THAN_EQUALS reduce using rule 73 (factor -> const .)
    NOT_EQUALS      reduce using rule 73 (factor -> const .)
    EQUALS          reduce using rule 73 (factor -> const .)
    SEMICOLON       reduce using rule 73 (factor -> const .)
    RPAREN          reduce using rule 73 (factor -> const .)


state 60

    (74) factor -> LPAREN . seenoperator expression RPAREN exitparen
    (70) seenoperator -> .

    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 85

state 61

    (76) const -> PLUS . IDENTIFIER
    (79) const -> PLUS . NUMBER_CONST

    IDENTIFIER      shift and go to state 86
    NUMBER_CONST    shift and go to state 87


state 62

    (77) const -> MINUS . IDENTIFIER
    (80) const -> MINUS . NUMBER_CONST

    IDENTIFIER      shift and go to state 88
    NUMBER_CONST    shift and go to state 89


state 63

    (81) const -> NUMBER_CONST .

    MULTIPLY        reduce using rule 81 (const -> NUMBER_CONST .)
    DIV             reduce using rule 81 (const -> NUMBER_CONST .)
    DIVIDE          reduce using rule 81 (const -> NUMBER_CONST .)
    MOD             reduce using rule 81 (const -> NUMBER_CONST .)
    AND             reduce using rule 81 (const -> NUMBER_CONST .)
    PLUSPLUS        reduce using rule 81 (const -> NUMBER_CONST .)
    MINUSMINUS      reduce using rule 81 (const -> NUMBER_CONST .)
    PLUS            reduce using rule 81 (const -> NUMBER_CONST .)
    MINUS           reduce using rule 81 (const -> NUMBER_CONST .)
    OR              reduce using rule 81 (const -> NUMBER_CONST .)
    LESS_THAN       reduce using rule 81 (const -> NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 81 (const -> NUMBER_CONST .)
    GREATER_THAN    reduce using rule 81 (const -> NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 81 (const -> NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 81 (const -> NUMBER_CONST .)
    EQUALS          reduce using rule 81 (const -> NUMBER_CONST .)
    SEMICOLON       reduce using rule 81 (const -> NUMBER_CONST .)
    RPAREN          reduce using rule 81 (const -> NUMBER_CONST .)


state 64

    (82) const -> STRING_CONST .

    MULTIPLY        reduce using rule 82 (const -> STRING_CONST .)
    DIV             reduce using rule 82 (const -> STRING_CONST .)
    DIVIDE          reduce using rule 82 (const -> STRING_CONST .)
    MOD             reduce using rule 82 (const -> STRING_CONST .)
    AND             reduce using rule 82 (const -> STRING_CONST .)
    PLUSPLUS        reduce using rule 82 (const -> STRING_CONST .)
    MINUSMINUS      reduce using rule 82 (const -> STRING_CONST .)
    PLUS            reduce using rule 82 (const -> STRING_CONST .)
    MINUS           reduce using rule 82 (const -> STRING_CONST .)
    OR              reduce using rule 82 (const -> STRING_CONST .)
    LESS_THAN       reduce using rule 82 (const -> STRING_CONST .)
    LESS_THAN_EQUALS reduce using rule 82 (const -> STRING_CONST .)
    GREATER_THAN    reduce using rule 82 (const -> STRING_CONST .)
    GREATER_THAN_EQUALS reduce using rule 82 (const -> STRING_CONST .)
    NOT_EQUALS      reduce using rule 82 (const -> STRING_CONST .)
    EQUALS          reduce using rule 82 (const -> STRING_CONST .)
    SEMICOLON       reduce using rule 82 (const -> STRING_CONST .)
    RPAREN          reduce using rule 82 (const -> STRING_CONST .)


state 65

    (83) writefunction -> PRINT LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 90


state 66

    (84) writefunction -> WRITE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 91


state 67

    (27) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    RPAREN          shift and go to state 92


state 68

    (34) while -> WHILE LPAREN expression . RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    RPAREN          shift and go to state 93


state 69

    (37) for -> FOR LPAREN assign . expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> FOR LPAREN assign . expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (45) expression -> . simpleexpression
    (46) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (48) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (52) expression -> . IDENTIFIER PLUSPLUS seenunary
    (53) expression -> . IDENTIFIER MINUSMINUS seenunary
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 94
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 70

    (42) assign -> IDENTIFIER . ASSIGNOP expression assignnow SEMICOLON

    ASSIGNOP        shift and go to state 43


state 71

    (2) vars -> VAR varsp COLON type seentype SEMICOLON .
    (3) vars -> VAR varsp COLON type seentype SEMICOLON . vars
    (2) vars -> . VAR varsp COLON type seentype SEMICOLON
    (3) vars -> . VAR varsp COLON type seentype SEMICOLON vars
    (4) vars -> . empty
    (85) empty -> .

  ! reduce/reduce conflict for BEGIN resolved using rule 2 (vars -> VAR varsp COLON type seentype SEMICOLON .)
    BEGIN           reduce using rule 2 (vars -> VAR varsp COLON type seentype SEMICOLON .)
    VAR             shift and go to state 6

  ! BEGIN           [ reduce using rule 85 (empty -> .) ]

    vars                           shift and go to state 95
    empty                          shift and go to state 7

state 72

    (25) statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON .

    END             reduce using rule 25 (statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON .)
    RCURLYBRACE     reduce using rule 25 (statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON .)


state 73

    (26) statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON .

    END             reduce using rule 26 (statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON .)
    RCURLYBRACE     reduce using rule 26 (statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON .)


state 74

    (52) expression -> IDENTIFIER PLUSPLUS . seenunary
    (54) seenunary -> .

    SEMICOLON       reduce using rule 54 (seenunary -> .)
    RPAREN          reduce using rule 54 (seenunary -> .)

    seenunary                      shift and go to state 96

state 75

    (53) expression -> IDENTIFIER MINUSMINUS . seenunary
    (54) seenunary -> .

    SEMICOLON       reduce using rule 54 (seenunary -> .)
    RPAREN          reduce using rule 54 (seenunary -> .)

    seenunary                      shift and go to state 97

state 76

    (42) assign -> IDENTIFIER ASSIGNOP expression assignnow . SEMICOLON

    SEMICOLON       shift and go to state 98


state 77

    (46) expression -> simpleexpression LESS_THAN . seenoperator simpleexpression genquad
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 99

state 78

    (47) expression -> simpleexpression LESS_THAN_EQUALS . seenoperator simpleexpression genquad
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 100

state 79

    (48) expression -> simpleexpression GREATER_THAN . seenoperator simpleexpression genquad
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 101

state 80

    (49) expression -> simpleexpression GREATER_THAN_EQUALS . seenoperator simpleexpression genquad
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 102

state 81

    (50) expression -> simpleexpression NOT_EQUALS . seenoperator simpleexpression genquad
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 103

state 82

    (51) expression -> simpleexpression EQUALS . seenoperator simpleexpression genquad
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 104

state 83

    (55) simpleexpression -> term seenterm . simpleexpressionp
    (57) simpleexpressionp -> . empty
    (58) simpleexpressionp -> . PLUS seenoperator simpleexpression
    (59) simpleexpressionp -> . MINUS seenoperator simpleexpression
    (60) simpleexpressionp -> . OR seenoperator simpleexpression
    (85) empty -> .

    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    OR              shift and go to state 109
    LESS_THAN       reduce using rule 85 (empty -> .)
    LESS_THAN_EQUALS reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    GREATER_THAN_EQUALS reduce using rule 85 (empty -> .)
    NOT_EQUALS      reduce using rule 85 (empty -> .)
    EQUALS          reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RPAREN          reduce using rule 85 (empty -> .)

    simpleexpressionp              shift and go to state 105
    empty                          shift and go to state 106

state 84

    (61) term -> factor seenfactor . termp
    (62) termp -> . empty
    (63) termp -> . MULTIPLY seenoperator term
    (64) termp -> . DIV seenoperator term
    (65) termp -> . DIVIDE seenoperator term
    (66) termp -> . MOD seenoperator term
    (67) termp -> . AND seenoperator term
    (68) termp -> . PLUSPLUS seenoperator
    (69) termp -> . MINUSMINUS seenoperator
    (85) empty -> .

    MULTIPLY        shift and go to state 112
    DIV             shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 115
    AND             shift and go to state 116
    PLUSPLUS        shift and go to state 117
    MINUSMINUS      shift and go to state 118
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    LESS_THAN       reduce using rule 85 (empty -> .)
    LESS_THAN_EQUALS reduce using rule 85 (empty -> .)
    GREATER_THAN    reduce using rule 85 (empty -> .)
    GREATER_THAN_EQUALS reduce using rule 85 (empty -> .)
    NOT_EQUALS      reduce using rule 85 (empty -> .)
    EQUALS          reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RPAREN          reduce using rule 85 (empty -> .)

    termp                          shift and go to state 110
    empty                          shift and go to state 111

state 85

    (74) factor -> LPAREN seenoperator . expression RPAREN exitparen
    (45) expression -> . simpleexpression
    (46) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (48) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (52) expression -> . IDENTIFIER PLUSPLUS seenunary
    (53) expression -> . IDENTIFIER MINUSMINUS seenunary
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 119
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 86

    (76) const -> PLUS IDENTIFIER .

    MULTIPLY        reduce using rule 76 (const -> PLUS IDENTIFIER .)
    DIV             reduce using rule 76 (const -> PLUS IDENTIFIER .)
    DIVIDE          reduce using rule 76 (const -> PLUS IDENTIFIER .)
    MOD             reduce using rule 76 (const -> PLUS IDENTIFIER .)
    AND             reduce using rule 76 (const -> PLUS IDENTIFIER .)
    PLUSPLUS        reduce using rule 76 (const -> PLUS IDENTIFIER .)
    MINUSMINUS      reduce using rule 76 (const -> PLUS IDENTIFIER .)
    PLUS            reduce using rule 76 (const -> PLUS IDENTIFIER .)
    MINUS           reduce using rule 76 (const -> PLUS IDENTIFIER .)
    OR              reduce using rule 76 (const -> PLUS IDENTIFIER .)
    LESS_THAN       reduce using rule 76 (const -> PLUS IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 76 (const -> PLUS IDENTIFIER .)
    GREATER_THAN    reduce using rule 76 (const -> PLUS IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 76 (const -> PLUS IDENTIFIER .)
    NOT_EQUALS      reduce using rule 76 (const -> PLUS IDENTIFIER .)
    EQUALS          reduce using rule 76 (const -> PLUS IDENTIFIER .)
    SEMICOLON       reduce using rule 76 (const -> PLUS IDENTIFIER .)
    RPAREN          reduce using rule 76 (const -> PLUS IDENTIFIER .)


state 87

    (79) const -> PLUS NUMBER_CONST .

    MULTIPLY        reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    DIV             reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    DIVIDE          reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    MOD             reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    AND             reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    PLUSPLUS        reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    MINUSMINUS      reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    PLUS            reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    MINUS           reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    OR              reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    LESS_THAN       reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    GREATER_THAN    reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    EQUALS          reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    SEMICOLON       reduce using rule 79 (const -> PLUS NUMBER_CONST .)
    RPAREN          reduce using rule 79 (const -> PLUS NUMBER_CONST .)


state 88

    (77) const -> MINUS IDENTIFIER .

    MULTIPLY        reduce using rule 77 (const -> MINUS IDENTIFIER .)
    DIV             reduce using rule 77 (const -> MINUS IDENTIFIER .)
    DIVIDE          reduce using rule 77 (const -> MINUS IDENTIFIER .)
    MOD             reduce using rule 77 (const -> MINUS IDENTIFIER .)
    AND             reduce using rule 77 (const -> MINUS IDENTIFIER .)
    PLUSPLUS        reduce using rule 77 (const -> MINUS IDENTIFIER .)
    MINUSMINUS      reduce using rule 77 (const -> MINUS IDENTIFIER .)
    PLUS            reduce using rule 77 (const -> MINUS IDENTIFIER .)
    MINUS           reduce using rule 77 (const -> MINUS IDENTIFIER .)
    OR              reduce using rule 77 (const -> MINUS IDENTIFIER .)
    LESS_THAN       reduce using rule 77 (const -> MINUS IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 77 (const -> MINUS IDENTIFIER .)
    GREATER_THAN    reduce using rule 77 (const -> MINUS IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 77 (const -> MINUS IDENTIFIER .)
    NOT_EQUALS      reduce using rule 77 (const -> MINUS IDENTIFIER .)
    EQUALS          reduce using rule 77 (const -> MINUS IDENTIFIER .)
    SEMICOLON       reduce using rule 77 (const -> MINUS IDENTIFIER .)
    RPAREN          reduce using rule 77 (const -> MINUS IDENTIFIER .)


state 89

    (80) const -> MINUS NUMBER_CONST .

    MULTIPLY        reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    DIV             reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    DIVIDE          reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    MOD             reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    AND             reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    PLUSPLUS        reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    MINUSMINUS      reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    PLUS            reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    MINUS           reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    OR              reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    LESS_THAN       reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    GREATER_THAN    reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    EQUALS          reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    SEMICOLON       reduce using rule 80 (const -> MINUS NUMBER_CONST .)
    RPAREN          reduce using rule 80 (const -> MINUS NUMBER_CONST .)


state 90

    (83) writefunction -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 120


state 91

    (84) writefunction -> WRITE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 121


state 92

    (27) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (30) checkbool -> .

    THEN            reduce using rule 30 (checkbool -> .)

    checkbool                      shift and go to state 122

state 93

    (34) while -> WHILE LPAREN expression RPAREN . checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (30) checkbool -> .

    DO              reduce using rule 30 (checkbool -> .)

    checkbool                      shift and go to state 123

state 94

    (37) for -> FOR LPAREN assign expression . checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> FOR LPAREN assign expression . checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (30) checkbool -> .

    SEMICOLON       reduce using rule 30 (checkbool -> .)

    checkbool                      shift and go to state 124

state 95

    (3) vars -> VAR varsp COLON type seentype SEMICOLON vars .

    BEGIN           reduce using rule 3 (vars -> VAR varsp COLON type seentype SEMICOLON vars .)


state 96

    (52) expression -> IDENTIFIER PLUSPLUS seenunary .

    SEMICOLON       reduce using rule 52 (expression -> IDENTIFIER PLUSPLUS seenunary .)
    RPAREN          reduce using rule 52 (expression -> IDENTIFIER PLUSPLUS seenunary .)


state 97

    (53) expression -> IDENTIFIER MINUSMINUS seenunary .

    SEMICOLON       reduce using rule 53 (expression -> IDENTIFIER MINUSMINUS seenunary .)
    RPAREN          reduce using rule 53 (expression -> IDENTIFIER MINUSMINUS seenunary .)


state 98

    (42) assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .

    IDENTIFIER      reduce using rule 42 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    PRINT           reduce using rule 42 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    WRITE           reduce using rule 42 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    IF              reduce using rule 42 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    WHILE           reduce using rule 42 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    FOR             reduce using rule 42 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    END             reduce using rule 42 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    RCURLYBRACE     reduce using rule 42 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    LPAREN          reduce using rule 42 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    PLUS            reduce using rule 42 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    MINUS           reduce using rule 42 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    NUMBER_CONST    reduce using rule 42 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    STRING_CONST    reduce using rule 42 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)


state 99

    (46) expression -> simpleexpression LESS_THAN seenoperator . simpleexpression genquad
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 125
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 100

    (47) expression -> simpleexpression LESS_THAN_EQUALS seenoperator . simpleexpression genquad
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 127
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 101

    (48) expression -> simpleexpression GREATER_THAN seenoperator . simpleexpression genquad
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 128
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 102

    (49) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator . simpleexpression genquad
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 129
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 103

    (50) expression -> simpleexpression NOT_EQUALS seenoperator . simpleexpression genquad
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 130
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 104

    (51) expression -> simpleexpression EQUALS seenoperator . simpleexpression genquad
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 131
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 105

    (55) simpleexpression -> term seenterm simpleexpressionp .

    LESS_THAN       reduce using rule 55 (simpleexpression -> term seenterm simpleexpressionp .)
    LESS_THAN_EQUALS reduce using rule 55 (simpleexpression -> term seenterm simpleexpressionp .)
    GREATER_THAN    reduce using rule 55 (simpleexpression -> term seenterm simpleexpressionp .)
    GREATER_THAN_EQUALS reduce using rule 55 (simpleexpression -> term seenterm simpleexpressionp .)
    NOT_EQUALS      reduce using rule 55 (simpleexpression -> term seenterm simpleexpressionp .)
    EQUALS          reduce using rule 55 (simpleexpression -> term seenterm simpleexpressionp .)
    SEMICOLON       reduce using rule 55 (simpleexpression -> term seenterm simpleexpressionp .)
    RPAREN          reduce using rule 55 (simpleexpression -> term seenterm simpleexpressionp .)


state 106

    (57) simpleexpressionp -> empty .

    LESS_THAN       reduce using rule 57 (simpleexpressionp -> empty .)
    LESS_THAN_EQUALS reduce using rule 57 (simpleexpressionp -> empty .)
    GREATER_THAN    reduce using rule 57 (simpleexpressionp -> empty .)
    GREATER_THAN_EQUALS reduce using rule 57 (simpleexpressionp -> empty .)
    NOT_EQUALS      reduce using rule 57 (simpleexpressionp -> empty .)
    EQUALS          reduce using rule 57 (simpleexpressionp -> empty .)
    SEMICOLON       reduce using rule 57 (simpleexpressionp -> empty .)
    RPAREN          reduce using rule 57 (simpleexpressionp -> empty .)


state 107

    (58) simpleexpressionp -> PLUS . seenoperator simpleexpression
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 132

state 108

    (59) simpleexpressionp -> MINUS . seenoperator simpleexpression
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 133

state 109

    (60) simpleexpressionp -> OR . seenoperator simpleexpression
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 134

state 110

    (61) term -> factor seenfactor termp .

    PLUS            reduce using rule 61 (term -> factor seenfactor termp .)
    MINUS           reduce using rule 61 (term -> factor seenfactor termp .)
    OR              reduce using rule 61 (term -> factor seenfactor termp .)
    LESS_THAN       reduce using rule 61 (term -> factor seenfactor termp .)
    LESS_THAN_EQUALS reduce using rule 61 (term -> factor seenfactor termp .)
    GREATER_THAN    reduce using rule 61 (term -> factor seenfactor termp .)
    GREATER_THAN_EQUALS reduce using rule 61 (term -> factor seenfactor termp .)
    NOT_EQUALS      reduce using rule 61 (term -> factor seenfactor termp .)
    EQUALS          reduce using rule 61 (term -> factor seenfactor termp .)
    SEMICOLON       reduce using rule 61 (term -> factor seenfactor termp .)
    RPAREN          reduce using rule 61 (term -> factor seenfactor termp .)


state 111

    (62) termp -> empty .

    PLUS            reduce using rule 62 (termp -> empty .)
    MINUS           reduce using rule 62 (termp -> empty .)
    OR              reduce using rule 62 (termp -> empty .)
    LESS_THAN       reduce using rule 62 (termp -> empty .)
    LESS_THAN_EQUALS reduce using rule 62 (termp -> empty .)
    GREATER_THAN    reduce using rule 62 (termp -> empty .)
    GREATER_THAN_EQUALS reduce using rule 62 (termp -> empty .)
    NOT_EQUALS      reduce using rule 62 (termp -> empty .)
    EQUALS          reduce using rule 62 (termp -> empty .)
    SEMICOLON       reduce using rule 62 (termp -> empty .)
    RPAREN          reduce using rule 62 (termp -> empty .)


state 112

    (63) termp -> MULTIPLY . seenoperator term
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 135

state 113

    (64) termp -> DIV . seenoperator term
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 136

state 114

    (65) termp -> DIVIDE . seenoperator term
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 137

state 115

    (66) termp -> MOD . seenoperator term
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 138

state 116

    (67) termp -> AND . seenoperator term
    (70) seenoperator -> .

    LPAREN          reduce using rule 70 (seenoperator -> .)
    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    IDENTIFIER      reduce using rule 70 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 70 (seenoperator -> .)
    STRING_CONST    reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 139

state 117

    (68) termp -> PLUSPLUS . seenoperator
    (70) seenoperator -> .

    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    OR              reduce using rule 70 (seenoperator -> .)
    LESS_THAN       reduce using rule 70 (seenoperator -> .)
    LESS_THAN_EQUALS reduce using rule 70 (seenoperator -> .)
    GREATER_THAN    reduce using rule 70 (seenoperator -> .)
    GREATER_THAN_EQUALS reduce using rule 70 (seenoperator -> .)
    NOT_EQUALS      reduce using rule 70 (seenoperator -> .)
    EQUALS          reduce using rule 70 (seenoperator -> .)
    SEMICOLON       reduce using rule 70 (seenoperator -> .)
    RPAREN          reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 140

state 118

    (69) termp -> MINUSMINUS . seenoperator
    (70) seenoperator -> .

    PLUS            reduce using rule 70 (seenoperator -> .)
    MINUS           reduce using rule 70 (seenoperator -> .)
    OR              reduce using rule 70 (seenoperator -> .)
    LESS_THAN       reduce using rule 70 (seenoperator -> .)
    LESS_THAN_EQUALS reduce using rule 70 (seenoperator -> .)
    GREATER_THAN    reduce using rule 70 (seenoperator -> .)
    GREATER_THAN_EQUALS reduce using rule 70 (seenoperator -> .)
    NOT_EQUALS      reduce using rule 70 (seenoperator -> .)
    EQUALS          reduce using rule 70 (seenoperator -> .)
    SEMICOLON       reduce using rule 70 (seenoperator -> .)
    RPAREN          reduce using rule 70 (seenoperator -> .)

    seenoperator                   shift and go to state 141

state 119

    (74) factor -> LPAREN seenoperator expression . RPAREN exitparen

    RPAREN          shift and go to state 142


state 120

    (83) writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 83 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 83 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 83 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 83 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 83 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 83 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 83 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RCURLYBRACE     reduce using rule 83 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 121

    (84) writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 84 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 84 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 84 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 84 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 84 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 84 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 84 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    RCURLYBRACE     reduce using rule 84 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)


state 122

    (27) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (31) seenif -> .

    THEN            reduce using rule 31 (seenif -> .)

    seenif                         shift and go to state 143

state 123

    (34) while -> WHILE LPAREN expression RPAREN checkbool . seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (35) seenwhile -> .

    DO              reduce using rule 35 (seenwhile -> .)

    seenwhile                      shift and go to state 144

state 124

    (37) for -> FOR LPAREN assign expression checkbool . seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> FOR LPAREN assign expression checkbool . seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (39) seenboolfor -> .

    SEMICOLON       reduce using rule 39 (seenboolfor -> .)

    seenboolfor                    shift and go to state 145

state 125

    (46) expression -> simpleexpression LESS_THAN seenoperator simpleexpression . genquad
    (72) genquad -> .

    SEMICOLON       reduce using rule 72 (genquad -> .)
    RPAREN          reduce using rule 72 (genquad -> .)

    genquad                        shift and go to state 146

state 126

    (78) const -> IDENTIFIER .

    MULTIPLY        reduce using rule 78 (const -> IDENTIFIER .)
    DIV             reduce using rule 78 (const -> IDENTIFIER .)
    DIVIDE          reduce using rule 78 (const -> IDENTIFIER .)
    MOD             reduce using rule 78 (const -> IDENTIFIER .)
    AND             reduce using rule 78 (const -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 78 (const -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 78 (const -> IDENTIFIER .)
    PLUS            reduce using rule 78 (const -> IDENTIFIER .)
    MINUS           reduce using rule 78 (const -> IDENTIFIER .)
    OR              reduce using rule 78 (const -> IDENTIFIER .)
    SEMICOLON       reduce using rule 78 (const -> IDENTIFIER .)
    RPAREN          reduce using rule 78 (const -> IDENTIFIER .)
    LESS_THAN       reduce using rule 78 (const -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 78 (const -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 78 (const -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 78 (const -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 78 (const -> IDENTIFIER .)
    EQUALS          reduce using rule 78 (const -> IDENTIFIER .)


state 127

    (47) expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression . genquad
    (72) genquad -> .

    SEMICOLON       reduce using rule 72 (genquad -> .)
    RPAREN          reduce using rule 72 (genquad -> .)

    genquad                        shift and go to state 147

state 128

    (48) expression -> simpleexpression GREATER_THAN seenoperator simpleexpression . genquad
    (72) genquad -> .

    SEMICOLON       reduce using rule 72 (genquad -> .)
    RPAREN          reduce using rule 72 (genquad -> .)

    genquad                        shift and go to state 148

state 129

    (49) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression . genquad
    (72) genquad -> .

    SEMICOLON       reduce using rule 72 (genquad -> .)
    RPAREN          reduce using rule 72 (genquad -> .)

    genquad                        shift and go to state 149

state 130

    (50) expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression . genquad
    (72) genquad -> .

    SEMICOLON       reduce using rule 72 (genquad -> .)
    RPAREN          reduce using rule 72 (genquad -> .)

    genquad                        shift and go to state 150

state 131

    (51) expression -> simpleexpression EQUALS seenoperator simpleexpression . genquad
    (72) genquad -> .

    SEMICOLON       reduce using rule 72 (genquad -> .)
    RPAREN          reduce using rule 72 (genquad -> .)

    genquad                        shift and go to state 151

state 132

    (58) simpleexpressionp -> PLUS seenoperator . simpleexpression
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 152
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 133

    (59) simpleexpressionp -> MINUS seenoperator . simpleexpression
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 153
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 134

    (60) simpleexpressionp -> OR seenoperator . simpleexpression
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 154
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 135

    (63) termp -> MULTIPLY seenoperator . term
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    term                           shift and go to state 155
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 136

    (64) termp -> DIV seenoperator . term
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    term                           shift and go to state 156
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 137

    (65) termp -> DIVIDE seenoperator . term
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    term                           shift and go to state 157
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 138

    (66) termp -> MOD seenoperator . term
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    term                           shift and go to state 158
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 139

    (67) termp -> AND seenoperator . term
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 126
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    term                           shift and go to state 159
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 140

    (68) termp -> PLUSPLUS seenoperator .

    PLUS            reduce using rule 68 (termp -> PLUSPLUS seenoperator .)
    MINUS           reduce using rule 68 (termp -> PLUSPLUS seenoperator .)
    OR              reduce using rule 68 (termp -> PLUSPLUS seenoperator .)
    LESS_THAN       reduce using rule 68 (termp -> PLUSPLUS seenoperator .)
    LESS_THAN_EQUALS reduce using rule 68 (termp -> PLUSPLUS seenoperator .)
    GREATER_THAN    reduce using rule 68 (termp -> PLUSPLUS seenoperator .)
    GREATER_THAN_EQUALS reduce using rule 68 (termp -> PLUSPLUS seenoperator .)
    NOT_EQUALS      reduce using rule 68 (termp -> PLUSPLUS seenoperator .)
    EQUALS          reduce using rule 68 (termp -> PLUSPLUS seenoperator .)
    SEMICOLON       reduce using rule 68 (termp -> PLUSPLUS seenoperator .)
    RPAREN          reduce using rule 68 (termp -> PLUSPLUS seenoperator .)


state 141

    (69) termp -> MINUSMINUS seenoperator .

    PLUS            reduce using rule 69 (termp -> MINUSMINUS seenoperator .)
    MINUS           reduce using rule 69 (termp -> MINUSMINUS seenoperator .)
    OR              reduce using rule 69 (termp -> MINUSMINUS seenoperator .)
    LESS_THAN       reduce using rule 69 (termp -> MINUSMINUS seenoperator .)
    LESS_THAN_EQUALS reduce using rule 69 (termp -> MINUSMINUS seenoperator .)
    GREATER_THAN    reduce using rule 69 (termp -> MINUSMINUS seenoperator .)
    GREATER_THAN_EQUALS reduce using rule 69 (termp -> MINUSMINUS seenoperator .)
    NOT_EQUALS      reduce using rule 69 (termp -> MINUSMINUS seenoperator .)
    EQUALS          reduce using rule 69 (termp -> MINUSMINUS seenoperator .)
    SEMICOLON       reduce using rule 69 (termp -> MINUSMINUS seenoperator .)
    RPAREN          reduce using rule 69 (termp -> MINUSMINUS seenoperator .)


state 142

    (74) factor -> LPAREN seenoperator expression RPAREN . exitparen
    (75) exitparen -> .

    MULTIPLY        reduce using rule 75 (exitparen -> .)
    DIV             reduce using rule 75 (exitparen -> .)
    DIVIDE          reduce using rule 75 (exitparen -> .)
    MOD             reduce using rule 75 (exitparen -> .)
    AND             reduce using rule 75 (exitparen -> .)
    PLUSPLUS        reduce using rule 75 (exitparen -> .)
    MINUSMINUS      reduce using rule 75 (exitparen -> .)
    PLUS            reduce using rule 75 (exitparen -> .)
    MINUS           reduce using rule 75 (exitparen -> .)
    OR              reduce using rule 75 (exitparen -> .)
    LESS_THAN       reduce using rule 75 (exitparen -> .)
    LESS_THAN_EQUALS reduce using rule 75 (exitparen -> .)
    GREATER_THAN    reduce using rule 75 (exitparen -> .)
    GREATER_THAN_EQUALS reduce using rule 75 (exitparen -> .)
    NOT_EQUALS      reduce using rule 75 (exitparen -> .)
    EQUALS          reduce using rule 75 (exitparen -> .)
    SEMICOLON       reduce using rule 75 (exitparen -> .)
    RPAREN          reduce using rule 75 (exitparen -> .)

    exitparen                      shift and go to state 160

state 143

    (27) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    THEN            shift and go to state 161


state 144

    (34) while -> WHILE LPAREN expression RPAREN checkbool seenwhile . DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    DO              shift and go to state 162


state 145

    (37) for -> FOR LPAREN assign expression checkbool seenboolfor . SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> FOR LPAREN assign expression checkbool seenboolfor . SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    SEMICOLON       shift and go to state 163


state 146

    (46) expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 46 (expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 46 (expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .)


state 147

    (47) expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 47 (expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 47 (expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .)


state 148

    (48) expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 48 (expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 48 (expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .)


state 149

    (49) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 49 (expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 49 (expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .)


state 150

    (50) expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 50 (expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 50 (expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .)


state 151

    (51) expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 51 (expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 51 (expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .)


state 152

    (58) simpleexpressionp -> PLUS seenoperator simpleexpression .

    LESS_THAN       reduce using rule 58 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 58 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 58 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 58 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 58 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    EQUALS          reduce using rule 58 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 58 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    RPAREN          reduce using rule 58 (simpleexpressionp -> PLUS seenoperator simpleexpression .)


state 153

    (59) simpleexpressionp -> MINUS seenoperator simpleexpression .

    LESS_THAN       reduce using rule 59 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 59 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 59 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 59 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 59 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    EQUALS          reduce using rule 59 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 59 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    RPAREN          reduce using rule 59 (simpleexpressionp -> MINUS seenoperator simpleexpression .)


state 154

    (60) simpleexpressionp -> OR seenoperator simpleexpression .

    LESS_THAN       reduce using rule 60 (simpleexpressionp -> OR seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 60 (simpleexpressionp -> OR seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 60 (simpleexpressionp -> OR seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 60 (simpleexpressionp -> OR seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 60 (simpleexpressionp -> OR seenoperator simpleexpression .)
    EQUALS          reduce using rule 60 (simpleexpressionp -> OR seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 60 (simpleexpressionp -> OR seenoperator simpleexpression .)
    RPAREN          reduce using rule 60 (simpleexpressionp -> OR seenoperator simpleexpression .)


state 155

    (63) termp -> MULTIPLY seenoperator term .

    PLUS            reduce using rule 63 (termp -> MULTIPLY seenoperator term .)
    MINUS           reduce using rule 63 (termp -> MULTIPLY seenoperator term .)
    OR              reduce using rule 63 (termp -> MULTIPLY seenoperator term .)
    LESS_THAN       reduce using rule 63 (termp -> MULTIPLY seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 63 (termp -> MULTIPLY seenoperator term .)
    GREATER_THAN    reduce using rule 63 (termp -> MULTIPLY seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 63 (termp -> MULTIPLY seenoperator term .)
    NOT_EQUALS      reduce using rule 63 (termp -> MULTIPLY seenoperator term .)
    EQUALS          reduce using rule 63 (termp -> MULTIPLY seenoperator term .)
    SEMICOLON       reduce using rule 63 (termp -> MULTIPLY seenoperator term .)
    RPAREN          reduce using rule 63 (termp -> MULTIPLY seenoperator term .)


state 156

    (64) termp -> DIV seenoperator term .

    PLUS            reduce using rule 64 (termp -> DIV seenoperator term .)
    MINUS           reduce using rule 64 (termp -> DIV seenoperator term .)
    OR              reduce using rule 64 (termp -> DIV seenoperator term .)
    LESS_THAN       reduce using rule 64 (termp -> DIV seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 64 (termp -> DIV seenoperator term .)
    GREATER_THAN    reduce using rule 64 (termp -> DIV seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 64 (termp -> DIV seenoperator term .)
    NOT_EQUALS      reduce using rule 64 (termp -> DIV seenoperator term .)
    EQUALS          reduce using rule 64 (termp -> DIV seenoperator term .)
    SEMICOLON       reduce using rule 64 (termp -> DIV seenoperator term .)
    RPAREN          reduce using rule 64 (termp -> DIV seenoperator term .)


state 157

    (65) termp -> DIVIDE seenoperator term .

    PLUS            reduce using rule 65 (termp -> DIVIDE seenoperator term .)
    MINUS           reduce using rule 65 (termp -> DIVIDE seenoperator term .)
    OR              reduce using rule 65 (termp -> DIVIDE seenoperator term .)
    LESS_THAN       reduce using rule 65 (termp -> DIVIDE seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 65 (termp -> DIVIDE seenoperator term .)
    GREATER_THAN    reduce using rule 65 (termp -> DIVIDE seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 65 (termp -> DIVIDE seenoperator term .)
    NOT_EQUALS      reduce using rule 65 (termp -> DIVIDE seenoperator term .)
    EQUALS          reduce using rule 65 (termp -> DIVIDE seenoperator term .)
    SEMICOLON       reduce using rule 65 (termp -> DIVIDE seenoperator term .)
    RPAREN          reduce using rule 65 (termp -> DIVIDE seenoperator term .)


state 158

    (66) termp -> MOD seenoperator term .

    PLUS            reduce using rule 66 (termp -> MOD seenoperator term .)
    MINUS           reduce using rule 66 (termp -> MOD seenoperator term .)
    OR              reduce using rule 66 (termp -> MOD seenoperator term .)
    LESS_THAN       reduce using rule 66 (termp -> MOD seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 66 (termp -> MOD seenoperator term .)
    GREATER_THAN    reduce using rule 66 (termp -> MOD seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 66 (termp -> MOD seenoperator term .)
    NOT_EQUALS      reduce using rule 66 (termp -> MOD seenoperator term .)
    EQUALS          reduce using rule 66 (termp -> MOD seenoperator term .)
    SEMICOLON       reduce using rule 66 (termp -> MOD seenoperator term .)
    RPAREN          reduce using rule 66 (termp -> MOD seenoperator term .)


state 159

    (67) termp -> AND seenoperator term .

    PLUS            reduce using rule 67 (termp -> AND seenoperator term .)
    MINUS           reduce using rule 67 (termp -> AND seenoperator term .)
    OR              reduce using rule 67 (termp -> AND seenoperator term .)
    LESS_THAN       reduce using rule 67 (termp -> AND seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 67 (termp -> AND seenoperator term .)
    GREATER_THAN    reduce using rule 67 (termp -> AND seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 67 (termp -> AND seenoperator term .)
    NOT_EQUALS      reduce using rule 67 (termp -> AND seenoperator term .)
    EQUALS          reduce using rule 67 (termp -> AND seenoperator term .)
    SEMICOLON       reduce using rule 67 (termp -> AND seenoperator term .)
    RPAREN          reduce using rule 67 (termp -> AND seenoperator term .)


state 160

    (74) factor -> LPAREN seenoperator expression RPAREN exitparen .

    MULTIPLY        reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    DIV             reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    DIVIDE          reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MOD             reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    AND             reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    PLUSPLUS        reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MINUSMINUS      reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    PLUS            reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MINUS           reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    OR              reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    LESS_THAN       reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    LESS_THAN_EQUALS reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    GREATER_THAN    reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    GREATER_THAN_EQUALS reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    NOT_EQUALS      reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    EQUALS          reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    SEMICOLON       reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    RPAREN          reduce using rule 74 (factor -> LPAREN seenoperator expression RPAREN exitparen .)


state 161

    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LCURLYBRACE     shift and go to state 164


state 162

    (34) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO . LCURLYBRACE statement RCURLYBRACE seencurlywhile

    LCURLYBRACE     shift and go to state 165


state 163

    (37) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON . expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON . assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (45) expression -> . simpleexpression
    (46) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (48) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (52) expression -> . IDENTIFIER PLUSPLUS seenunary
    (53) expression -> . IDENTIFIER MINUSMINUS seenunary
    (43) assignfor -> . IDENTIFIER ASSIGNOP expression assignnow
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 168
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 166
    assignfor                      shift and go to state 167
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 164

    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (85) empty -> .
    (42) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (83) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (84) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (34) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (37) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    IDENTIFIER      shift and go to state 23
    RCURLYBRACE     reduce using rule 85 (empty -> .)
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 169
    condition                      shift and go to state 20
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    while                          shift and go to state 21
    for                            shift and go to state 22

state 165

    (34) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE . statement RCURLYBRACE seencurlywhile
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (85) empty -> .
    (42) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (83) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (84) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (34) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (37) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    IDENTIFIER      shift and go to state 23
    RCURLYBRACE     reduce using rule 85 (empty -> .)
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 170
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 166

    (37) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression . seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) seenchangefor -> .

    RPAREN          reduce using rule 40 (seenchangefor -> .)

    seenchangefor                  shift and go to state 171

state 167

    (38) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor . seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) seenchangefor -> .

    RPAREN          reduce using rule 40 (seenchangefor -> .)

    seenchangefor                  shift and go to state 172

state 168

    (52) expression -> IDENTIFIER . PLUSPLUS seenunary
    (53) expression -> IDENTIFIER . MINUSMINUS seenunary
    (43) assignfor -> IDENTIFIER . ASSIGNOP expression assignnow
    (78) const -> IDENTIFIER .

  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    PLUSPLUS        shift and go to state 74
    MINUSMINUS      shift and go to state 75
    ASSIGNOP        shift and go to state 173
    MULTIPLY        reduce using rule 78 (const -> IDENTIFIER .)
    DIV             reduce using rule 78 (const -> IDENTIFIER .)
    DIVIDE          reduce using rule 78 (const -> IDENTIFIER .)
    MOD             reduce using rule 78 (const -> IDENTIFIER .)
    AND             reduce using rule 78 (const -> IDENTIFIER .)
    PLUS            reduce using rule 78 (const -> IDENTIFIER .)
    MINUS           reduce using rule 78 (const -> IDENTIFIER .)
    OR              reduce using rule 78 (const -> IDENTIFIER .)
    LESS_THAN       reduce using rule 78 (const -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 78 (const -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 78 (const -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 78 (const -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 78 (const -> IDENTIFIER .)
    EQUALS          reduce using rule 78 (const -> IDENTIFIER .)
    RPAREN          reduce using rule 78 (const -> IDENTIFIER .)

  ! PLUSPLUS        [ reduce using rule 78 (const -> IDENTIFIER .) ]
  ! MINUSMINUS      [ reduce using rule 78 (const -> IDENTIFIER .) ]


state 169

    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    RCURLYBRACE     shift and go to state 174


state 170

    (34) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement . RCURLYBRACE seencurlywhile

    RCURLYBRACE     shift and go to state 175


state 171

    (37) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor . RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    RPAREN          shift and go to state 176


state 172

    (38) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor . RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    RPAREN          shift and go to state 177


state 173

    (43) assignfor -> IDENTIFIER ASSIGNOP . expression assignnow
    (45) expression -> . simpleexpression
    (46) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (48) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (52) expression -> . IDENTIFIER PLUSPLUS seenunary
    (53) expression -> . IDENTIFIER MINUSMINUS seenunary
    (55) simpleexpression -> . term seenterm simpleexpressionp
    (61) term -> . factor seenfactor termp
    (73) factor -> . const
    (74) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (76) const -> . PLUS IDENTIFIER
    (77) const -> . MINUS IDENTIFIER
    (78) const -> . IDENTIFIER
    (79) const -> . PLUS NUMBER_CONST
    (80) const -> . MINUS NUMBER_CONST
    (81) const -> . NUMBER_CONST
    (82) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 178
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 174

    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif seencurlyelse
    (28) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif ELSE condition seencurlyelse
    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (32) seencurlyif -> .

    ELSE            reduce using rule 32 (seencurlyif -> .)
    IDENTIFIER      reduce using rule 32 (seencurlyif -> .)
    PRINT           reduce using rule 32 (seencurlyif -> .)
    WRITE           reduce using rule 32 (seencurlyif -> .)
    IF              reduce using rule 32 (seencurlyif -> .)
    WHILE           reduce using rule 32 (seencurlyif -> .)
    FOR             reduce using rule 32 (seencurlyif -> .)
    END             reduce using rule 32 (seencurlyif -> .)
    RCURLYBRACE     reduce using rule 32 (seencurlyif -> .)

    seencurlyif                    shift and go to state 179

state 175

    (34) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE . seencurlywhile
    (36) seencurlywhile -> .

    IDENTIFIER      reduce using rule 36 (seencurlywhile -> .)
    PRINT           reduce using rule 36 (seencurlywhile -> .)
    WRITE           reduce using rule 36 (seencurlywhile -> .)
    IF              reduce using rule 36 (seencurlywhile -> .)
    WHILE           reduce using rule 36 (seencurlywhile -> .)
    FOR             reduce using rule 36 (seencurlywhile -> .)
    END             reduce using rule 36 (seencurlywhile -> .)
    RCURLYBRACE     reduce using rule 36 (seencurlywhile -> .)

    seencurlywhile                 shift and go to state 180

state 176

    (37) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN . LCURLYBRACE statement RCURLYBRACE seencurlyfor

    LCURLYBRACE     shift and go to state 181


state 177

    (38) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN . LCURLYBRACE statement RCURLYBRACE seencurlyfor

    LCURLYBRACE     shift and go to state 182


state 178

    (43) assignfor -> IDENTIFIER ASSIGNOP expression . assignnow
    (44) assignnow -> .

    RPAREN          reduce using rule 44 (assignnow -> .)

    assignnow                      shift and go to state 183

state 179

    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . seencurlyelse
    (28) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . ELSE condition seencurlyelse
    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (33) seencurlyelse -> .

    ELSE            shift and go to state 185
    IDENTIFIER      reduce using rule 33 (seencurlyelse -> .)
    PRINT           reduce using rule 33 (seencurlyelse -> .)
    WRITE           reduce using rule 33 (seencurlyelse -> .)
    IF              reduce using rule 33 (seencurlyelse -> .)
    WHILE           reduce using rule 33 (seencurlyelse -> .)
    FOR             reduce using rule 33 (seencurlyelse -> .)
    END             reduce using rule 33 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 33 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 184

state 180

    (34) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .

    IDENTIFIER      reduce using rule 34 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    PRINT           reduce using rule 34 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    WRITE           reduce using rule 34 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    IF              reduce using rule 34 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    WHILE           reduce using rule 34 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    FOR             reduce using rule 34 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    END             reduce using rule 34 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    RCURLYBRACE     reduce using rule 34 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)


state 181

    (37) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE . statement RCURLYBRACE seencurlyfor
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (85) empty -> .
    (42) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (83) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (84) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (34) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (37) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    IDENTIFIER      shift and go to state 23
    RCURLYBRACE     reduce using rule 85 (empty -> .)
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    assign                         shift and go to state 18
    statement                      shift and go to state 186
    empty                          shift and go to state 17
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 182

    (38) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE . statement RCURLYBRACE seencurlyfor
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (85) empty -> .
    (42) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (83) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (84) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (34) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (37) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    IDENTIFIER      shift and go to state 23
    RCURLYBRACE     reduce using rule 85 (empty -> .)
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    assign                         shift and go to state 18
    statement                      shift and go to state 187
    empty                          shift and go to state 17
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 183

    (43) assignfor -> IDENTIFIER ASSIGNOP expression assignnow .

    RPAREN          reduce using rule 43 (assignfor -> IDENTIFIER ASSIGNOP expression assignnow .)


state 184

    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .

    IDENTIFIER      reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    PRINT           reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    WRITE           reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    IF              reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    WHILE           reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    FOR             reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    END             reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    RCURLYBRACE     reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)


state 185

    (28) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE . condition seencurlyelse
    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE . LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LCURLYBRACE     shift and go to state 188
    IF              shift and go to state 26

    condition                      shift and go to state 189

state 186

    (37) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement . RCURLYBRACE seencurlyfor

    RCURLYBRACE     shift and go to state 190


state 187

    (38) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement . RCURLYBRACE seencurlyfor

    RCURLYBRACE     shift and go to state 191


state 188

    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE . statement RCURLYBRACE seencurlyelse
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (85) empty -> .
    (42) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (83) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (84) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (28) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (34) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (37) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (38) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    IDENTIFIER      shift and go to state 23
    RCURLYBRACE     reduce using rule 85 (empty -> .)
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 192
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 189

    (28) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition . seencurlyelse
    (33) seencurlyelse -> .

    IDENTIFIER      reduce using rule 33 (seencurlyelse -> .)
    PRINT           reduce using rule 33 (seencurlyelse -> .)
    WRITE           reduce using rule 33 (seencurlyelse -> .)
    IF              reduce using rule 33 (seencurlyelse -> .)
    WHILE           reduce using rule 33 (seencurlyelse -> .)
    FOR             reduce using rule 33 (seencurlyelse -> .)
    END             reduce using rule 33 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 33 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 193

state 190

    (37) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE . seencurlyfor
    (41) seencurlyfor -> .

    IDENTIFIER      reduce using rule 41 (seencurlyfor -> .)
    PRINT           reduce using rule 41 (seencurlyfor -> .)
    WRITE           reduce using rule 41 (seencurlyfor -> .)
    IF              reduce using rule 41 (seencurlyfor -> .)
    WHILE           reduce using rule 41 (seencurlyfor -> .)
    FOR             reduce using rule 41 (seencurlyfor -> .)
    END             reduce using rule 41 (seencurlyfor -> .)
    RCURLYBRACE     reduce using rule 41 (seencurlyfor -> .)

    seencurlyfor                   shift and go to state 194

state 191

    (38) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE . seencurlyfor
    (41) seencurlyfor -> .

    IDENTIFIER      reduce using rule 41 (seencurlyfor -> .)
    PRINT           reduce using rule 41 (seencurlyfor -> .)
    WRITE           reduce using rule 41 (seencurlyfor -> .)
    IF              reduce using rule 41 (seencurlyfor -> .)
    WHILE           reduce using rule 41 (seencurlyfor -> .)
    FOR             reduce using rule 41 (seencurlyfor -> .)
    END             reduce using rule 41 (seencurlyfor -> .)
    RCURLYBRACE     reduce using rule 41 (seencurlyfor -> .)

    seencurlyfor                   shift and go to state 195

state 192

    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement . RCURLYBRACE seencurlyelse

    RCURLYBRACE     shift and go to state 196


state 193

    (28) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .

    IDENTIFIER      reduce using rule 28 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    PRINT           reduce using rule 28 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    WRITE           reduce using rule 28 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    IF              reduce using rule 28 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    WHILE           reduce using rule 28 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    FOR             reduce using rule 28 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    END             reduce using rule 28 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    RCURLYBRACE     reduce using rule 28 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)


state 194

    (37) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .

    IDENTIFIER      reduce using rule 37 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    PRINT           reduce using rule 37 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    WRITE           reduce using rule 37 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    IF              reduce using rule 37 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    WHILE           reduce using rule 37 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    FOR             reduce using rule 37 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    END             reduce using rule 37 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    RCURLYBRACE     reduce using rule 37 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)


state 195

    (38) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .

    IDENTIFIER      reduce using rule 38 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    PRINT           reduce using rule 38 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    WRITE           reduce using rule 38 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    IF              reduce using rule 38 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    WHILE           reduce using rule 38 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    FOR             reduce using rule 38 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    END             reduce using rule 38 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    RCURLYBRACE     reduce using rule 38 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)


state 196

    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE . seencurlyelse
    (33) seencurlyelse -> .

    IDENTIFIER      reduce using rule 33 (seencurlyelse -> .)
    PRINT           reduce using rule 33 (seencurlyelse -> .)
    WRITE           reduce using rule 33 (seencurlyelse -> .)
    IF              reduce using rule 33 (seencurlyelse -> .)
    WHILE           reduce using rule 33 (seencurlyelse -> .)
    FOR             reduce using rule 33 (seencurlyelse -> .)
    END             reduce using rule 33 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 33 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 197

state 197

    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .

    IDENTIFIER      reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    PRINT           reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    WRITE           reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    IF              reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    WHILE           reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    FOR             reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    END             reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    RCURLYBRACE     reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUSPLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 168 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 168 resolved as shift
WARNING: reduce/reduce conflict in state 18 resolved using rule (statement -> assign)
WARNING: rejected rule (empty -> <empty>) in state 18
WARNING: reduce/reduce conflict in state 19 resolved using rule (statement -> writefunction)
WARNING: rejected rule (empty -> <empty>) in state 19
WARNING: reduce/reduce conflict in state 20 resolved using rule (statement -> condition)
WARNING: rejected rule (empty -> <empty>) in state 20
WARNING: reduce/reduce conflict in state 21 resolved using rule (statement -> while)
WARNING: rejected rule (empty -> <empty>) in state 21
WARNING: reduce/reduce conflict in state 22 resolved using rule (statement -> for)
WARNING: rejected rule (empty -> <empty>) in state 22
WARNING: reduce/reduce conflict in state 71 resolved using rule (vars -> VAR varsp COLON type seentype SEMICOLON)
WARNING: rejected rule (empty -> <empty>) in state 71
