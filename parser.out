Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHAR
    FALSE
    LBRACKET
    NOT
    PERIOD
    RBRACKET
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE
Rule 2     vars -> VAR varsp COLON type seentype SEMICOLON
Rule 3     vars -> VAR varsp COLON type seentype SEMICOLON vars
Rule 4     vars -> empty
Rule 5     varsp -> IDENTIFIER seenid
Rule 6     varsp -> IDENTIFIER seenid COMMA varsp
Rule 7     seenid -> <empty>
Rule 8     seentype -> <empty>
Rule 9     type -> INT
Rule 10    type -> REAL
Rule 11    type -> STRING
Rule 12    type -> BOOLEAN
Rule 13    block -> BEGIN SEMICOLON statement END SEMICOLON
Rule 14    statement -> empty
Rule 15    statement -> assign
Rule 16    statement -> assign statement
Rule 17    statement -> writefunction
Rule 18    statement -> writefunction statement
Rule 19    statement -> condition
Rule 20    statement -> condition statement
Rule 21    statement -> while
Rule 22    statement -> while statement
Rule 23    statement -> for
Rule 24    statement -> for statement
Rule 25    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
Rule 26    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
Rule 27    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
Rule 28    checkbool -> <empty>
Rule 29    seenif -> <empty>
Rule 30    seencurlyif -> <empty>
Rule 31    seencurlyelse -> <empty>
Rule 32    while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
Rule 33    seenwhile -> <empty>
Rule 34    seencurlywhile -> <empty>
Rule 35    for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
Rule 36    seenboolfor -> <empty>
Rule 37    seenchangefor -> <empty>
Rule 38    seencurlyfor -> <empty>
Rule 39    assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
Rule 40    assignnow -> <empty>
Rule 41    expression -> simpleexpression
Rule 42    expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad
Rule 43    expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
Rule 44    expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad
Rule 45    expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
Rule 46    expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
Rule 47    expression -> simpleexpression EQUALS seenoperator simpleexpression genquad
Rule 48    simpleexpression -> term seenterm simpleexpressionp
Rule 49    seenterm -> <empty>
Rule 50    simpleexpressionp -> empty
Rule 51    simpleexpressionp -> PLUS seenoperator simpleexpression
Rule 52    simpleexpressionp -> MINUS seenoperator simpleexpression
Rule 53    simpleexpressionp -> OR seenoperator simpleexpression
Rule 54    term -> factor seenfactor termp
Rule 55    termp -> empty
Rule 56    termp -> MULTIPLY seenoperator term
Rule 57    termp -> DIV seenoperator term
Rule 58    termp -> DIVIDE seenoperator term
Rule 59    termp -> MOD seenoperator term
Rule 60    termp -> AND seenoperator term
Rule 61    termp -> PLUSPLUS seenoperator
Rule 62    termp -> MINUSMINUS seenoperator
Rule 63    seenoperator -> <empty>
Rule 64    seenfactor -> <empty>
Rule 65    genquad -> <empty>
Rule 66    factor -> const
Rule 67    factor -> LPAREN seenoperator expression RPAREN exitparen
Rule 68    exitparen -> <empty>
Rule 69    const -> PLUS IDENTIFIER
Rule 70    const -> MINUS IDENTIFIER
Rule 71    const -> IDENTIFIER
Rule 72    const -> PLUS NUMBER_CONST
Rule 73    const -> MINUS NUMBER_CONST
Rule 74    const -> NUMBER_CONST
Rule 75    const -> STRING_CONST
Rule 76    writefunction -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 77    writefunction -> WRITE LPAREN expression RPAREN SEMICOLON
Rule 78    empty -> <empty>

Terminals, with rules where they appear

AND                  : 60
ASSIGNOP             : 39
BEGIN                : 13
BOOLEAN              : 12
CHAR                 : 
COLON                : 2 3
COMMA                : 6
DIV                  : 57
DIVIDE               : 58
DO                   : 32
ELSE                 : 26 27
END                  : 13
EQUALS               : 47
FALSE                : 
FOR                  : 35
GREATER_THAN         : 44
GREATER_THAN_EQUALS  : 45
IDENTIFIER           : 1 5 6 39 69 70 71
IF                   : 25 26 27
INT                  : 9
LBRACKET             : 
LCURLYBRACE          : 1 25 26 27 27 32 35
LESS_THAN            : 42
LESS_THAN_EQUALS     : 43
LPAREN               : 25 26 27 32 35 67 76 77
MINUS                : 52 70 73
MINUSMINUS           : 62
MOD                  : 59
MULTIPLY             : 56
NOT                  : 
NOT_EQUALS           : 46
NUMBER_CONST         : 72 73 74
OR                   : 53
PERIOD               : 
PLUS                 : 51 69 72
PLUSPLUS             : 61
PRINT                : 76
PROGRAM              : 1
RBRACKET             : 
RCURLYBRACE          : 1 25 26 27 27 32 35
REAL                 : 10
RPAREN               : 25 26 27 32 35 67 76 77
SEMICOLON            : 2 3 13 13 35 39 76 77
STRING               : 11
STRING_CONST         : 75
THEN                 : 25 26 27
TRUE                 : 
VAR                  : 2 3
WHILE                : 32
WRITE                : 77
error                : 

Nonterminals, with rules where they appear

assign               : 15 16 35
assignnow            : 35 39
block                : 1
checkbool            : 25 26 27 32 35
condition            : 19 20 26
const                : 66
empty                : 4 14 50 55
exitparen            : 67
expression           : 25 26 27 32 35 35 39 67 76 77
factor               : 54
for                  : 23 24
genquad              : 42 43 44 45 46 47
program              : 0
seenboolfor          : 35
seenchangefor        : 35
seencurlyelse        : 25 26 27
seencurlyfor         : 35
seencurlyif          : 25 26 27
seencurlywhile       : 32
seenfactor           : 54
seenid               : 5 6
seenif               : 25 26 27
seenoperator         : 42 43 44 45 46 47 51 52 53 56 57 58 59 60 61 62 67
seenterm             : 48
seentype             : 2 3
seenwhile            : 32
simpleexpression     : 41 42 42 43 43 44 44 45 45 46 46 47 47 51 52 53
simpleexpressionp    : 48
statement            : 13 16 18 20 22 24 25 26 27 27 32 35
term                 : 48 56 57 58 59 60
termp                : 54
type                 : 2 3
vars                 : 1 3
varsp                : 2 3 6
while                : 21 22
writefunction        : 17 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . IDENTIFIER LCURLYBRACE vars block RCURLYBRACE

    IDENTIFIER      shift and go to state 3


state 3

    (1) program -> PROGRAM IDENTIFIER . LCURLYBRACE vars block RCURLYBRACE

    LCURLYBRACE     shift and go to state 4


state 4

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE . vars block RCURLYBRACE
    (2) vars -> . VAR varsp COLON type seentype SEMICOLON
    (3) vars -> . VAR varsp COLON type seentype SEMICOLON vars
    (4) vars -> . empty
    (78) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 78 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars . block RCURLYBRACE
    (13) block -> . BEGIN SEMICOLON statement END SEMICOLON

    BEGIN           shift and go to state 9

    block                          shift and go to state 8

state 6

    (2) vars -> VAR . varsp COLON type seentype SEMICOLON
    (3) vars -> VAR . varsp COLON type seentype SEMICOLON vars
    (5) varsp -> . IDENTIFIER seenid
    (6) varsp -> . IDENTIFIER seenid COMMA varsp

    IDENTIFIER      shift and go to state 11

    varsp                          shift and go to state 10

state 7

    (4) vars -> empty .

    BEGIN           reduce using rule 4 (vars -> empty .)


state 8

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars block . RCURLYBRACE

    RCURLYBRACE     shift and go to state 12


state 9

    (13) block -> BEGIN . SEMICOLON statement END SEMICOLON

    SEMICOLON       shift and go to state 13


state 10

    (2) vars -> VAR varsp . COLON type seentype SEMICOLON
    (3) vars -> VAR varsp . COLON type seentype SEMICOLON vars

    COLON           shift and go to state 14


state 11

    (5) varsp -> IDENTIFIER . seenid
    (6) varsp -> IDENTIFIER . seenid COMMA varsp
    (7) seenid -> .

    COMMA           reduce using rule 7 (seenid -> .)
    COLON           reduce using rule 7 (seenid -> .)

    seenid                         shift and go to state 15

state 12

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE .

    $end            reduce using rule 1 (program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE .)


state 13

    (13) block -> BEGIN SEMICOLON . statement END SEMICOLON
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (78) empty -> .
    (39) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (76) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (77) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (32) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (35) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    END             reduce using rule 78 (empty -> .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 16
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 14

    (2) vars -> VAR varsp COLON . type seentype SEMICOLON
    (3) vars -> VAR varsp COLON . type seentype SEMICOLON vars
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . STRING
    (12) type -> . BOOLEAN

    INT             shift and go to state 30
    REAL            shift and go to state 31
    STRING          shift and go to state 32
    BOOLEAN         shift and go to state 33

    type                           shift and go to state 29

state 15

    (5) varsp -> IDENTIFIER seenid .
    (6) varsp -> IDENTIFIER seenid . COMMA varsp

    COLON           reduce using rule 5 (varsp -> IDENTIFIER seenid .)
    COMMA           shift and go to state 34


state 16

    (13) block -> BEGIN SEMICOLON statement . END SEMICOLON

    END             shift and go to state 35


state 17

    (14) statement -> empty .

    END             reduce using rule 14 (statement -> empty .)
    RCURLYBRACE     reduce using rule 14 (statement -> empty .)


state 18

    (15) statement -> assign .
    (16) statement -> assign . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (78) empty -> .
    (39) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (76) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (77) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (32) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (35) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 15 (statement -> assign .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 15 (statement -> assign .)
    END             reduce using rule 15 (statement -> assign .)
    RCURLYBRACE     reduce using rule 15 (statement -> assign .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 78 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 78 (empty -> .) ]

    assign                         shift and go to state 18
    statement                      shift and go to state 36
    empty                          shift and go to state 17
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 19

    (17) statement -> writefunction .
    (18) statement -> writefunction . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (78) empty -> .
    (39) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (76) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (77) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (32) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (35) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 17 (statement -> writefunction .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 17 (statement -> writefunction .)
    END             reduce using rule 17 (statement -> writefunction .)
    RCURLYBRACE     reduce using rule 17 (statement -> writefunction .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 78 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 78 (empty -> .) ]

    writefunction                  shift and go to state 19
    statement                      shift and go to state 37
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 20

    (19) statement -> condition .
    (20) statement -> condition . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (78) empty -> .
    (39) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (76) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (77) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (32) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (35) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 19 (statement -> condition .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 19 (statement -> condition .)
    END             reduce using rule 19 (statement -> condition .)
    RCURLYBRACE     reduce using rule 19 (statement -> condition .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 78 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 78 (empty -> .) ]

    condition                      shift and go to state 20
    statement                      shift and go to state 38
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    while                          shift and go to state 21
    for                            shift and go to state 22

state 21

    (21) statement -> while .
    (22) statement -> while . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (78) empty -> .
    (39) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (76) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (77) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (32) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (35) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 21 (statement -> while .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 21 (statement -> while .)
    END             reduce using rule 21 (statement -> while .)
    RCURLYBRACE     reduce using rule 21 (statement -> while .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 78 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 78 (empty -> .) ]

    while                          shift and go to state 21
    statement                      shift and go to state 39
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    for                            shift and go to state 22

state 22

    (23) statement -> for .
    (24) statement -> for . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (78) empty -> .
    (39) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (76) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (77) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (32) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (35) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 23 (statement -> for .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 23 (statement -> for .)
    END             reduce using rule 23 (statement -> for .)
    RCURLYBRACE     reduce using rule 23 (statement -> for .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 78 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 78 (empty -> .) ]

    for                            shift and go to state 22
    statement                      shift and go to state 40
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21

state 23

    (39) assign -> IDENTIFIER . ASSIGNOP expression assignnow SEMICOLON

    ASSIGNOP        shift and go to state 41


state 24

    (76) writefunction -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 42


state 25

    (77) writefunction -> WRITE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 43


state 26

    (25) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LPAREN          shift and go to state 44


state 27

    (32) while -> WHILE . LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    LPAREN          shift and go to state 45


state 28

    (35) for -> FOR . LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    LPAREN          shift and go to state 46


state 29

    (2) vars -> VAR varsp COLON type . seentype SEMICOLON
    (3) vars -> VAR varsp COLON type . seentype SEMICOLON vars
    (8) seentype -> .

    SEMICOLON       reduce using rule 8 (seentype -> .)

    seentype                       shift and go to state 47

state 30

    (9) type -> INT .

    SEMICOLON       reduce using rule 9 (type -> INT .)


state 31

    (10) type -> REAL .

    SEMICOLON       reduce using rule 10 (type -> REAL .)


state 32

    (11) type -> STRING .

    SEMICOLON       reduce using rule 11 (type -> STRING .)


state 33

    (12) type -> BOOLEAN .

    SEMICOLON       reduce using rule 12 (type -> BOOLEAN .)


state 34

    (6) varsp -> IDENTIFIER seenid COMMA . varsp
    (5) varsp -> . IDENTIFIER seenid
    (6) varsp -> . IDENTIFIER seenid COMMA varsp

    IDENTIFIER      shift and go to state 11

    varsp                          shift and go to state 48

state 35

    (13) block -> BEGIN SEMICOLON statement END . SEMICOLON

    SEMICOLON       shift and go to state 49


state 36

    (16) statement -> assign statement .

    END             reduce using rule 16 (statement -> assign statement .)
    RCURLYBRACE     reduce using rule 16 (statement -> assign statement .)


state 37

    (18) statement -> writefunction statement .

    END             reduce using rule 18 (statement -> writefunction statement .)
    RCURLYBRACE     reduce using rule 18 (statement -> writefunction statement .)


state 38

    (20) statement -> condition statement .

    END             reduce using rule 20 (statement -> condition statement .)
    RCURLYBRACE     reduce using rule 20 (statement -> condition statement .)


state 39

    (22) statement -> while statement .

    END             reduce using rule 22 (statement -> while statement .)
    RCURLYBRACE     reduce using rule 22 (statement -> while statement .)


state 40

    (24) statement -> for statement .

    END             reduce using rule 24 (statement -> for statement .)
    RCURLYBRACE     reduce using rule 24 (statement -> for statement .)


state 41

    (39) assign -> IDENTIFIER ASSIGNOP . expression assignnow SEMICOLON
    (41) expression -> . simpleexpression
    (42) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (43) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (44) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (45) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (46) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    expression                     shift and go to state 51
    simpleexpression               shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 42

    (76) writefunction -> PRINT LPAREN . expression RPAREN SEMICOLON
    (41) expression -> . simpleexpression
    (42) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (43) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (44) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (45) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (46) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    expression                     shift and go to state 61
    simpleexpression               shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 43

    (77) writefunction -> WRITE LPAREN . expression RPAREN SEMICOLON
    (41) expression -> . simpleexpression
    (42) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (43) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (44) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (45) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (46) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    expression                     shift and go to state 62
    simpleexpression               shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 44

    (25) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (41) expression -> . simpleexpression
    (42) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (43) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (44) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (45) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (46) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    expression                     shift and go to state 63
    simpleexpression               shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 45

    (32) while -> WHILE LPAREN . expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (41) expression -> . simpleexpression
    (42) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (43) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (44) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (45) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (46) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    expression                     shift and go to state 64
    simpleexpression               shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 46

    (35) for -> FOR LPAREN . assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (39) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON

    IDENTIFIER      shift and go to state 23

    assign                         shift and go to state 65

state 47

    (2) vars -> VAR varsp COLON type seentype . SEMICOLON
    (3) vars -> VAR varsp COLON type seentype . SEMICOLON vars

    SEMICOLON       shift and go to state 66


state 48

    (6) varsp -> IDENTIFIER seenid COMMA varsp .

    COLON           reduce using rule 6 (varsp -> IDENTIFIER seenid COMMA varsp .)


state 49

    (13) block -> BEGIN SEMICOLON statement END SEMICOLON .

    RCURLYBRACE     reduce using rule 13 (block -> BEGIN SEMICOLON statement END SEMICOLON .)


state 50

    (71) const -> IDENTIFIER .

    MULTIPLY        reduce using rule 71 (const -> IDENTIFIER .)
    DIV             reduce using rule 71 (const -> IDENTIFIER .)
    DIVIDE          reduce using rule 71 (const -> IDENTIFIER .)
    MOD             reduce using rule 71 (const -> IDENTIFIER .)
    AND             reduce using rule 71 (const -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 71 (const -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 71 (const -> IDENTIFIER .)
    PLUS            reduce using rule 71 (const -> IDENTIFIER .)
    MINUS           reduce using rule 71 (const -> IDENTIFIER .)
    OR              reduce using rule 71 (const -> IDENTIFIER .)
    LESS_THAN       reduce using rule 71 (const -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 71 (const -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 71 (const -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 71 (const -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 71 (const -> IDENTIFIER .)
    EQUALS          reduce using rule 71 (const -> IDENTIFIER .)
    SEMICOLON       reduce using rule 71 (const -> IDENTIFIER .)
    RPAREN          reduce using rule 71 (const -> IDENTIFIER .)


state 51

    (39) assign -> IDENTIFIER ASSIGNOP expression . assignnow SEMICOLON
    (40) assignnow -> .

    SEMICOLON       reduce using rule 40 (assignnow -> .)

    assignnow                      shift and go to state 67

state 52

    (41) expression -> simpleexpression .
    (42) expression -> simpleexpression . LESS_THAN seenoperator simpleexpression genquad
    (43) expression -> simpleexpression . LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (44) expression -> simpleexpression . GREATER_THAN seenoperator simpleexpression genquad
    (45) expression -> simpleexpression . GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (46) expression -> simpleexpression . NOT_EQUALS seenoperator simpleexpression genquad
    (47) expression -> simpleexpression . EQUALS seenoperator simpleexpression genquad

    SEMICOLON       reduce using rule 41 (expression -> simpleexpression .)
    RPAREN          reduce using rule 41 (expression -> simpleexpression .)
    LESS_THAN       shift and go to state 68
    LESS_THAN_EQUALS shift and go to state 69
    GREATER_THAN    shift and go to state 70
    GREATER_THAN_EQUALS shift and go to state 71
    NOT_EQUALS      shift and go to state 72
    EQUALS          shift and go to state 73


state 53

    (48) simpleexpression -> term . seenterm simpleexpressionp
    (49) seenterm -> .

    PLUS            reduce using rule 49 (seenterm -> .)
    MINUS           reduce using rule 49 (seenterm -> .)
    OR              reduce using rule 49 (seenterm -> .)
    LESS_THAN       reduce using rule 49 (seenterm -> .)
    LESS_THAN_EQUALS reduce using rule 49 (seenterm -> .)
    GREATER_THAN    reduce using rule 49 (seenterm -> .)
    GREATER_THAN_EQUALS reduce using rule 49 (seenterm -> .)
    NOT_EQUALS      reduce using rule 49 (seenterm -> .)
    EQUALS          reduce using rule 49 (seenterm -> .)
    SEMICOLON       reduce using rule 49 (seenterm -> .)
    RPAREN          reduce using rule 49 (seenterm -> .)

    seenterm                       shift and go to state 74

state 54

    (54) term -> factor . seenfactor termp
    (64) seenfactor -> .

    MULTIPLY        reduce using rule 64 (seenfactor -> .)
    DIV             reduce using rule 64 (seenfactor -> .)
    DIVIDE          reduce using rule 64 (seenfactor -> .)
    MOD             reduce using rule 64 (seenfactor -> .)
    AND             reduce using rule 64 (seenfactor -> .)
    PLUSPLUS        reduce using rule 64 (seenfactor -> .)
    MINUSMINUS      reduce using rule 64 (seenfactor -> .)
    PLUS            reduce using rule 64 (seenfactor -> .)
    MINUS           reduce using rule 64 (seenfactor -> .)
    OR              reduce using rule 64 (seenfactor -> .)
    LESS_THAN       reduce using rule 64 (seenfactor -> .)
    LESS_THAN_EQUALS reduce using rule 64 (seenfactor -> .)
    GREATER_THAN    reduce using rule 64 (seenfactor -> .)
    GREATER_THAN_EQUALS reduce using rule 64 (seenfactor -> .)
    NOT_EQUALS      reduce using rule 64 (seenfactor -> .)
    EQUALS          reduce using rule 64 (seenfactor -> .)
    SEMICOLON       reduce using rule 64 (seenfactor -> .)
    RPAREN          reduce using rule 64 (seenfactor -> .)

    seenfactor                     shift and go to state 75

state 55

    (66) factor -> const .

    MULTIPLY        reduce using rule 66 (factor -> const .)
    DIV             reduce using rule 66 (factor -> const .)
    DIVIDE          reduce using rule 66 (factor -> const .)
    MOD             reduce using rule 66 (factor -> const .)
    AND             reduce using rule 66 (factor -> const .)
    PLUSPLUS        reduce using rule 66 (factor -> const .)
    MINUSMINUS      reduce using rule 66 (factor -> const .)
    PLUS            reduce using rule 66 (factor -> const .)
    MINUS           reduce using rule 66 (factor -> const .)
    OR              reduce using rule 66 (factor -> const .)
    LESS_THAN       reduce using rule 66 (factor -> const .)
    LESS_THAN_EQUALS reduce using rule 66 (factor -> const .)
    GREATER_THAN    reduce using rule 66 (factor -> const .)
    GREATER_THAN_EQUALS reduce using rule 66 (factor -> const .)
    NOT_EQUALS      reduce using rule 66 (factor -> const .)
    EQUALS          reduce using rule 66 (factor -> const .)
    SEMICOLON       reduce using rule 66 (factor -> const .)
    RPAREN          reduce using rule 66 (factor -> const .)


state 56

    (67) factor -> LPAREN . seenoperator expression RPAREN exitparen
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 76

state 57

    (69) const -> PLUS . IDENTIFIER
    (72) const -> PLUS . NUMBER_CONST

    IDENTIFIER      shift and go to state 77
    NUMBER_CONST    shift and go to state 78


state 58

    (70) const -> MINUS . IDENTIFIER
    (73) const -> MINUS . NUMBER_CONST

    IDENTIFIER      shift and go to state 79
    NUMBER_CONST    shift and go to state 80


state 59

    (74) const -> NUMBER_CONST .

    MULTIPLY        reduce using rule 74 (const -> NUMBER_CONST .)
    DIV             reduce using rule 74 (const -> NUMBER_CONST .)
    DIVIDE          reduce using rule 74 (const -> NUMBER_CONST .)
    MOD             reduce using rule 74 (const -> NUMBER_CONST .)
    AND             reduce using rule 74 (const -> NUMBER_CONST .)
    PLUSPLUS        reduce using rule 74 (const -> NUMBER_CONST .)
    MINUSMINUS      reduce using rule 74 (const -> NUMBER_CONST .)
    PLUS            reduce using rule 74 (const -> NUMBER_CONST .)
    MINUS           reduce using rule 74 (const -> NUMBER_CONST .)
    OR              reduce using rule 74 (const -> NUMBER_CONST .)
    LESS_THAN       reduce using rule 74 (const -> NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 74 (const -> NUMBER_CONST .)
    GREATER_THAN    reduce using rule 74 (const -> NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 74 (const -> NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 74 (const -> NUMBER_CONST .)
    EQUALS          reduce using rule 74 (const -> NUMBER_CONST .)
    SEMICOLON       reduce using rule 74 (const -> NUMBER_CONST .)
    RPAREN          reduce using rule 74 (const -> NUMBER_CONST .)


state 60

    (75) const -> STRING_CONST .

    MULTIPLY        reduce using rule 75 (const -> STRING_CONST .)
    DIV             reduce using rule 75 (const -> STRING_CONST .)
    DIVIDE          reduce using rule 75 (const -> STRING_CONST .)
    MOD             reduce using rule 75 (const -> STRING_CONST .)
    AND             reduce using rule 75 (const -> STRING_CONST .)
    PLUSPLUS        reduce using rule 75 (const -> STRING_CONST .)
    MINUSMINUS      reduce using rule 75 (const -> STRING_CONST .)
    PLUS            reduce using rule 75 (const -> STRING_CONST .)
    MINUS           reduce using rule 75 (const -> STRING_CONST .)
    OR              reduce using rule 75 (const -> STRING_CONST .)
    LESS_THAN       reduce using rule 75 (const -> STRING_CONST .)
    LESS_THAN_EQUALS reduce using rule 75 (const -> STRING_CONST .)
    GREATER_THAN    reduce using rule 75 (const -> STRING_CONST .)
    GREATER_THAN_EQUALS reduce using rule 75 (const -> STRING_CONST .)
    NOT_EQUALS      reduce using rule 75 (const -> STRING_CONST .)
    EQUALS          reduce using rule 75 (const -> STRING_CONST .)
    SEMICOLON       reduce using rule 75 (const -> STRING_CONST .)
    RPAREN          reduce using rule 75 (const -> STRING_CONST .)


state 61

    (76) writefunction -> PRINT LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 81


state 62

    (77) writefunction -> WRITE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 82


state 63

    (25) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    RPAREN          shift and go to state 83


state 64

    (32) while -> WHILE LPAREN expression . RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    RPAREN          shift and go to state 84


state 65

    (35) for -> FOR LPAREN assign . expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (41) expression -> . simpleexpression
    (42) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (43) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (44) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (45) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (46) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    expression                     shift and go to state 85
    simpleexpression               shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 66

    (2) vars -> VAR varsp COLON type seentype SEMICOLON .
    (3) vars -> VAR varsp COLON type seentype SEMICOLON . vars
    (2) vars -> . VAR varsp COLON type seentype SEMICOLON
    (3) vars -> . VAR varsp COLON type seentype SEMICOLON vars
    (4) vars -> . empty
    (78) empty -> .

  ! reduce/reduce conflict for BEGIN resolved using rule 2 (vars -> VAR varsp COLON type seentype SEMICOLON .)
    BEGIN           reduce using rule 2 (vars -> VAR varsp COLON type seentype SEMICOLON .)
    VAR             shift and go to state 6

  ! BEGIN           [ reduce using rule 78 (empty -> .) ]

    vars                           shift and go to state 86
    empty                          shift and go to state 7

state 67

    (39) assign -> IDENTIFIER ASSIGNOP expression assignnow . SEMICOLON

    SEMICOLON       shift and go to state 87


state 68

    (42) expression -> simpleexpression LESS_THAN . seenoperator simpleexpression genquad
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 88

state 69

    (43) expression -> simpleexpression LESS_THAN_EQUALS . seenoperator simpleexpression genquad
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 89

state 70

    (44) expression -> simpleexpression GREATER_THAN . seenoperator simpleexpression genquad
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 90

state 71

    (45) expression -> simpleexpression GREATER_THAN_EQUALS . seenoperator simpleexpression genquad
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 91

state 72

    (46) expression -> simpleexpression NOT_EQUALS . seenoperator simpleexpression genquad
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 92

state 73

    (47) expression -> simpleexpression EQUALS . seenoperator simpleexpression genquad
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 93

state 74

    (48) simpleexpression -> term seenterm . simpleexpressionp
    (50) simpleexpressionp -> . empty
    (51) simpleexpressionp -> . PLUS seenoperator simpleexpression
    (52) simpleexpressionp -> . MINUS seenoperator simpleexpression
    (53) simpleexpressionp -> . OR seenoperator simpleexpression
    (78) empty -> .

    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    OR              shift and go to state 98
    LESS_THAN       reduce using rule 78 (empty -> .)
    LESS_THAN_EQUALS reduce using rule 78 (empty -> .)
    GREATER_THAN    reduce using rule 78 (empty -> .)
    GREATER_THAN_EQUALS reduce using rule 78 (empty -> .)
    NOT_EQUALS      reduce using rule 78 (empty -> .)
    EQUALS          reduce using rule 78 (empty -> .)
    SEMICOLON       reduce using rule 78 (empty -> .)
    RPAREN          reduce using rule 78 (empty -> .)

    simpleexpressionp              shift and go to state 94
    empty                          shift and go to state 95

state 75

    (54) term -> factor seenfactor . termp
    (55) termp -> . empty
    (56) termp -> . MULTIPLY seenoperator term
    (57) termp -> . DIV seenoperator term
    (58) termp -> . DIVIDE seenoperator term
    (59) termp -> . MOD seenoperator term
    (60) termp -> . AND seenoperator term
    (61) termp -> . PLUSPLUS seenoperator
    (62) termp -> . MINUSMINUS seenoperator
    (78) empty -> .

    MULTIPLY        shift and go to state 101
    DIV             shift and go to state 102
    DIVIDE          shift and go to state 103
    MOD             shift and go to state 104
    AND             shift and go to state 105
    PLUSPLUS        shift and go to state 106
    MINUSMINUS      shift and go to state 107
    PLUS            reduce using rule 78 (empty -> .)
    MINUS           reduce using rule 78 (empty -> .)
    OR              reduce using rule 78 (empty -> .)
    LESS_THAN       reduce using rule 78 (empty -> .)
    LESS_THAN_EQUALS reduce using rule 78 (empty -> .)
    GREATER_THAN    reduce using rule 78 (empty -> .)
    GREATER_THAN_EQUALS reduce using rule 78 (empty -> .)
    NOT_EQUALS      reduce using rule 78 (empty -> .)
    EQUALS          reduce using rule 78 (empty -> .)
    SEMICOLON       reduce using rule 78 (empty -> .)
    RPAREN          reduce using rule 78 (empty -> .)

    termp                          shift and go to state 99
    empty                          shift and go to state 100

state 76

    (67) factor -> LPAREN seenoperator . expression RPAREN exitparen
    (41) expression -> . simpleexpression
    (42) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (43) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (44) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (45) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (46) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    expression                     shift and go to state 108
    simpleexpression               shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 77

    (69) const -> PLUS IDENTIFIER .

    MULTIPLY        reduce using rule 69 (const -> PLUS IDENTIFIER .)
    DIV             reduce using rule 69 (const -> PLUS IDENTIFIER .)
    DIVIDE          reduce using rule 69 (const -> PLUS IDENTIFIER .)
    MOD             reduce using rule 69 (const -> PLUS IDENTIFIER .)
    AND             reduce using rule 69 (const -> PLUS IDENTIFIER .)
    PLUSPLUS        reduce using rule 69 (const -> PLUS IDENTIFIER .)
    MINUSMINUS      reduce using rule 69 (const -> PLUS IDENTIFIER .)
    PLUS            reduce using rule 69 (const -> PLUS IDENTIFIER .)
    MINUS           reduce using rule 69 (const -> PLUS IDENTIFIER .)
    OR              reduce using rule 69 (const -> PLUS IDENTIFIER .)
    LESS_THAN       reduce using rule 69 (const -> PLUS IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 69 (const -> PLUS IDENTIFIER .)
    GREATER_THAN    reduce using rule 69 (const -> PLUS IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 69 (const -> PLUS IDENTIFIER .)
    NOT_EQUALS      reduce using rule 69 (const -> PLUS IDENTIFIER .)
    EQUALS          reduce using rule 69 (const -> PLUS IDENTIFIER .)
    SEMICOLON       reduce using rule 69 (const -> PLUS IDENTIFIER .)
    RPAREN          reduce using rule 69 (const -> PLUS IDENTIFIER .)


state 78

    (72) const -> PLUS NUMBER_CONST .

    MULTIPLY        reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    DIV             reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    DIVIDE          reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    MOD             reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    AND             reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    PLUSPLUS        reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    MINUSMINUS      reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    PLUS            reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    MINUS           reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    OR              reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    LESS_THAN       reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    GREATER_THAN    reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    EQUALS          reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    SEMICOLON       reduce using rule 72 (const -> PLUS NUMBER_CONST .)
    RPAREN          reduce using rule 72 (const -> PLUS NUMBER_CONST .)


state 79

    (70) const -> MINUS IDENTIFIER .

    MULTIPLY        reduce using rule 70 (const -> MINUS IDENTIFIER .)
    DIV             reduce using rule 70 (const -> MINUS IDENTIFIER .)
    DIVIDE          reduce using rule 70 (const -> MINUS IDENTIFIER .)
    MOD             reduce using rule 70 (const -> MINUS IDENTIFIER .)
    AND             reduce using rule 70 (const -> MINUS IDENTIFIER .)
    PLUSPLUS        reduce using rule 70 (const -> MINUS IDENTIFIER .)
    MINUSMINUS      reduce using rule 70 (const -> MINUS IDENTIFIER .)
    PLUS            reduce using rule 70 (const -> MINUS IDENTIFIER .)
    MINUS           reduce using rule 70 (const -> MINUS IDENTIFIER .)
    OR              reduce using rule 70 (const -> MINUS IDENTIFIER .)
    LESS_THAN       reduce using rule 70 (const -> MINUS IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 70 (const -> MINUS IDENTIFIER .)
    GREATER_THAN    reduce using rule 70 (const -> MINUS IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 70 (const -> MINUS IDENTIFIER .)
    NOT_EQUALS      reduce using rule 70 (const -> MINUS IDENTIFIER .)
    EQUALS          reduce using rule 70 (const -> MINUS IDENTIFIER .)
    SEMICOLON       reduce using rule 70 (const -> MINUS IDENTIFIER .)
    RPAREN          reduce using rule 70 (const -> MINUS IDENTIFIER .)


state 80

    (73) const -> MINUS NUMBER_CONST .

    MULTIPLY        reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    DIV             reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    DIVIDE          reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    MOD             reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    AND             reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    PLUSPLUS        reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    MINUSMINUS      reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    PLUS            reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    MINUS           reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    OR              reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    LESS_THAN       reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    GREATER_THAN    reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    EQUALS          reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    SEMICOLON       reduce using rule 73 (const -> MINUS NUMBER_CONST .)
    RPAREN          reduce using rule 73 (const -> MINUS NUMBER_CONST .)


state 81

    (76) writefunction -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 109


state 82

    (77) writefunction -> WRITE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 110


state 83

    (25) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (28) checkbool -> .

    THEN            reduce using rule 28 (checkbool -> .)

    checkbool                      shift and go to state 111

state 84

    (32) while -> WHILE LPAREN expression RPAREN . checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (28) checkbool -> .

    DO              reduce using rule 28 (checkbool -> .)

    checkbool                      shift and go to state 112

state 85

    (35) for -> FOR LPAREN assign expression . checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (28) checkbool -> .

    SEMICOLON       reduce using rule 28 (checkbool -> .)

    checkbool                      shift and go to state 113

state 86

    (3) vars -> VAR varsp COLON type seentype SEMICOLON vars .

    BEGIN           reduce using rule 3 (vars -> VAR varsp COLON type seentype SEMICOLON vars .)


state 87

    (39) assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .

    IDENTIFIER      reduce using rule 39 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    PRINT           reduce using rule 39 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    WRITE           reduce using rule 39 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    IF              reduce using rule 39 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    WHILE           reduce using rule 39 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    FOR             reduce using rule 39 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    END             reduce using rule 39 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    RCURLYBRACE     reduce using rule 39 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    LPAREN          reduce using rule 39 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    PLUS            reduce using rule 39 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    MINUS           reduce using rule 39 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    NUMBER_CONST    reduce using rule 39 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    STRING_CONST    reduce using rule 39 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)


state 88

    (42) expression -> simpleexpression LESS_THAN seenoperator . simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    simpleexpression               shift and go to state 114
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 89

    (43) expression -> simpleexpression LESS_THAN_EQUALS seenoperator . simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    simpleexpression               shift and go to state 115
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 90

    (44) expression -> simpleexpression GREATER_THAN seenoperator . simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    simpleexpression               shift and go to state 116
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 91

    (45) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator . simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    simpleexpression               shift and go to state 117
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 92

    (46) expression -> simpleexpression NOT_EQUALS seenoperator . simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    simpleexpression               shift and go to state 118
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 93

    (47) expression -> simpleexpression EQUALS seenoperator . simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    simpleexpression               shift and go to state 119
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 94

    (48) simpleexpression -> term seenterm simpleexpressionp .

    LESS_THAN       reduce using rule 48 (simpleexpression -> term seenterm simpleexpressionp .)
    LESS_THAN_EQUALS reduce using rule 48 (simpleexpression -> term seenterm simpleexpressionp .)
    GREATER_THAN    reduce using rule 48 (simpleexpression -> term seenterm simpleexpressionp .)
    GREATER_THAN_EQUALS reduce using rule 48 (simpleexpression -> term seenterm simpleexpressionp .)
    NOT_EQUALS      reduce using rule 48 (simpleexpression -> term seenterm simpleexpressionp .)
    EQUALS          reduce using rule 48 (simpleexpression -> term seenterm simpleexpressionp .)
    SEMICOLON       reduce using rule 48 (simpleexpression -> term seenterm simpleexpressionp .)
    RPAREN          reduce using rule 48 (simpleexpression -> term seenterm simpleexpressionp .)


state 95

    (50) simpleexpressionp -> empty .

    LESS_THAN       reduce using rule 50 (simpleexpressionp -> empty .)
    LESS_THAN_EQUALS reduce using rule 50 (simpleexpressionp -> empty .)
    GREATER_THAN    reduce using rule 50 (simpleexpressionp -> empty .)
    GREATER_THAN_EQUALS reduce using rule 50 (simpleexpressionp -> empty .)
    NOT_EQUALS      reduce using rule 50 (simpleexpressionp -> empty .)
    EQUALS          reduce using rule 50 (simpleexpressionp -> empty .)
    SEMICOLON       reduce using rule 50 (simpleexpressionp -> empty .)
    RPAREN          reduce using rule 50 (simpleexpressionp -> empty .)


state 96

    (51) simpleexpressionp -> PLUS . seenoperator simpleexpression
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 120

state 97

    (52) simpleexpressionp -> MINUS . seenoperator simpleexpression
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 121

state 98

    (53) simpleexpressionp -> OR . seenoperator simpleexpression
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 122

state 99

    (54) term -> factor seenfactor termp .

    PLUS            reduce using rule 54 (term -> factor seenfactor termp .)
    MINUS           reduce using rule 54 (term -> factor seenfactor termp .)
    OR              reduce using rule 54 (term -> factor seenfactor termp .)
    LESS_THAN       reduce using rule 54 (term -> factor seenfactor termp .)
    LESS_THAN_EQUALS reduce using rule 54 (term -> factor seenfactor termp .)
    GREATER_THAN    reduce using rule 54 (term -> factor seenfactor termp .)
    GREATER_THAN_EQUALS reduce using rule 54 (term -> factor seenfactor termp .)
    NOT_EQUALS      reduce using rule 54 (term -> factor seenfactor termp .)
    EQUALS          reduce using rule 54 (term -> factor seenfactor termp .)
    SEMICOLON       reduce using rule 54 (term -> factor seenfactor termp .)
    RPAREN          reduce using rule 54 (term -> factor seenfactor termp .)


state 100

    (55) termp -> empty .

    PLUS            reduce using rule 55 (termp -> empty .)
    MINUS           reduce using rule 55 (termp -> empty .)
    OR              reduce using rule 55 (termp -> empty .)
    LESS_THAN       reduce using rule 55 (termp -> empty .)
    LESS_THAN_EQUALS reduce using rule 55 (termp -> empty .)
    GREATER_THAN    reduce using rule 55 (termp -> empty .)
    GREATER_THAN_EQUALS reduce using rule 55 (termp -> empty .)
    NOT_EQUALS      reduce using rule 55 (termp -> empty .)
    EQUALS          reduce using rule 55 (termp -> empty .)
    SEMICOLON       reduce using rule 55 (termp -> empty .)
    RPAREN          reduce using rule 55 (termp -> empty .)


state 101

    (56) termp -> MULTIPLY . seenoperator term
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 123

state 102

    (57) termp -> DIV . seenoperator term
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 124

state 103

    (58) termp -> DIVIDE . seenoperator term
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 125

state 104

    (59) termp -> MOD . seenoperator term
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 126

state 105

    (60) termp -> AND . seenoperator term
    (63) seenoperator -> .

    LPAREN          reduce using rule 63 (seenoperator -> .)
    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    IDENTIFIER      reduce using rule 63 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 63 (seenoperator -> .)
    STRING_CONST    reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 127

state 106

    (61) termp -> PLUSPLUS . seenoperator
    (63) seenoperator -> .

    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    OR              reduce using rule 63 (seenoperator -> .)
    LESS_THAN       reduce using rule 63 (seenoperator -> .)
    LESS_THAN_EQUALS reduce using rule 63 (seenoperator -> .)
    GREATER_THAN    reduce using rule 63 (seenoperator -> .)
    GREATER_THAN_EQUALS reduce using rule 63 (seenoperator -> .)
    NOT_EQUALS      reduce using rule 63 (seenoperator -> .)
    EQUALS          reduce using rule 63 (seenoperator -> .)
    SEMICOLON       reduce using rule 63 (seenoperator -> .)
    RPAREN          reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 128

state 107

    (62) termp -> MINUSMINUS . seenoperator
    (63) seenoperator -> .

    PLUS            reduce using rule 63 (seenoperator -> .)
    MINUS           reduce using rule 63 (seenoperator -> .)
    OR              reduce using rule 63 (seenoperator -> .)
    LESS_THAN       reduce using rule 63 (seenoperator -> .)
    LESS_THAN_EQUALS reduce using rule 63 (seenoperator -> .)
    GREATER_THAN    reduce using rule 63 (seenoperator -> .)
    GREATER_THAN_EQUALS reduce using rule 63 (seenoperator -> .)
    NOT_EQUALS      reduce using rule 63 (seenoperator -> .)
    EQUALS          reduce using rule 63 (seenoperator -> .)
    SEMICOLON       reduce using rule 63 (seenoperator -> .)
    RPAREN          reduce using rule 63 (seenoperator -> .)

    seenoperator                   shift and go to state 129

state 108

    (67) factor -> LPAREN seenoperator expression . RPAREN exitparen

    RPAREN          shift and go to state 130


state 109

    (76) writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 76 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 76 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 76 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 76 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 76 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 76 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 76 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RCURLYBRACE     reduce using rule 76 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 110

    (77) writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 77 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 77 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 77 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 77 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 77 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 77 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 77 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    RCURLYBRACE     reduce using rule 77 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)


state 111

    (25) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (29) seenif -> .

    THEN            reduce using rule 29 (seenif -> .)

    seenif                         shift and go to state 131

state 112

    (32) while -> WHILE LPAREN expression RPAREN checkbool . seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (33) seenwhile -> .

    DO              reduce using rule 33 (seenwhile -> .)

    seenwhile                      shift and go to state 132

state 113

    (35) for -> FOR LPAREN assign expression checkbool . seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (36) seenboolfor -> .

    SEMICOLON       reduce using rule 36 (seenboolfor -> .)

    seenboolfor                    shift and go to state 133

state 114

    (42) expression -> simpleexpression LESS_THAN seenoperator simpleexpression . genquad
    (65) genquad -> .

    SEMICOLON       reduce using rule 65 (genquad -> .)
    RPAREN          reduce using rule 65 (genquad -> .)

    genquad                        shift and go to state 134

state 115

    (43) expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression . genquad
    (65) genquad -> .

    SEMICOLON       reduce using rule 65 (genquad -> .)
    RPAREN          reduce using rule 65 (genquad -> .)

    genquad                        shift and go to state 135

state 116

    (44) expression -> simpleexpression GREATER_THAN seenoperator simpleexpression . genquad
    (65) genquad -> .

    SEMICOLON       reduce using rule 65 (genquad -> .)
    RPAREN          reduce using rule 65 (genquad -> .)

    genquad                        shift and go to state 136

state 117

    (45) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression . genquad
    (65) genquad -> .

    SEMICOLON       reduce using rule 65 (genquad -> .)
    RPAREN          reduce using rule 65 (genquad -> .)

    genquad                        shift and go to state 137

state 118

    (46) expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression . genquad
    (65) genquad -> .

    SEMICOLON       reduce using rule 65 (genquad -> .)
    RPAREN          reduce using rule 65 (genquad -> .)

    genquad                        shift and go to state 138

state 119

    (47) expression -> simpleexpression EQUALS seenoperator simpleexpression . genquad
    (65) genquad -> .

    SEMICOLON       reduce using rule 65 (genquad -> .)
    RPAREN          reduce using rule 65 (genquad -> .)

    genquad                        shift and go to state 139

state 120

    (51) simpleexpressionp -> PLUS seenoperator . simpleexpression
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    simpleexpression               shift and go to state 140
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 121

    (52) simpleexpressionp -> MINUS seenoperator . simpleexpression
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    simpleexpression               shift and go to state 141
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 122

    (53) simpleexpressionp -> OR seenoperator . simpleexpression
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    simpleexpression               shift and go to state 142
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 123

    (56) termp -> MULTIPLY seenoperator . term
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    term                           shift and go to state 143
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 124

    (57) termp -> DIV seenoperator . term
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    term                           shift and go to state 144
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 125

    (58) termp -> DIVIDE seenoperator . term
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    term                           shift and go to state 145
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 126

    (59) termp -> MOD seenoperator . term
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    term                           shift and go to state 146
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 127

    (60) termp -> AND seenoperator . term
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    term                           shift and go to state 147
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 128

    (61) termp -> PLUSPLUS seenoperator .

    PLUS            reduce using rule 61 (termp -> PLUSPLUS seenoperator .)
    MINUS           reduce using rule 61 (termp -> PLUSPLUS seenoperator .)
    OR              reduce using rule 61 (termp -> PLUSPLUS seenoperator .)
    LESS_THAN       reduce using rule 61 (termp -> PLUSPLUS seenoperator .)
    LESS_THAN_EQUALS reduce using rule 61 (termp -> PLUSPLUS seenoperator .)
    GREATER_THAN    reduce using rule 61 (termp -> PLUSPLUS seenoperator .)
    GREATER_THAN_EQUALS reduce using rule 61 (termp -> PLUSPLUS seenoperator .)
    NOT_EQUALS      reduce using rule 61 (termp -> PLUSPLUS seenoperator .)
    EQUALS          reduce using rule 61 (termp -> PLUSPLUS seenoperator .)
    SEMICOLON       reduce using rule 61 (termp -> PLUSPLUS seenoperator .)
    RPAREN          reduce using rule 61 (termp -> PLUSPLUS seenoperator .)


state 129

    (62) termp -> MINUSMINUS seenoperator .

    PLUS            reduce using rule 62 (termp -> MINUSMINUS seenoperator .)
    MINUS           reduce using rule 62 (termp -> MINUSMINUS seenoperator .)
    OR              reduce using rule 62 (termp -> MINUSMINUS seenoperator .)
    LESS_THAN       reduce using rule 62 (termp -> MINUSMINUS seenoperator .)
    LESS_THAN_EQUALS reduce using rule 62 (termp -> MINUSMINUS seenoperator .)
    GREATER_THAN    reduce using rule 62 (termp -> MINUSMINUS seenoperator .)
    GREATER_THAN_EQUALS reduce using rule 62 (termp -> MINUSMINUS seenoperator .)
    NOT_EQUALS      reduce using rule 62 (termp -> MINUSMINUS seenoperator .)
    EQUALS          reduce using rule 62 (termp -> MINUSMINUS seenoperator .)
    SEMICOLON       reduce using rule 62 (termp -> MINUSMINUS seenoperator .)
    RPAREN          reduce using rule 62 (termp -> MINUSMINUS seenoperator .)


state 130

    (67) factor -> LPAREN seenoperator expression RPAREN . exitparen
    (68) exitparen -> .

    MULTIPLY        reduce using rule 68 (exitparen -> .)
    DIV             reduce using rule 68 (exitparen -> .)
    DIVIDE          reduce using rule 68 (exitparen -> .)
    MOD             reduce using rule 68 (exitparen -> .)
    AND             reduce using rule 68 (exitparen -> .)
    PLUSPLUS        reduce using rule 68 (exitparen -> .)
    MINUSMINUS      reduce using rule 68 (exitparen -> .)
    PLUS            reduce using rule 68 (exitparen -> .)
    MINUS           reduce using rule 68 (exitparen -> .)
    OR              reduce using rule 68 (exitparen -> .)
    LESS_THAN       reduce using rule 68 (exitparen -> .)
    LESS_THAN_EQUALS reduce using rule 68 (exitparen -> .)
    GREATER_THAN    reduce using rule 68 (exitparen -> .)
    GREATER_THAN_EQUALS reduce using rule 68 (exitparen -> .)
    NOT_EQUALS      reduce using rule 68 (exitparen -> .)
    EQUALS          reduce using rule 68 (exitparen -> .)
    SEMICOLON       reduce using rule 68 (exitparen -> .)
    RPAREN          reduce using rule 68 (exitparen -> .)

    exitparen                      shift and go to state 148

state 131

    (25) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    THEN            shift and go to state 149


state 132

    (32) while -> WHILE LPAREN expression RPAREN checkbool seenwhile . DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    DO              shift and go to state 150


state 133

    (35) for -> FOR LPAREN assign expression checkbool seenboolfor . SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    SEMICOLON       shift and go to state 151


state 134

    (42) expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 42 (expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 42 (expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .)


state 135

    (43) expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 43 (expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 43 (expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .)


state 136

    (44) expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 44 (expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 44 (expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .)


state 137

    (45) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 45 (expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 45 (expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .)


state 138

    (46) expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 46 (expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 46 (expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .)


state 139

    (47) expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 47 (expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 47 (expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .)


state 140

    (51) simpleexpressionp -> PLUS seenoperator simpleexpression .

    LESS_THAN       reduce using rule 51 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 51 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 51 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 51 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 51 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    EQUALS          reduce using rule 51 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 51 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    RPAREN          reduce using rule 51 (simpleexpressionp -> PLUS seenoperator simpleexpression .)


state 141

    (52) simpleexpressionp -> MINUS seenoperator simpleexpression .

    LESS_THAN       reduce using rule 52 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 52 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 52 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 52 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 52 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    EQUALS          reduce using rule 52 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 52 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    RPAREN          reduce using rule 52 (simpleexpressionp -> MINUS seenoperator simpleexpression .)


state 142

    (53) simpleexpressionp -> OR seenoperator simpleexpression .

    LESS_THAN       reduce using rule 53 (simpleexpressionp -> OR seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 53 (simpleexpressionp -> OR seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 53 (simpleexpressionp -> OR seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 53 (simpleexpressionp -> OR seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 53 (simpleexpressionp -> OR seenoperator simpleexpression .)
    EQUALS          reduce using rule 53 (simpleexpressionp -> OR seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 53 (simpleexpressionp -> OR seenoperator simpleexpression .)
    RPAREN          reduce using rule 53 (simpleexpressionp -> OR seenoperator simpleexpression .)


state 143

    (56) termp -> MULTIPLY seenoperator term .

    PLUS            reduce using rule 56 (termp -> MULTIPLY seenoperator term .)
    MINUS           reduce using rule 56 (termp -> MULTIPLY seenoperator term .)
    OR              reduce using rule 56 (termp -> MULTIPLY seenoperator term .)
    LESS_THAN       reduce using rule 56 (termp -> MULTIPLY seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 56 (termp -> MULTIPLY seenoperator term .)
    GREATER_THAN    reduce using rule 56 (termp -> MULTIPLY seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 56 (termp -> MULTIPLY seenoperator term .)
    NOT_EQUALS      reduce using rule 56 (termp -> MULTIPLY seenoperator term .)
    EQUALS          reduce using rule 56 (termp -> MULTIPLY seenoperator term .)
    SEMICOLON       reduce using rule 56 (termp -> MULTIPLY seenoperator term .)
    RPAREN          reduce using rule 56 (termp -> MULTIPLY seenoperator term .)


state 144

    (57) termp -> DIV seenoperator term .

    PLUS            reduce using rule 57 (termp -> DIV seenoperator term .)
    MINUS           reduce using rule 57 (termp -> DIV seenoperator term .)
    OR              reduce using rule 57 (termp -> DIV seenoperator term .)
    LESS_THAN       reduce using rule 57 (termp -> DIV seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 57 (termp -> DIV seenoperator term .)
    GREATER_THAN    reduce using rule 57 (termp -> DIV seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 57 (termp -> DIV seenoperator term .)
    NOT_EQUALS      reduce using rule 57 (termp -> DIV seenoperator term .)
    EQUALS          reduce using rule 57 (termp -> DIV seenoperator term .)
    SEMICOLON       reduce using rule 57 (termp -> DIV seenoperator term .)
    RPAREN          reduce using rule 57 (termp -> DIV seenoperator term .)


state 145

    (58) termp -> DIVIDE seenoperator term .

    PLUS            reduce using rule 58 (termp -> DIVIDE seenoperator term .)
    MINUS           reduce using rule 58 (termp -> DIVIDE seenoperator term .)
    OR              reduce using rule 58 (termp -> DIVIDE seenoperator term .)
    LESS_THAN       reduce using rule 58 (termp -> DIVIDE seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 58 (termp -> DIVIDE seenoperator term .)
    GREATER_THAN    reduce using rule 58 (termp -> DIVIDE seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 58 (termp -> DIVIDE seenoperator term .)
    NOT_EQUALS      reduce using rule 58 (termp -> DIVIDE seenoperator term .)
    EQUALS          reduce using rule 58 (termp -> DIVIDE seenoperator term .)
    SEMICOLON       reduce using rule 58 (termp -> DIVIDE seenoperator term .)
    RPAREN          reduce using rule 58 (termp -> DIVIDE seenoperator term .)


state 146

    (59) termp -> MOD seenoperator term .

    PLUS            reduce using rule 59 (termp -> MOD seenoperator term .)
    MINUS           reduce using rule 59 (termp -> MOD seenoperator term .)
    OR              reduce using rule 59 (termp -> MOD seenoperator term .)
    LESS_THAN       reduce using rule 59 (termp -> MOD seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 59 (termp -> MOD seenoperator term .)
    GREATER_THAN    reduce using rule 59 (termp -> MOD seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 59 (termp -> MOD seenoperator term .)
    NOT_EQUALS      reduce using rule 59 (termp -> MOD seenoperator term .)
    EQUALS          reduce using rule 59 (termp -> MOD seenoperator term .)
    SEMICOLON       reduce using rule 59 (termp -> MOD seenoperator term .)
    RPAREN          reduce using rule 59 (termp -> MOD seenoperator term .)


state 147

    (60) termp -> AND seenoperator term .

    PLUS            reduce using rule 60 (termp -> AND seenoperator term .)
    MINUS           reduce using rule 60 (termp -> AND seenoperator term .)
    OR              reduce using rule 60 (termp -> AND seenoperator term .)
    LESS_THAN       reduce using rule 60 (termp -> AND seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 60 (termp -> AND seenoperator term .)
    GREATER_THAN    reduce using rule 60 (termp -> AND seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 60 (termp -> AND seenoperator term .)
    NOT_EQUALS      reduce using rule 60 (termp -> AND seenoperator term .)
    EQUALS          reduce using rule 60 (termp -> AND seenoperator term .)
    SEMICOLON       reduce using rule 60 (termp -> AND seenoperator term .)
    RPAREN          reduce using rule 60 (termp -> AND seenoperator term .)


state 148

    (67) factor -> LPAREN seenoperator expression RPAREN exitparen .

    MULTIPLY        reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    DIV             reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    DIVIDE          reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MOD             reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    AND             reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    PLUSPLUS        reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MINUSMINUS      reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    PLUS            reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MINUS           reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    OR              reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    LESS_THAN       reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    LESS_THAN_EQUALS reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    GREATER_THAN    reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    GREATER_THAN_EQUALS reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    NOT_EQUALS      reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    EQUALS          reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    SEMICOLON       reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    RPAREN          reduce using rule 67 (factor -> LPAREN seenoperator expression RPAREN exitparen .)


state 149

    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LCURLYBRACE     shift and go to state 152


state 150

    (32) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO . LCURLYBRACE statement RCURLYBRACE seencurlywhile

    LCURLYBRACE     shift and go to state 153


state 151

    (35) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON . expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (41) expression -> . simpleexpression
    (42) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (43) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (44) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (45) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (46) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (47) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (48) simpleexpression -> . term seenterm simpleexpressionp
    (54) term -> . factor seenfactor termp
    (66) factor -> . const
    (67) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (69) const -> . PLUS IDENTIFIER
    (70) const -> . MINUS IDENTIFIER
    (71) const -> . IDENTIFIER
    (72) const -> . PLUS NUMBER_CONST
    (73) const -> . MINUS NUMBER_CONST
    (74) const -> . NUMBER_CONST
    (75) const -> . STRING_CONST

    LPAREN          shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    IDENTIFIER      shift and go to state 50
    NUMBER_CONST    shift and go to state 59
    STRING_CONST    shift and go to state 60

    expression                     shift and go to state 154
    simpleexpression               shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    const                          shift and go to state 55

state 152

    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (78) empty -> .
    (39) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (76) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (77) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (32) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (35) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    RCURLYBRACE     reduce using rule 78 (empty -> .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 155
    condition                      shift and go to state 20
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    while                          shift and go to state 21
    for                            shift and go to state 22

state 153

    (32) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE . statement RCURLYBRACE seencurlywhile
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (78) empty -> .
    (39) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (76) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (77) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (32) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (35) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    RCURLYBRACE     reduce using rule 78 (empty -> .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 156
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 154

    (35) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression . assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) assignnow -> .

    RPAREN          reduce using rule 40 (assignnow -> .)

    assignnow                      shift and go to state 157

state 155

    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    RCURLYBRACE     shift and go to state 158


state 156

    (32) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement . RCURLYBRACE seencurlywhile

    RCURLYBRACE     shift and go to state 159


state 157

    (35) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow . seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (37) seenchangefor -> .

    RPAREN          reduce using rule 37 (seenchangefor -> .)

    seenchangefor                  shift and go to state 160

state 158

    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif seencurlyelse
    (26) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif ELSE condition seencurlyelse
    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (30) seencurlyif -> .

    ELSE            reduce using rule 30 (seencurlyif -> .)
    IDENTIFIER      reduce using rule 30 (seencurlyif -> .)
    PRINT           reduce using rule 30 (seencurlyif -> .)
    WRITE           reduce using rule 30 (seencurlyif -> .)
    IF              reduce using rule 30 (seencurlyif -> .)
    WHILE           reduce using rule 30 (seencurlyif -> .)
    FOR             reduce using rule 30 (seencurlyif -> .)
    END             reduce using rule 30 (seencurlyif -> .)
    RCURLYBRACE     reduce using rule 30 (seencurlyif -> .)

    seencurlyif                    shift and go to state 161

state 159

    (32) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE . seencurlywhile
    (34) seencurlywhile -> .

    IDENTIFIER      reduce using rule 34 (seencurlywhile -> .)
    PRINT           reduce using rule 34 (seencurlywhile -> .)
    WRITE           reduce using rule 34 (seencurlywhile -> .)
    IF              reduce using rule 34 (seencurlywhile -> .)
    WHILE           reduce using rule 34 (seencurlywhile -> .)
    FOR             reduce using rule 34 (seencurlywhile -> .)
    END             reduce using rule 34 (seencurlywhile -> .)
    RCURLYBRACE     reduce using rule 34 (seencurlywhile -> .)

    seencurlywhile                 shift and go to state 162

state 160

    (35) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor . RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    RPAREN          shift and go to state 163


state 161

    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . seencurlyelse
    (26) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . ELSE condition seencurlyelse
    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (31) seencurlyelse -> .

    ELSE            shift and go to state 165
    IDENTIFIER      reduce using rule 31 (seencurlyelse -> .)
    PRINT           reduce using rule 31 (seencurlyelse -> .)
    WRITE           reduce using rule 31 (seencurlyelse -> .)
    IF              reduce using rule 31 (seencurlyelse -> .)
    WHILE           reduce using rule 31 (seencurlyelse -> .)
    FOR             reduce using rule 31 (seencurlyelse -> .)
    END             reduce using rule 31 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 31 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 164

state 162

    (32) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .

    IDENTIFIER      reduce using rule 32 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    PRINT           reduce using rule 32 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    WRITE           reduce using rule 32 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    IF              reduce using rule 32 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    WHILE           reduce using rule 32 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    FOR             reduce using rule 32 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    END             reduce using rule 32 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    RCURLYBRACE     reduce using rule 32 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)


state 163

    (35) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN . LCURLYBRACE statement RCURLYBRACE seencurlyfor

    LCURLYBRACE     shift and go to state 166


state 164

    (25) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .

    IDENTIFIER      reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    PRINT           reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    WRITE           reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    IF              reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    WHILE           reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    FOR             reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    END             reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    RCURLYBRACE     reduce using rule 25 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)


state 165

    (26) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE . condition seencurlyelse
    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE . LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LCURLYBRACE     shift and go to state 167
    IF              shift and go to state 26

    condition                      shift and go to state 168

state 166

    (35) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE . statement RCURLYBRACE seencurlyfor
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (78) empty -> .
    (39) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (76) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (77) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (32) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (35) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    RCURLYBRACE     reduce using rule 78 (empty -> .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    assign                         shift and go to state 18
    statement                      shift and go to state 169
    empty                          shift and go to state 17
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 167

    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE . statement RCURLYBRACE seencurlyelse
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (78) empty -> .
    (39) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (76) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (77) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (25) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (26) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (27) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (32) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (35) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    RCURLYBRACE     reduce using rule 78 (empty -> .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 170
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 168

    (26) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition . seencurlyelse
    (31) seencurlyelse -> .

    IDENTIFIER      reduce using rule 31 (seencurlyelse -> .)
    PRINT           reduce using rule 31 (seencurlyelse -> .)
    WRITE           reduce using rule 31 (seencurlyelse -> .)
    IF              reduce using rule 31 (seencurlyelse -> .)
    WHILE           reduce using rule 31 (seencurlyelse -> .)
    FOR             reduce using rule 31 (seencurlyelse -> .)
    END             reduce using rule 31 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 31 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 171

state 169

    (35) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement . RCURLYBRACE seencurlyfor

    RCURLYBRACE     shift and go to state 172


state 170

    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement . RCURLYBRACE seencurlyelse

    RCURLYBRACE     shift and go to state 173


state 171

    (26) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .

    IDENTIFIER      reduce using rule 26 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    PRINT           reduce using rule 26 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    WRITE           reduce using rule 26 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    IF              reduce using rule 26 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    WHILE           reduce using rule 26 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    FOR             reduce using rule 26 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    END             reduce using rule 26 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    RCURLYBRACE     reduce using rule 26 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)


state 172

    (35) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE . seencurlyfor
    (38) seencurlyfor -> .

    IDENTIFIER      reduce using rule 38 (seencurlyfor -> .)
    PRINT           reduce using rule 38 (seencurlyfor -> .)
    WRITE           reduce using rule 38 (seencurlyfor -> .)
    IF              reduce using rule 38 (seencurlyfor -> .)
    WHILE           reduce using rule 38 (seencurlyfor -> .)
    FOR             reduce using rule 38 (seencurlyfor -> .)
    END             reduce using rule 38 (seencurlyfor -> .)
    RCURLYBRACE     reduce using rule 38 (seencurlyfor -> .)

    seencurlyfor                   shift and go to state 174

state 173

    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE . seencurlyelse
    (31) seencurlyelse -> .

    IDENTIFIER      reduce using rule 31 (seencurlyelse -> .)
    PRINT           reduce using rule 31 (seencurlyelse -> .)
    WRITE           reduce using rule 31 (seencurlyelse -> .)
    IF              reduce using rule 31 (seencurlyelse -> .)
    WHILE           reduce using rule 31 (seencurlyelse -> .)
    FOR             reduce using rule 31 (seencurlyelse -> .)
    END             reduce using rule 31 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 31 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 175

state 174

    (35) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .

    IDENTIFIER      reduce using rule 35 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    PRINT           reduce using rule 35 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    WRITE           reduce using rule 35 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    IF              reduce using rule 35 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    WHILE           reduce using rule 35 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    FOR             reduce using rule 35 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    END             reduce using rule 35 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    RCURLYBRACE     reduce using rule 35 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)


state 175

    (27) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .

    IDENTIFIER      reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    PRINT           reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    WRITE           reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    IF              reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    WHILE           reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    FOR             reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    END             reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    RCURLYBRACE     reduce using rule 27 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 18 resolved using rule (statement -> assign)
WARNING: rejected rule (empty -> <empty>) in state 18
WARNING: reduce/reduce conflict in state 19 resolved using rule (statement -> writefunction)
WARNING: rejected rule (empty -> <empty>) in state 19
WARNING: reduce/reduce conflict in state 20 resolved using rule (statement -> condition)
WARNING: rejected rule (empty -> <empty>) in state 20
WARNING: reduce/reduce conflict in state 21 resolved using rule (statement -> while)
WARNING: rejected rule (empty -> <empty>) in state 21
WARNING: reduce/reduce conflict in state 22 resolved using rule (statement -> for)
WARNING: rejected rule (empty -> <empty>) in state 22
WARNING: reduce/reduce conflict in state 66 resolved using rule (vars -> VAR varsp COLON type seentype SEMICOLON)
WARNING: rejected rule (empty -> <empty>) in state 66
