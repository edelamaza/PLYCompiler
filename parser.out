Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHAR
    DO
    FALSE
    FOR
    LBRACKET
    NOT
    PERIOD
    RBRACKET
    TRUE
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE
Rule 2     vars -> VAR varsp COLON type seentype SEMICOLON
Rule 3     vars -> VAR varsp COLON type seentype SEMICOLON vars
Rule 4     vars -> empty
Rule 5     varsp -> IDENTIFIER seenid
Rule 6     varsp -> IDENTIFIER seenid COMMA varsp
Rule 7     seenid -> <empty>
Rule 8     seentype -> <empty>
Rule 9     type -> INT
Rule 10    type -> REAL
Rule 11    type -> STRING
Rule 12    type -> BOOLEAN
Rule 13    block -> BEGIN SEMICOLON statement END SEMICOLON
Rule 14    statement -> empty
Rule 15    statement -> assign
Rule 16    statement -> assign statement
Rule 17    statement -> writefunction
Rule 18    statement -> writefunction statement
Rule 19    statement -> condition
Rule 20    statement -> condition statement
Rule 21    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
Rule 22    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
Rule 23    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
Rule 24    checkbool -> <empty>
Rule 25    seenif -> <empty>
Rule 26    seencurlyif -> <empty>
Rule 27    seencurlyelse -> <empty>
Rule 28    assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
Rule 29    assignnow -> <empty>
Rule 30    expression -> simpleexpression
Rule 31    expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad
Rule 32    expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
Rule 33    expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad
Rule 34    expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
Rule 35    expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
Rule 36    expression -> simpleexpression EQUALS seenoperator simpleexpression genquad
Rule 37    simpleexpression -> term seenterm simpleexpressionp
Rule 38    seenterm -> <empty>
Rule 39    simpleexpressionp -> empty
Rule 40    simpleexpressionp -> PLUS seenoperator simpleexpression
Rule 41    simpleexpressionp -> MINUS seenoperator simpleexpression
Rule 42    simpleexpressionp -> OR seenoperator simpleexpression
Rule 43    term -> factor seenfactor termp
Rule 44    termp -> empty
Rule 45    termp -> MULTIPLY seenoperator term
Rule 46    termp -> DIV seenoperator term
Rule 47    termp -> DIVIDE seenoperator term
Rule 48    termp -> MOD seenoperator term
Rule 49    termp -> AND seenoperator term
Rule 50    termp -> PLUSPLUS seenoperator
Rule 51    termp -> MINUSMINUS seenoperator
Rule 52    seenoperator -> <empty>
Rule 53    seenfactor -> <empty>
Rule 54    genquad -> <empty>
Rule 55    factor -> const
Rule 56    factor -> LPAREN seenoperator expression RPAREN exitparen
Rule 57    exitparen -> <empty>
Rule 58    const -> PLUS IDENTIFIER
Rule 59    const -> MINUS IDENTIFIER
Rule 60    const -> IDENTIFIER
Rule 61    const -> PLUS NUMBER_CONST
Rule 62    const -> MINUS NUMBER_CONST
Rule 63    const -> NUMBER_CONST
Rule 64    const -> STRING_CONST
Rule 65    writefunction -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 66    writefunction -> WRITE LPAREN expression RPAREN SEMICOLON
Rule 67    empty -> <empty>

Terminals, with rules where they appear

AND                  : 49
ASSIGNOP             : 28
BEGIN                : 13
BOOLEAN              : 12
CHAR                 : 
COLON                : 2 3
COMMA                : 6
DIV                  : 46
DIVIDE               : 47
DO                   : 
ELSE                 : 22 23
END                  : 13
EQUALS               : 36
FALSE                : 
FOR                  : 
GREATER_THAN         : 33
GREATER_THAN_EQUALS  : 34
IDENTIFIER           : 1 5 6 28 58 59 60
IF                   : 21 22 23
INT                  : 9
LBRACKET             : 
LCURLYBRACE          : 1 21 22 23 23
LESS_THAN            : 31
LESS_THAN_EQUALS     : 32
LPAREN               : 21 22 23 56 65 66
MINUS                : 41 59 62
MINUSMINUS           : 51
MOD                  : 48
MULTIPLY             : 45
NOT                  : 
NOT_EQUALS           : 35
NUMBER_CONST         : 61 62 63
OR                   : 42
PERIOD               : 
PLUS                 : 40 58 61
PLUSPLUS             : 50
PRINT                : 65
PROGRAM              : 1
RBRACKET             : 
RCURLYBRACE          : 1 21 22 23 23
REAL                 : 10
RPAREN               : 21 22 23 56 65 66
SEMICOLON            : 2 3 13 13 28 65 66
STRING               : 11
STRING_CONST         : 64
THEN                 : 21 22 23
TRUE                 : 
VAR                  : 2 3
WHILE                : 
WRITE                : 66
error                : 

Nonterminals, with rules where they appear

assign               : 15 16
assignnow            : 28
block                : 1
checkbool            : 21 22 23
condition            : 19 20 22
const                : 55
empty                : 4 14 39 44
exitparen            : 56
expression           : 21 22 23 28 56 65 66
factor               : 43
genquad              : 31 32 33 34 35 36
program              : 0
seencurlyelse        : 21 22 23
seencurlyif          : 21 22 23
seenfactor           : 43
seenid               : 5 6
seenif               : 21 22 23
seenoperator         : 31 32 33 34 35 36 40 41 42 45 46 47 48 49 50 51 56
seenterm             : 37
seentype             : 2 3
simpleexpression     : 30 31 31 32 32 33 33 34 34 35 35 36 36 40 41 42
simpleexpressionp    : 37
statement            : 13 16 18 20 21 22 23 23
term                 : 37 45 46 47 48 49
termp                : 43
type                 : 2 3
vars                 : 1 3
varsp                : 2 3 6
writefunction        : 17 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . IDENTIFIER LCURLYBRACE vars block RCURLYBRACE

    IDENTIFIER      shift and go to state 3


state 3

    (1) program -> PROGRAM IDENTIFIER . LCURLYBRACE vars block RCURLYBRACE

    LCURLYBRACE     shift and go to state 4


state 4

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE . vars block RCURLYBRACE
    (2) vars -> . VAR varsp COLON type seentype SEMICOLON
    (3) vars -> . VAR varsp COLON type seentype SEMICOLON vars
    (4) vars -> . empty
    (67) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 67 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars . block RCURLYBRACE
    (13) block -> . BEGIN SEMICOLON statement END SEMICOLON

    BEGIN           shift and go to state 9

    block                          shift and go to state 8

state 6

    (2) vars -> VAR . varsp COLON type seentype SEMICOLON
    (3) vars -> VAR . varsp COLON type seentype SEMICOLON vars
    (5) varsp -> . IDENTIFIER seenid
    (6) varsp -> . IDENTIFIER seenid COMMA varsp

    IDENTIFIER      shift and go to state 11

    varsp                          shift and go to state 10

state 7

    (4) vars -> empty .

    BEGIN           reduce using rule 4 (vars -> empty .)


state 8

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars block . RCURLYBRACE

    RCURLYBRACE     shift and go to state 12


state 9

    (13) block -> BEGIN . SEMICOLON statement END SEMICOLON

    SEMICOLON       shift and go to state 13


state 10

    (2) vars -> VAR varsp . COLON type seentype SEMICOLON
    (3) vars -> VAR varsp . COLON type seentype SEMICOLON vars

    COLON           shift and go to state 14


state 11

    (5) varsp -> IDENTIFIER . seenid
    (6) varsp -> IDENTIFIER . seenid COMMA varsp
    (7) seenid -> .

    COMMA           reduce using rule 7 (seenid -> .)
    COLON           reduce using rule 7 (seenid -> .)

    seenid                         shift and go to state 15

state 12

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE .

    $end            reduce using rule 1 (program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE .)


state 13

    (13) block -> BEGIN SEMICOLON . statement END SEMICOLON
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (67) empty -> .
    (28) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (65) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (66) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (21) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    END             reduce using rule 67 (empty -> .)
    IDENTIFIER      shift and go to state 21
    PRINT           shift and go to state 22
    WRITE           shift and go to state 23
    IF              shift and go to state 24

    statement                      shift and go to state 16
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20

state 14

    (2) vars -> VAR varsp COLON . type seentype SEMICOLON
    (3) vars -> VAR varsp COLON . type seentype SEMICOLON vars
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . STRING
    (12) type -> . BOOLEAN

    INT             shift and go to state 26
    REAL            shift and go to state 27
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 29

    type                           shift and go to state 25

state 15

    (5) varsp -> IDENTIFIER seenid .
    (6) varsp -> IDENTIFIER seenid . COMMA varsp

    COLON           reduce using rule 5 (varsp -> IDENTIFIER seenid .)
    COMMA           shift and go to state 30


state 16

    (13) block -> BEGIN SEMICOLON statement . END SEMICOLON

    END             shift and go to state 31


state 17

    (14) statement -> empty .

    END             reduce using rule 14 (statement -> empty .)
    RCURLYBRACE     reduce using rule 14 (statement -> empty .)


state 18

    (15) statement -> assign .
    (16) statement -> assign . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (67) empty -> .
    (28) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (65) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (66) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (21) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

  ! reduce/reduce conflict for END resolved using rule 15 (statement -> assign .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 15 (statement -> assign .)
    END             reduce using rule 15 (statement -> assign .)
    RCURLYBRACE     reduce using rule 15 (statement -> assign .)
    IDENTIFIER      shift and go to state 21
    PRINT           shift and go to state 22
    WRITE           shift and go to state 23
    IF              shift and go to state 24

  ! END             [ reduce using rule 67 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 67 (empty -> .) ]

    assign                         shift and go to state 18
    statement                      shift and go to state 32
    empty                          shift and go to state 17
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20

state 19

    (17) statement -> writefunction .
    (18) statement -> writefunction . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (67) empty -> .
    (28) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (65) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (66) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (21) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

  ! reduce/reduce conflict for END resolved using rule 17 (statement -> writefunction .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 17 (statement -> writefunction .)
    END             reduce using rule 17 (statement -> writefunction .)
    RCURLYBRACE     reduce using rule 17 (statement -> writefunction .)
    IDENTIFIER      shift and go to state 21
    PRINT           shift and go to state 22
    WRITE           shift and go to state 23
    IF              shift and go to state 24

  ! END             [ reduce using rule 67 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 67 (empty -> .) ]

    writefunction                  shift and go to state 19
    statement                      shift and go to state 33
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    condition                      shift and go to state 20

state 20

    (19) statement -> condition .
    (20) statement -> condition . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (67) empty -> .
    (28) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (65) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (66) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (21) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

  ! reduce/reduce conflict for END resolved using rule 19 (statement -> condition .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 19 (statement -> condition .)
    END             reduce using rule 19 (statement -> condition .)
    RCURLYBRACE     reduce using rule 19 (statement -> condition .)
    IDENTIFIER      shift and go to state 21
    PRINT           shift and go to state 22
    WRITE           shift and go to state 23
    IF              shift and go to state 24

  ! END             [ reduce using rule 67 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 67 (empty -> .) ]

    condition                      shift and go to state 20
    statement                      shift and go to state 34
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19

state 21

    (28) assign -> IDENTIFIER . ASSIGNOP expression assignnow SEMICOLON

    ASSIGNOP        shift and go to state 35


state 22

    (65) writefunction -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 36


state 23

    (66) writefunction -> WRITE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 37


state 24

    (21) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LPAREN          shift and go to state 38


state 25

    (2) vars -> VAR varsp COLON type . seentype SEMICOLON
    (3) vars -> VAR varsp COLON type . seentype SEMICOLON vars
    (8) seentype -> .

    SEMICOLON       reduce using rule 8 (seentype -> .)

    seentype                       shift and go to state 39

state 26

    (9) type -> INT .

    SEMICOLON       reduce using rule 9 (type -> INT .)


state 27

    (10) type -> REAL .

    SEMICOLON       reduce using rule 10 (type -> REAL .)


state 28

    (11) type -> STRING .

    SEMICOLON       reduce using rule 11 (type -> STRING .)


state 29

    (12) type -> BOOLEAN .

    SEMICOLON       reduce using rule 12 (type -> BOOLEAN .)


state 30

    (6) varsp -> IDENTIFIER seenid COMMA . varsp
    (5) varsp -> . IDENTIFIER seenid
    (6) varsp -> . IDENTIFIER seenid COMMA varsp

    IDENTIFIER      shift and go to state 11

    varsp                          shift and go to state 40

state 31

    (13) block -> BEGIN SEMICOLON statement END . SEMICOLON

    SEMICOLON       shift and go to state 41


state 32

    (16) statement -> assign statement .

    END             reduce using rule 16 (statement -> assign statement .)
    RCURLYBRACE     reduce using rule 16 (statement -> assign statement .)


state 33

    (18) statement -> writefunction statement .

    END             reduce using rule 18 (statement -> writefunction statement .)
    RCURLYBRACE     reduce using rule 18 (statement -> writefunction statement .)


state 34

    (20) statement -> condition statement .

    END             reduce using rule 20 (statement -> condition statement .)
    RCURLYBRACE     reduce using rule 20 (statement -> condition statement .)


state 35

    (28) assign -> IDENTIFIER ASSIGNOP . expression assignnow SEMICOLON
    (30) expression -> . simpleexpression
    (31) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (32) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (33) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (34) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (35) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (36) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    expression                     shift and go to state 43
    simpleexpression               shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 36

    (65) writefunction -> PRINT LPAREN . expression RPAREN SEMICOLON
    (30) expression -> . simpleexpression
    (31) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (32) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (33) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (34) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (35) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (36) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    expression                     shift and go to state 53
    simpleexpression               shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 37

    (66) writefunction -> WRITE LPAREN . expression RPAREN SEMICOLON
    (30) expression -> . simpleexpression
    (31) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (32) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (33) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (34) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (35) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (36) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    expression                     shift and go to state 54
    simpleexpression               shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 38

    (21) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (30) expression -> . simpleexpression
    (31) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (32) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (33) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (34) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (35) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (36) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    expression                     shift and go to state 55
    simpleexpression               shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 39

    (2) vars -> VAR varsp COLON type seentype . SEMICOLON
    (3) vars -> VAR varsp COLON type seentype . SEMICOLON vars

    SEMICOLON       shift and go to state 56


state 40

    (6) varsp -> IDENTIFIER seenid COMMA varsp .

    COLON           reduce using rule 6 (varsp -> IDENTIFIER seenid COMMA varsp .)


state 41

    (13) block -> BEGIN SEMICOLON statement END SEMICOLON .

    RCURLYBRACE     reduce using rule 13 (block -> BEGIN SEMICOLON statement END SEMICOLON .)


state 42

    (60) const -> IDENTIFIER .

    MULTIPLY        reduce using rule 60 (const -> IDENTIFIER .)
    DIV             reduce using rule 60 (const -> IDENTIFIER .)
    DIVIDE          reduce using rule 60 (const -> IDENTIFIER .)
    MOD             reduce using rule 60 (const -> IDENTIFIER .)
    AND             reduce using rule 60 (const -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 60 (const -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 60 (const -> IDENTIFIER .)
    PLUS            reduce using rule 60 (const -> IDENTIFIER .)
    MINUS           reduce using rule 60 (const -> IDENTIFIER .)
    OR              reduce using rule 60 (const -> IDENTIFIER .)
    LESS_THAN       reduce using rule 60 (const -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 60 (const -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 60 (const -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 60 (const -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 60 (const -> IDENTIFIER .)
    EQUALS          reduce using rule 60 (const -> IDENTIFIER .)
    SEMICOLON       reduce using rule 60 (const -> IDENTIFIER .)
    RPAREN          reduce using rule 60 (const -> IDENTIFIER .)


state 43

    (28) assign -> IDENTIFIER ASSIGNOP expression . assignnow SEMICOLON
    (29) assignnow -> .

    SEMICOLON       reduce using rule 29 (assignnow -> .)

    assignnow                      shift and go to state 57

state 44

    (30) expression -> simpleexpression .
    (31) expression -> simpleexpression . LESS_THAN seenoperator simpleexpression genquad
    (32) expression -> simpleexpression . LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (33) expression -> simpleexpression . GREATER_THAN seenoperator simpleexpression genquad
    (34) expression -> simpleexpression . GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (35) expression -> simpleexpression . NOT_EQUALS seenoperator simpleexpression genquad
    (36) expression -> simpleexpression . EQUALS seenoperator simpleexpression genquad

    SEMICOLON       reduce using rule 30 (expression -> simpleexpression .)
    RPAREN          reduce using rule 30 (expression -> simpleexpression .)
    LESS_THAN       shift and go to state 58
    LESS_THAN_EQUALS shift and go to state 59
    GREATER_THAN    shift and go to state 60
    GREATER_THAN_EQUALS shift and go to state 61
    NOT_EQUALS      shift and go to state 62
    EQUALS          shift and go to state 63


state 45

    (37) simpleexpression -> term . seenterm simpleexpressionp
    (38) seenterm -> .

    PLUS            reduce using rule 38 (seenterm -> .)
    MINUS           reduce using rule 38 (seenterm -> .)
    OR              reduce using rule 38 (seenterm -> .)
    LESS_THAN       reduce using rule 38 (seenterm -> .)
    LESS_THAN_EQUALS reduce using rule 38 (seenterm -> .)
    GREATER_THAN    reduce using rule 38 (seenterm -> .)
    GREATER_THAN_EQUALS reduce using rule 38 (seenterm -> .)
    NOT_EQUALS      reduce using rule 38 (seenterm -> .)
    EQUALS          reduce using rule 38 (seenterm -> .)
    SEMICOLON       reduce using rule 38 (seenterm -> .)
    RPAREN          reduce using rule 38 (seenterm -> .)

    seenterm                       shift and go to state 64

state 46

    (43) term -> factor . seenfactor termp
    (53) seenfactor -> .

    MULTIPLY        reduce using rule 53 (seenfactor -> .)
    DIV             reduce using rule 53 (seenfactor -> .)
    DIVIDE          reduce using rule 53 (seenfactor -> .)
    MOD             reduce using rule 53 (seenfactor -> .)
    AND             reduce using rule 53 (seenfactor -> .)
    PLUSPLUS        reduce using rule 53 (seenfactor -> .)
    MINUSMINUS      reduce using rule 53 (seenfactor -> .)
    PLUS            reduce using rule 53 (seenfactor -> .)
    MINUS           reduce using rule 53 (seenfactor -> .)
    OR              reduce using rule 53 (seenfactor -> .)
    LESS_THAN       reduce using rule 53 (seenfactor -> .)
    LESS_THAN_EQUALS reduce using rule 53 (seenfactor -> .)
    GREATER_THAN    reduce using rule 53 (seenfactor -> .)
    GREATER_THAN_EQUALS reduce using rule 53 (seenfactor -> .)
    NOT_EQUALS      reduce using rule 53 (seenfactor -> .)
    EQUALS          reduce using rule 53 (seenfactor -> .)
    SEMICOLON       reduce using rule 53 (seenfactor -> .)
    RPAREN          reduce using rule 53 (seenfactor -> .)

    seenfactor                     shift and go to state 65

state 47

    (55) factor -> const .

    MULTIPLY        reduce using rule 55 (factor -> const .)
    DIV             reduce using rule 55 (factor -> const .)
    DIVIDE          reduce using rule 55 (factor -> const .)
    MOD             reduce using rule 55 (factor -> const .)
    AND             reduce using rule 55 (factor -> const .)
    PLUSPLUS        reduce using rule 55 (factor -> const .)
    MINUSMINUS      reduce using rule 55 (factor -> const .)
    PLUS            reduce using rule 55 (factor -> const .)
    MINUS           reduce using rule 55 (factor -> const .)
    OR              reduce using rule 55 (factor -> const .)
    LESS_THAN       reduce using rule 55 (factor -> const .)
    LESS_THAN_EQUALS reduce using rule 55 (factor -> const .)
    GREATER_THAN    reduce using rule 55 (factor -> const .)
    GREATER_THAN_EQUALS reduce using rule 55 (factor -> const .)
    NOT_EQUALS      reduce using rule 55 (factor -> const .)
    EQUALS          reduce using rule 55 (factor -> const .)
    SEMICOLON       reduce using rule 55 (factor -> const .)
    RPAREN          reduce using rule 55 (factor -> const .)


state 48

    (56) factor -> LPAREN . seenoperator expression RPAREN exitparen
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 66

state 49

    (58) const -> PLUS . IDENTIFIER
    (61) const -> PLUS . NUMBER_CONST

    IDENTIFIER      shift and go to state 67
    NUMBER_CONST    shift and go to state 68


state 50

    (59) const -> MINUS . IDENTIFIER
    (62) const -> MINUS . NUMBER_CONST

    IDENTIFIER      shift and go to state 69
    NUMBER_CONST    shift and go to state 70


state 51

    (63) const -> NUMBER_CONST .

    MULTIPLY        reduce using rule 63 (const -> NUMBER_CONST .)
    DIV             reduce using rule 63 (const -> NUMBER_CONST .)
    DIVIDE          reduce using rule 63 (const -> NUMBER_CONST .)
    MOD             reduce using rule 63 (const -> NUMBER_CONST .)
    AND             reduce using rule 63 (const -> NUMBER_CONST .)
    PLUSPLUS        reduce using rule 63 (const -> NUMBER_CONST .)
    MINUSMINUS      reduce using rule 63 (const -> NUMBER_CONST .)
    PLUS            reduce using rule 63 (const -> NUMBER_CONST .)
    MINUS           reduce using rule 63 (const -> NUMBER_CONST .)
    OR              reduce using rule 63 (const -> NUMBER_CONST .)
    LESS_THAN       reduce using rule 63 (const -> NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 63 (const -> NUMBER_CONST .)
    GREATER_THAN    reduce using rule 63 (const -> NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 63 (const -> NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 63 (const -> NUMBER_CONST .)
    EQUALS          reduce using rule 63 (const -> NUMBER_CONST .)
    SEMICOLON       reduce using rule 63 (const -> NUMBER_CONST .)
    RPAREN          reduce using rule 63 (const -> NUMBER_CONST .)


state 52

    (64) const -> STRING_CONST .

    MULTIPLY        reduce using rule 64 (const -> STRING_CONST .)
    DIV             reduce using rule 64 (const -> STRING_CONST .)
    DIVIDE          reduce using rule 64 (const -> STRING_CONST .)
    MOD             reduce using rule 64 (const -> STRING_CONST .)
    AND             reduce using rule 64 (const -> STRING_CONST .)
    PLUSPLUS        reduce using rule 64 (const -> STRING_CONST .)
    MINUSMINUS      reduce using rule 64 (const -> STRING_CONST .)
    PLUS            reduce using rule 64 (const -> STRING_CONST .)
    MINUS           reduce using rule 64 (const -> STRING_CONST .)
    OR              reduce using rule 64 (const -> STRING_CONST .)
    LESS_THAN       reduce using rule 64 (const -> STRING_CONST .)
    LESS_THAN_EQUALS reduce using rule 64 (const -> STRING_CONST .)
    GREATER_THAN    reduce using rule 64 (const -> STRING_CONST .)
    GREATER_THAN_EQUALS reduce using rule 64 (const -> STRING_CONST .)
    NOT_EQUALS      reduce using rule 64 (const -> STRING_CONST .)
    EQUALS          reduce using rule 64 (const -> STRING_CONST .)
    SEMICOLON       reduce using rule 64 (const -> STRING_CONST .)
    RPAREN          reduce using rule 64 (const -> STRING_CONST .)


state 53

    (65) writefunction -> PRINT LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 71


state 54

    (66) writefunction -> WRITE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 72


state 55

    (21) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    RPAREN          shift and go to state 73


state 56

    (2) vars -> VAR varsp COLON type seentype SEMICOLON .
    (3) vars -> VAR varsp COLON type seentype SEMICOLON . vars
    (2) vars -> . VAR varsp COLON type seentype SEMICOLON
    (3) vars -> . VAR varsp COLON type seentype SEMICOLON vars
    (4) vars -> . empty
    (67) empty -> .

  ! reduce/reduce conflict for BEGIN resolved using rule 2 (vars -> VAR varsp COLON type seentype SEMICOLON .)
    BEGIN           reduce using rule 2 (vars -> VAR varsp COLON type seentype SEMICOLON .)
    VAR             shift and go to state 6

  ! BEGIN           [ reduce using rule 67 (empty -> .) ]

    vars                           shift and go to state 74
    empty                          shift and go to state 7

state 57

    (28) assign -> IDENTIFIER ASSIGNOP expression assignnow . SEMICOLON

    SEMICOLON       shift and go to state 75


state 58

    (31) expression -> simpleexpression LESS_THAN . seenoperator simpleexpression genquad
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 76

state 59

    (32) expression -> simpleexpression LESS_THAN_EQUALS . seenoperator simpleexpression genquad
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 77

state 60

    (33) expression -> simpleexpression GREATER_THAN . seenoperator simpleexpression genquad
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 78

state 61

    (34) expression -> simpleexpression GREATER_THAN_EQUALS . seenoperator simpleexpression genquad
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 79

state 62

    (35) expression -> simpleexpression NOT_EQUALS . seenoperator simpleexpression genquad
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 80

state 63

    (36) expression -> simpleexpression EQUALS . seenoperator simpleexpression genquad
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 81

state 64

    (37) simpleexpression -> term seenterm . simpleexpressionp
    (39) simpleexpressionp -> . empty
    (40) simpleexpressionp -> . PLUS seenoperator simpleexpression
    (41) simpleexpressionp -> . MINUS seenoperator simpleexpression
    (42) simpleexpressionp -> . OR seenoperator simpleexpression
    (67) empty -> .

    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    OR              shift and go to state 86
    LESS_THAN       reduce using rule 67 (empty -> .)
    LESS_THAN_EQUALS reduce using rule 67 (empty -> .)
    GREATER_THAN    reduce using rule 67 (empty -> .)
    GREATER_THAN_EQUALS reduce using rule 67 (empty -> .)
    NOT_EQUALS      reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    SEMICOLON       reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)

    simpleexpressionp              shift and go to state 82
    empty                          shift and go to state 83

state 65

    (43) term -> factor seenfactor . termp
    (44) termp -> . empty
    (45) termp -> . MULTIPLY seenoperator term
    (46) termp -> . DIV seenoperator term
    (47) termp -> . DIVIDE seenoperator term
    (48) termp -> . MOD seenoperator term
    (49) termp -> . AND seenoperator term
    (50) termp -> . PLUSPLUS seenoperator
    (51) termp -> . MINUSMINUS seenoperator
    (67) empty -> .

    MULTIPLY        shift and go to state 89
    DIV             shift and go to state 90
    DIVIDE          shift and go to state 91
    MOD             shift and go to state 92
    AND             shift and go to state 93
    PLUSPLUS        shift and go to state 94
    MINUSMINUS      shift and go to state 95
    PLUS            reduce using rule 67 (empty -> .)
    MINUS           reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    LESS_THAN       reduce using rule 67 (empty -> .)
    LESS_THAN_EQUALS reduce using rule 67 (empty -> .)
    GREATER_THAN    reduce using rule 67 (empty -> .)
    GREATER_THAN_EQUALS reduce using rule 67 (empty -> .)
    NOT_EQUALS      reduce using rule 67 (empty -> .)
    EQUALS          reduce using rule 67 (empty -> .)
    SEMICOLON       reduce using rule 67 (empty -> .)
    RPAREN          reduce using rule 67 (empty -> .)

    termp                          shift and go to state 87
    empty                          shift and go to state 88

state 66

    (56) factor -> LPAREN seenoperator . expression RPAREN exitparen
    (30) expression -> . simpleexpression
    (31) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (32) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (33) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (34) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (35) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (36) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    expression                     shift and go to state 96
    simpleexpression               shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 67

    (58) const -> PLUS IDENTIFIER .

    MULTIPLY        reduce using rule 58 (const -> PLUS IDENTIFIER .)
    DIV             reduce using rule 58 (const -> PLUS IDENTIFIER .)
    DIVIDE          reduce using rule 58 (const -> PLUS IDENTIFIER .)
    MOD             reduce using rule 58 (const -> PLUS IDENTIFIER .)
    AND             reduce using rule 58 (const -> PLUS IDENTIFIER .)
    PLUSPLUS        reduce using rule 58 (const -> PLUS IDENTIFIER .)
    MINUSMINUS      reduce using rule 58 (const -> PLUS IDENTIFIER .)
    PLUS            reduce using rule 58 (const -> PLUS IDENTIFIER .)
    MINUS           reduce using rule 58 (const -> PLUS IDENTIFIER .)
    OR              reduce using rule 58 (const -> PLUS IDENTIFIER .)
    LESS_THAN       reduce using rule 58 (const -> PLUS IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 58 (const -> PLUS IDENTIFIER .)
    GREATER_THAN    reduce using rule 58 (const -> PLUS IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 58 (const -> PLUS IDENTIFIER .)
    NOT_EQUALS      reduce using rule 58 (const -> PLUS IDENTIFIER .)
    EQUALS          reduce using rule 58 (const -> PLUS IDENTIFIER .)
    SEMICOLON       reduce using rule 58 (const -> PLUS IDENTIFIER .)
    RPAREN          reduce using rule 58 (const -> PLUS IDENTIFIER .)


state 68

    (61) const -> PLUS NUMBER_CONST .

    MULTIPLY        reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    DIV             reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    DIVIDE          reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    MOD             reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    AND             reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    PLUSPLUS        reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    MINUSMINUS      reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    PLUS            reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    MINUS           reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    OR              reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    LESS_THAN       reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    GREATER_THAN    reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    EQUALS          reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    SEMICOLON       reduce using rule 61 (const -> PLUS NUMBER_CONST .)
    RPAREN          reduce using rule 61 (const -> PLUS NUMBER_CONST .)


state 69

    (59) const -> MINUS IDENTIFIER .

    MULTIPLY        reduce using rule 59 (const -> MINUS IDENTIFIER .)
    DIV             reduce using rule 59 (const -> MINUS IDENTIFIER .)
    DIVIDE          reduce using rule 59 (const -> MINUS IDENTIFIER .)
    MOD             reduce using rule 59 (const -> MINUS IDENTIFIER .)
    AND             reduce using rule 59 (const -> MINUS IDENTIFIER .)
    PLUSPLUS        reduce using rule 59 (const -> MINUS IDENTIFIER .)
    MINUSMINUS      reduce using rule 59 (const -> MINUS IDENTIFIER .)
    PLUS            reduce using rule 59 (const -> MINUS IDENTIFIER .)
    MINUS           reduce using rule 59 (const -> MINUS IDENTIFIER .)
    OR              reduce using rule 59 (const -> MINUS IDENTIFIER .)
    LESS_THAN       reduce using rule 59 (const -> MINUS IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 59 (const -> MINUS IDENTIFIER .)
    GREATER_THAN    reduce using rule 59 (const -> MINUS IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 59 (const -> MINUS IDENTIFIER .)
    NOT_EQUALS      reduce using rule 59 (const -> MINUS IDENTIFIER .)
    EQUALS          reduce using rule 59 (const -> MINUS IDENTIFIER .)
    SEMICOLON       reduce using rule 59 (const -> MINUS IDENTIFIER .)
    RPAREN          reduce using rule 59 (const -> MINUS IDENTIFIER .)


state 70

    (62) const -> MINUS NUMBER_CONST .

    MULTIPLY        reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    DIV             reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    DIVIDE          reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    MOD             reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    AND             reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    PLUSPLUS        reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    MINUSMINUS      reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    PLUS            reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    MINUS           reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    OR              reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    LESS_THAN       reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    GREATER_THAN    reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    EQUALS          reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    SEMICOLON       reduce using rule 62 (const -> MINUS NUMBER_CONST .)
    RPAREN          reduce using rule 62 (const -> MINUS NUMBER_CONST .)


state 71

    (65) writefunction -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 97


state 72

    (66) writefunction -> WRITE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 98


state 73

    (21) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (24) checkbool -> .

    THEN            reduce using rule 24 (checkbool -> .)

    checkbool                      shift and go to state 99

state 74

    (3) vars -> VAR varsp COLON type seentype SEMICOLON vars .

    BEGIN           reduce using rule 3 (vars -> VAR varsp COLON type seentype SEMICOLON vars .)


state 75

    (28) assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .

    IDENTIFIER      reduce using rule 28 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    PRINT           reduce using rule 28 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    WRITE           reduce using rule 28 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    IF              reduce using rule 28 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    END             reduce using rule 28 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    RCURLYBRACE     reduce using rule 28 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)


state 76

    (31) expression -> simpleexpression LESS_THAN seenoperator . simpleexpression genquad
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    simpleexpression               shift and go to state 100
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 77

    (32) expression -> simpleexpression LESS_THAN_EQUALS seenoperator . simpleexpression genquad
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    simpleexpression               shift and go to state 101
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 78

    (33) expression -> simpleexpression GREATER_THAN seenoperator . simpleexpression genquad
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    simpleexpression               shift and go to state 102
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 79

    (34) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator . simpleexpression genquad
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    simpleexpression               shift and go to state 103
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 80

    (35) expression -> simpleexpression NOT_EQUALS seenoperator . simpleexpression genquad
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    simpleexpression               shift and go to state 104
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 81

    (36) expression -> simpleexpression EQUALS seenoperator . simpleexpression genquad
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    simpleexpression               shift and go to state 105
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 82

    (37) simpleexpression -> term seenterm simpleexpressionp .

    LESS_THAN       reduce using rule 37 (simpleexpression -> term seenterm simpleexpressionp .)
    LESS_THAN_EQUALS reduce using rule 37 (simpleexpression -> term seenterm simpleexpressionp .)
    GREATER_THAN    reduce using rule 37 (simpleexpression -> term seenterm simpleexpressionp .)
    GREATER_THAN_EQUALS reduce using rule 37 (simpleexpression -> term seenterm simpleexpressionp .)
    NOT_EQUALS      reduce using rule 37 (simpleexpression -> term seenterm simpleexpressionp .)
    EQUALS          reduce using rule 37 (simpleexpression -> term seenterm simpleexpressionp .)
    SEMICOLON       reduce using rule 37 (simpleexpression -> term seenterm simpleexpressionp .)
    RPAREN          reduce using rule 37 (simpleexpression -> term seenterm simpleexpressionp .)


state 83

    (39) simpleexpressionp -> empty .

    LESS_THAN       reduce using rule 39 (simpleexpressionp -> empty .)
    LESS_THAN_EQUALS reduce using rule 39 (simpleexpressionp -> empty .)
    GREATER_THAN    reduce using rule 39 (simpleexpressionp -> empty .)
    GREATER_THAN_EQUALS reduce using rule 39 (simpleexpressionp -> empty .)
    NOT_EQUALS      reduce using rule 39 (simpleexpressionp -> empty .)
    EQUALS          reduce using rule 39 (simpleexpressionp -> empty .)
    SEMICOLON       reduce using rule 39 (simpleexpressionp -> empty .)
    RPAREN          reduce using rule 39 (simpleexpressionp -> empty .)


state 84

    (40) simpleexpressionp -> PLUS . seenoperator simpleexpression
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 106

state 85

    (41) simpleexpressionp -> MINUS . seenoperator simpleexpression
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 107

state 86

    (42) simpleexpressionp -> OR . seenoperator simpleexpression
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 108

state 87

    (43) term -> factor seenfactor termp .

    PLUS            reduce using rule 43 (term -> factor seenfactor termp .)
    MINUS           reduce using rule 43 (term -> factor seenfactor termp .)
    OR              reduce using rule 43 (term -> factor seenfactor termp .)
    LESS_THAN       reduce using rule 43 (term -> factor seenfactor termp .)
    LESS_THAN_EQUALS reduce using rule 43 (term -> factor seenfactor termp .)
    GREATER_THAN    reduce using rule 43 (term -> factor seenfactor termp .)
    GREATER_THAN_EQUALS reduce using rule 43 (term -> factor seenfactor termp .)
    NOT_EQUALS      reduce using rule 43 (term -> factor seenfactor termp .)
    EQUALS          reduce using rule 43 (term -> factor seenfactor termp .)
    SEMICOLON       reduce using rule 43 (term -> factor seenfactor termp .)
    RPAREN          reduce using rule 43 (term -> factor seenfactor termp .)


state 88

    (44) termp -> empty .

    PLUS            reduce using rule 44 (termp -> empty .)
    MINUS           reduce using rule 44 (termp -> empty .)
    OR              reduce using rule 44 (termp -> empty .)
    LESS_THAN       reduce using rule 44 (termp -> empty .)
    LESS_THAN_EQUALS reduce using rule 44 (termp -> empty .)
    GREATER_THAN    reduce using rule 44 (termp -> empty .)
    GREATER_THAN_EQUALS reduce using rule 44 (termp -> empty .)
    NOT_EQUALS      reduce using rule 44 (termp -> empty .)
    EQUALS          reduce using rule 44 (termp -> empty .)
    SEMICOLON       reduce using rule 44 (termp -> empty .)
    RPAREN          reduce using rule 44 (termp -> empty .)


state 89

    (45) termp -> MULTIPLY . seenoperator term
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 109

state 90

    (46) termp -> DIV . seenoperator term
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 110

state 91

    (47) termp -> DIVIDE . seenoperator term
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 111

state 92

    (48) termp -> MOD . seenoperator term
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 112

state 93

    (49) termp -> AND . seenoperator term
    (52) seenoperator -> .

    LPAREN          reduce using rule 52 (seenoperator -> .)
    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    IDENTIFIER      reduce using rule 52 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 52 (seenoperator -> .)
    STRING_CONST    reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 113

state 94

    (50) termp -> PLUSPLUS . seenoperator
    (52) seenoperator -> .

    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    OR              reduce using rule 52 (seenoperator -> .)
    LESS_THAN       reduce using rule 52 (seenoperator -> .)
    LESS_THAN_EQUALS reduce using rule 52 (seenoperator -> .)
    GREATER_THAN    reduce using rule 52 (seenoperator -> .)
    GREATER_THAN_EQUALS reduce using rule 52 (seenoperator -> .)
    NOT_EQUALS      reduce using rule 52 (seenoperator -> .)
    EQUALS          reduce using rule 52 (seenoperator -> .)
    SEMICOLON       reduce using rule 52 (seenoperator -> .)
    RPAREN          reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 114

state 95

    (51) termp -> MINUSMINUS . seenoperator
    (52) seenoperator -> .

    PLUS            reduce using rule 52 (seenoperator -> .)
    MINUS           reduce using rule 52 (seenoperator -> .)
    OR              reduce using rule 52 (seenoperator -> .)
    LESS_THAN       reduce using rule 52 (seenoperator -> .)
    LESS_THAN_EQUALS reduce using rule 52 (seenoperator -> .)
    GREATER_THAN    reduce using rule 52 (seenoperator -> .)
    GREATER_THAN_EQUALS reduce using rule 52 (seenoperator -> .)
    NOT_EQUALS      reduce using rule 52 (seenoperator -> .)
    EQUALS          reduce using rule 52 (seenoperator -> .)
    SEMICOLON       reduce using rule 52 (seenoperator -> .)
    RPAREN          reduce using rule 52 (seenoperator -> .)

    seenoperator                   shift and go to state 115

state 96

    (56) factor -> LPAREN seenoperator expression . RPAREN exitparen

    RPAREN          shift and go to state 116


state 97

    (65) writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 65 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 65 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 65 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 65 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 65 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RCURLYBRACE     reduce using rule 65 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 98

    (66) writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 66 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 66 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 66 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 66 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 66 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    RCURLYBRACE     reduce using rule 66 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)


state 99

    (21) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (25) seenif -> .

    THEN            reduce using rule 25 (seenif -> .)

    seenif                         shift and go to state 117

state 100

    (31) expression -> simpleexpression LESS_THAN seenoperator simpleexpression . genquad
    (54) genquad -> .

    SEMICOLON       reduce using rule 54 (genquad -> .)
    RPAREN          reduce using rule 54 (genquad -> .)

    genquad                        shift and go to state 118

state 101

    (32) expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression . genquad
    (54) genquad -> .

    SEMICOLON       reduce using rule 54 (genquad -> .)
    RPAREN          reduce using rule 54 (genquad -> .)

    genquad                        shift and go to state 119

state 102

    (33) expression -> simpleexpression GREATER_THAN seenoperator simpleexpression . genquad
    (54) genquad -> .

    SEMICOLON       reduce using rule 54 (genquad -> .)
    RPAREN          reduce using rule 54 (genquad -> .)

    genquad                        shift and go to state 120

state 103

    (34) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression . genquad
    (54) genquad -> .

    SEMICOLON       reduce using rule 54 (genquad -> .)
    RPAREN          reduce using rule 54 (genquad -> .)

    genquad                        shift and go to state 121

state 104

    (35) expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression . genquad
    (54) genquad -> .

    SEMICOLON       reduce using rule 54 (genquad -> .)
    RPAREN          reduce using rule 54 (genquad -> .)

    genquad                        shift and go to state 122

state 105

    (36) expression -> simpleexpression EQUALS seenoperator simpleexpression . genquad
    (54) genquad -> .

    SEMICOLON       reduce using rule 54 (genquad -> .)
    RPAREN          reduce using rule 54 (genquad -> .)

    genquad                        shift and go to state 123

state 106

    (40) simpleexpressionp -> PLUS seenoperator . simpleexpression
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    simpleexpression               shift and go to state 124
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 107

    (41) simpleexpressionp -> MINUS seenoperator . simpleexpression
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    simpleexpression               shift and go to state 125
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 108

    (42) simpleexpressionp -> OR seenoperator . simpleexpression
    (37) simpleexpression -> . term seenterm simpleexpressionp
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    simpleexpression               shift and go to state 126
    term                           shift and go to state 45
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 109

    (45) termp -> MULTIPLY seenoperator . term
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    term                           shift and go to state 127
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 110

    (46) termp -> DIV seenoperator . term
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    term                           shift and go to state 128
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 111

    (47) termp -> DIVIDE seenoperator . term
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    term                           shift and go to state 129
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 112

    (48) termp -> MOD seenoperator . term
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    term                           shift and go to state 130
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 113

    (49) termp -> AND seenoperator . term
    (43) term -> . factor seenfactor termp
    (55) factor -> . const
    (56) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (58) const -> . PLUS IDENTIFIER
    (59) const -> . MINUS IDENTIFIER
    (60) const -> . IDENTIFIER
    (61) const -> . PLUS NUMBER_CONST
    (62) const -> . MINUS NUMBER_CONST
    (63) const -> . NUMBER_CONST
    (64) const -> . STRING_CONST

    LPAREN          shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    IDENTIFIER      shift and go to state 42
    NUMBER_CONST    shift and go to state 51
    STRING_CONST    shift and go to state 52

    term                           shift and go to state 131
    factor                         shift and go to state 46
    const                          shift and go to state 47

state 114

    (50) termp -> PLUSPLUS seenoperator .

    PLUS            reduce using rule 50 (termp -> PLUSPLUS seenoperator .)
    MINUS           reduce using rule 50 (termp -> PLUSPLUS seenoperator .)
    OR              reduce using rule 50 (termp -> PLUSPLUS seenoperator .)
    LESS_THAN       reduce using rule 50 (termp -> PLUSPLUS seenoperator .)
    LESS_THAN_EQUALS reduce using rule 50 (termp -> PLUSPLUS seenoperator .)
    GREATER_THAN    reduce using rule 50 (termp -> PLUSPLUS seenoperator .)
    GREATER_THAN_EQUALS reduce using rule 50 (termp -> PLUSPLUS seenoperator .)
    NOT_EQUALS      reduce using rule 50 (termp -> PLUSPLUS seenoperator .)
    EQUALS          reduce using rule 50 (termp -> PLUSPLUS seenoperator .)
    SEMICOLON       reduce using rule 50 (termp -> PLUSPLUS seenoperator .)
    RPAREN          reduce using rule 50 (termp -> PLUSPLUS seenoperator .)


state 115

    (51) termp -> MINUSMINUS seenoperator .

    PLUS            reduce using rule 51 (termp -> MINUSMINUS seenoperator .)
    MINUS           reduce using rule 51 (termp -> MINUSMINUS seenoperator .)
    OR              reduce using rule 51 (termp -> MINUSMINUS seenoperator .)
    LESS_THAN       reduce using rule 51 (termp -> MINUSMINUS seenoperator .)
    LESS_THAN_EQUALS reduce using rule 51 (termp -> MINUSMINUS seenoperator .)
    GREATER_THAN    reduce using rule 51 (termp -> MINUSMINUS seenoperator .)
    GREATER_THAN_EQUALS reduce using rule 51 (termp -> MINUSMINUS seenoperator .)
    NOT_EQUALS      reduce using rule 51 (termp -> MINUSMINUS seenoperator .)
    EQUALS          reduce using rule 51 (termp -> MINUSMINUS seenoperator .)
    SEMICOLON       reduce using rule 51 (termp -> MINUSMINUS seenoperator .)
    RPAREN          reduce using rule 51 (termp -> MINUSMINUS seenoperator .)


state 116

    (56) factor -> LPAREN seenoperator expression RPAREN . exitparen
    (57) exitparen -> .

    MULTIPLY        reduce using rule 57 (exitparen -> .)
    DIV             reduce using rule 57 (exitparen -> .)
    DIVIDE          reduce using rule 57 (exitparen -> .)
    MOD             reduce using rule 57 (exitparen -> .)
    AND             reduce using rule 57 (exitparen -> .)
    PLUSPLUS        reduce using rule 57 (exitparen -> .)
    MINUSMINUS      reduce using rule 57 (exitparen -> .)
    PLUS            reduce using rule 57 (exitparen -> .)
    MINUS           reduce using rule 57 (exitparen -> .)
    OR              reduce using rule 57 (exitparen -> .)
    LESS_THAN       reduce using rule 57 (exitparen -> .)
    LESS_THAN_EQUALS reduce using rule 57 (exitparen -> .)
    GREATER_THAN    reduce using rule 57 (exitparen -> .)
    GREATER_THAN_EQUALS reduce using rule 57 (exitparen -> .)
    NOT_EQUALS      reduce using rule 57 (exitparen -> .)
    EQUALS          reduce using rule 57 (exitparen -> .)
    SEMICOLON       reduce using rule 57 (exitparen -> .)
    RPAREN          reduce using rule 57 (exitparen -> .)

    exitparen                      shift and go to state 132

state 117

    (21) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    THEN            shift and go to state 133


state 118

    (31) expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 31 (expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 31 (expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .)


state 119

    (32) expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 32 (expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 32 (expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .)


state 120

    (33) expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 33 (expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 33 (expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .)


state 121

    (34) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 34 (expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 34 (expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .)


state 122

    (35) expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 35 (expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 35 (expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .)


state 123

    (36) expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 36 (expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 36 (expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .)


state 124

    (40) simpleexpressionp -> PLUS seenoperator simpleexpression .

    LESS_THAN       reduce using rule 40 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 40 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 40 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 40 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 40 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    EQUALS          reduce using rule 40 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 40 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    RPAREN          reduce using rule 40 (simpleexpressionp -> PLUS seenoperator simpleexpression .)


state 125

    (41) simpleexpressionp -> MINUS seenoperator simpleexpression .

    LESS_THAN       reduce using rule 41 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 41 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 41 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 41 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 41 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    EQUALS          reduce using rule 41 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 41 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    RPAREN          reduce using rule 41 (simpleexpressionp -> MINUS seenoperator simpleexpression .)


state 126

    (42) simpleexpressionp -> OR seenoperator simpleexpression .

    LESS_THAN       reduce using rule 42 (simpleexpressionp -> OR seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 42 (simpleexpressionp -> OR seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 42 (simpleexpressionp -> OR seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 42 (simpleexpressionp -> OR seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 42 (simpleexpressionp -> OR seenoperator simpleexpression .)
    EQUALS          reduce using rule 42 (simpleexpressionp -> OR seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 42 (simpleexpressionp -> OR seenoperator simpleexpression .)
    RPAREN          reduce using rule 42 (simpleexpressionp -> OR seenoperator simpleexpression .)


state 127

    (45) termp -> MULTIPLY seenoperator term .

    PLUS            reduce using rule 45 (termp -> MULTIPLY seenoperator term .)
    MINUS           reduce using rule 45 (termp -> MULTIPLY seenoperator term .)
    OR              reduce using rule 45 (termp -> MULTIPLY seenoperator term .)
    LESS_THAN       reduce using rule 45 (termp -> MULTIPLY seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 45 (termp -> MULTIPLY seenoperator term .)
    GREATER_THAN    reduce using rule 45 (termp -> MULTIPLY seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 45 (termp -> MULTIPLY seenoperator term .)
    NOT_EQUALS      reduce using rule 45 (termp -> MULTIPLY seenoperator term .)
    EQUALS          reduce using rule 45 (termp -> MULTIPLY seenoperator term .)
    SEMICOLON       reduce using rule 45 (termp -> MULTIPLY seenoperator term .)
    RPAREN          reduce using rule 45 (termp -> MULTIPLY seenoperator term .)


state 128

    (46) termp -> DIV seenoperator term .

    PLUS            reduce using rule 46 (termp -> DIV seenoperator term .)
    MINUS           reduce using rule 46 (termp -> DIV seenoperator term .)
    OR              reduce using rule 46 (termp -> DIV seenoperator term .)
    LESS_THAN       reduce using rule 46 (termp -> DIV seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 46 (termp -> DIV seenoperator term .)
    GREATER_THAN    reduce using rule 46 (termp -> DIV seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 46 (termp -> DIV seenoperator term .)
    NOT_EQUALS      reduce using rule 46 (termp -> DIV seenoperator term .)
    EQUALS          reduce using rule 46 (termp -> DIV seenoperator term .)
    SEMICOLON       reduce using rule 46 (termp -> DIV seenoperator term .)
    RPAREN          reduce using rule 46 (termp -> DIV seenoperator term .)


state 129

    (47) termp -> DIVIDE seenoperator term .

    PLUS            reduce using rule 47 (termp -> DIVIDE seenoperator term .)
    MINUS           reduce using rule 47 (termp -> DIVIDE seenoperator term .)
    OR              reduce using rule 47 (termp -> DIVIDE seenoperator term .)
    LESS_THAN       reduce using rule 47 (termp -> DIVIDE seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 47 (termp -> DIVIDE seenoperator term .)
    GREATER_THAN    reduce using rule 47 (termp -> DIVIDE seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 47 (termp -> DIVIDE seenoperator term .)
    NOT_EQUALS      reduce using rule 47 (termp -> DIVIDE seenoperator term .)
    EQUALS          reduce using rule 47 (termp -> DIVIDE seenoperator term .)
    SEMICOLON       reduce using rule 47 (termp -> DIVIDE seenoperator term .)
    RPAREN          reduce using rule 47 (termp -> DIVIDE seenoperator term .)


state 130

    (48) termp -> MOD seenoperator term .

    PLUS            reduce using rule 48 (termp -> MOD seenoperator term .)
    MINUS           reduce using rule 48 (termp -> MOD seenoperator term .)
    OR              reduce using rule 48 (termp -> MOD seenoperator term .)
    LESS_THAN       reduce using rule 48 (termp -> MOD seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 48 (termp -> MOD seenoperator term .)
    GREATER_THAN    reduce using rule 48 (termp -> MOD seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 48 (termp -> MOD seenoperator term .)
    NOT_EQUALS      reduce using rule 48 (termp -> MOD seenoperator term .)
    EQUALS          reduce using rule 48 (termp -> MOD seenoperator term .)
    SEMICOLON       reduce using rule 48 (termp -> MOD seenoperator term .)
    RPAREN          reduce using rule 48 (termp -> MOD seenoperator term .)


state 131

    (49) termp -> AND seenoperator term .

    PLUS            reduce using rule 49 (termp -> AND seenoperator term .)
    MINUS           reduce using rule 49 (termp -> AND seenoperator term .)
    OR              reduce using rule 49 (termp -> AND seenoperator term .)
    LESS_THAN       reduce using rule 49 (termp -> AND seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 49 (termp -> AND seenoperator term .)
    GREATER_THAN    reduce using rule 49 (termp -> AND seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 49 (termp -> AND seenoperator term .)
    NOT_EQUALS      reduce using rule 49 (termp -> AND seenoperator term .)
    EQUALS          reduce using rule 49 (termp -> AND seenoperator term .)
    SEMICOLON       reduce using rule 49 (termp -> AND seenoperator term .)
    RPAREN          reduce using rule 49 (termp -> AND seenoperator term .)


state 132

    (56) factor -> LPAREN seenoperator expression RPAREN exitparen .

    MULTIPLY        reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    DIV             reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    DIVIDE          reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MOD             reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    AND             reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    PLUSPLUS        reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MINUSMINUS      reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    PLUS            reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MINUS           reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    OR              reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    LESS_THAN       reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    LESS_THAN_EQUALS reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    GREATER_THAN    reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    GREATER_THAN_EQUALS reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    NOT_EQUALS      reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    EQUALS          reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    SEMICOLON       reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    RPAREN          reduce using rule 56 (factor -> LPAREN seenoperator expression RPAREN exitparen .)


state 133

    (21) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LCURLYBRACE     shift and go to state 134


state 134

    (21) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (67) empty -> .
    (28) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (65) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (66) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (21) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    RCURLYBRACE     reduce using rule 67 (empty -> .)
    IDENTIFIER      shift and go to state 21
    PRINT           shift and go to state 22
    WRITE           shift and go to state 23
    IF              shift and go to state 24

    statement                      shift and go to state 135
    condition                      shift and go to state 20
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19

state 135

    (21) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    RCURLYBRACE     shift and go to state 136


state 136

    (21) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif seencurlyelse
    (22) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif ELSE condition seencurlyelse
    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (26) seencurlyif -> .

    ELSE            reduce using rule 26 (seencurlyif -> .)
    IDENTIFIER      reduce using rule 26 (seencurlyif -> .)
    PRINT           reduce using rule 26 (seencurlyif -> .)
    WRITE           reduce using rule 26 (seencurlyif -> .)
    IF              reduce using rule 26 (seencurlyif -> .)
    END             reduce using rule 26 (seencurlyif -> .)
    RCURLYBRACE     reduce using rule 26 (seencurlyif -> .)

    seencurlyif                    shift and go to state 137

state 137

    (21) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . seencurlyelse
    (22) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . ELSE condition seencurlyelse
    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (27) seencurlyelse -> .

    ELSE            shift and go to state 139
    IDENTIFIER      reduce using rule 27 (seencurlyelse -> .)
    PRINT           reduce using rule 27 (seencurlyelse -> .)
    WRITE           reduce using rule 27 (seencurlyelse -> .)
    IF              reduce using rule 27 (seencurlyelse -> .)
    END             reduce using rule 27 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 27 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 138

state 138

    (21) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .

    IDENTIFIER      reduce using rule 21 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    PRINT           reduce using rule 21 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    WRITE           reduce using rule 21 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    IF              reduce using rule 21 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    END             reduce using rule 21 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    RCURLYBRACE     reduce using rule 21 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)


state 139

    (22) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE . condition seencurlyelse
    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE . LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (21) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LCURLYBRACE     shift and go to state 140
    IF              shift and go to state 24

    condition                      shift and go to state 141

state 140

    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE . statement RCURLYBRACE seencurlyelse
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (67) empty -> .
    (28) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (65) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (66) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (21) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (22) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (23) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    RCURLYBRACE     reduce using rule 67 (empty -> .)
    IDENTIFIER      shift and go to state 21
    PRINT           shift and go to state 22
    WRITE           shift and go to state 23
    IF              shift and go to state 24

    statement                      shift and go to state 142
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20

state 141

    (22) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition . seencurlyelse
    (27) seencurlyelse -> .

    IDENTIFIER      reduce using rule 27 (seencurlyelse -> .)
    PRINT           reduce using rule 27 (seencurlyelse -> .)
    WRITE           reduce using rule 27 (seencurlyelse -> .)
    IF              reduce using rule 27 (seencurlyelse -> .)
    END             reduce using rule 27 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 27 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 143

state 142

    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement . RCURLYBRACE seencurlyelse

    RCURLYBRACE     shift and go to state 144


state 143

    (22) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .

    IDENTIFIER      reduce using rule 22 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    PRINT           reduce using rule 22 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    WRITE           reduce using rule 22 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    IF              reduce using rule 22 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    END             reduce using rule 22 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    RCURLYBRACE     reduce using rule 22 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)


state 144

    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE . seencurlyelse
    (27) seencurlyelse -> .

    IDENTIFIER      reduce using rule 27 (seencurlyelse -> .)
    PRINT           reduce using rule 27 (seencurlyelse -> .)
    WRITE           reduce using rule 27 (seencurlyelse -> .)
    IF              reduce using rule 27 (seencurlyelse -> .)
    END             reduce using rule 27 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 27 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 145

state 145

    (23) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .

    IDENTIFIER      reduce using rule 23 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    PRINT           reduce using rule 23 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    WRITE           reduce using rule 23 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    IF              reduce using rule 23 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    END             reduce using rule 23 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    RCURLYBRACE     reduce using rule 23 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 18 resolved using rule (statement -> assign)
WARNING: rejected rule (empty -> <empty>) in state 18
WARNING: reduce/reduce conflict in state 19 resolved using rule (statement -> writefunction)
WARNING: rejected rule (empty -> <empty>) in state 19
WARNING: reduce/reduce conflict in state 20 resolved using rule (statement -> condition)
WARNING: rejected rule (empty -> <empty>) in state 20
WARNING: reduce/reduce conflict in state 56 resolved using rule (vars -> VAR varsp COLON type seentype SEMICOLON)
WARNING: rejected rule (empty -> <empty>) in state 56
