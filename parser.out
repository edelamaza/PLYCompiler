Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHAR
    DO
    ELSE
    FALSE
    FOR
    IF
    LBRACKET
    NOT
    PERIOD
    RBRACKET
    THEN
    TRUE
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE
Rule 2     vars -> VAR varsp COLON type seentype SEMICOLON
Rule 3     vars -> VAR varsp COLON type seentype SEMICOLON vars
Rule 4     vars -> empty
Rule 5     varsp -> IDENTIFIER seenid
Rule 6     varsp -> IDENTIFIER seenid COMMA varsp
Rule 7     seenid -> <empty>
Rule 8     seentype -> <empty>
Rule 9     type -> INT
Rule 10    type -> REAL
Rule 11    type -> STRING
Rule 12    type -> BOOLEAN
Rule 13    block -> BEGIN SEMICOLON statement END SEMICOLON
Rule 14    statement -> empty
Rule 15    statement -> assign
Rule 16    statement -> assign statement
Rule 17    statement -> writefunction
Rule 18    statement -> writefunction statement
Rule 19    assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
Rule 20    assignnow -> <empty>
Rule 21    expression -> simpleexpression
Rule 22    expression -> simpleexpression LESS_THAN simpleexpression
Rule 23    expression -> simpleexpression LESS_THAN_EQUALS simpleexpression
Rule 24    expression -> simpleexpression GREATER_THAN simpleexpression
Rule 25    expression -> simpleexpression GREATER_THAN_EQUALS simpleexpression
Rule 26    expression -> simpleexpression NOT_EQUALS simpleexpression
Rule 27    expression -> simpleexpression EQUALS simpleexpression
Rule 28    simpleexpression -> term
Rule 29    simpleexpression -> term PLUS simpleexpression
Rule 30    simpleexpression -> term MINUS simpleexpression
Rule 31    simpleexpression -> term OR simpleexpression
Rule 32    term -> factor
Rule 33    term -> factor DIV term
Rule 34    term -> factor MULTIPLY term
Rule 35    term -> factor DIVIDE term
Rule 36    term -> factor MOD term
Rule 37    term -> factor AND term
Rule 38    term -> factor PLUSPLUS
Rule 39    term -> factor MINUSMINUS
Rule 40    factor -> const
Rule 41    factor -> LPAREN expression RPAREN
Rule 42    const -> PLUS IDENTIFIER
Rule 43    const -> MINUS IDENTIFIER
Rule 44    const -> IDENTIFIER
Rule 45    const -> PLUS NUMBER_CONST
Rule 46    const -> MINUS NUMBER_CONST
Rule 47    const -> NUMBER_CONST
Rule 48    const -> STRING_CONST
Rule 49    writefunction -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 50    writefunction -> WRITE LPAREN expression RPAREN SEMICOLON
Rule 51    empty -> <empty>

Terminals, with rules where they appear

AND                  : 37
ASSIGNOP             : 19
BEGIN                : 13
BOOLEAN              : 12
CHAR                 : 
COLON                : 2 3
COMMA                : 6
DIV                  : 33
DIVIDE               : 35
DO                   : 
ELSE                 : 
END                  : 13
EQUALS               : 27
FALSE                : 
FOR                  : 
GREATER_THAN         : 24
GREATER_THAN_EQUALS  : 25
IDENTIFIER           : 1 5 6 19 42 43 44
IF                   : 
INT                  : 9
LBRACKET             : 
LCURLYBRACE          : 1
LESS_THAN            : 22
LESS_THAN_EQUALS     : 23
LPAREN               : 41 49 50
MINUS                : 30 43 46
MINUSMINUS           : 39
MOD                  : 36
MULTIPLY             : 34
NOT                  : 
NOT_EQUALS           : 26
NUMBER_CONST         : 45 46 47
OR                   : 31
PERIOD               : 
PLUS                 : 29 42 45
PLUSPLUS             : 38
PRINT                : 49
PROGRAM              : 1
RBRACKET             : 
RCURLYBRACE          : 1
REAL                 : 10
RPAREN               : 41 49 50
SEMICOLON            : 2 3 13 13 19 49 50
STRING               : 11
STRING_CONST         : 48
THEN                 : 
TRUE                 : 
VAR                  : 2 3
WHILE                : 
WRITE                : 50
error                : 

Nonterminals, with rules where they appear

assign               : 15 16
assignnow            : 19
block                : 1
const                : 40
empty                : 4 14
expression           : 19 41 49 50
factor               : 32 33 34 35 36 37 38 39
program              : 0
seenid               : 5 6
seentype             : 2 3
simpleexpression     : 21 22 22 23 23 24 24 25 25 26 26 27 27 29 30 31
statement            : 13 16 18
term                 : 28 29 30 31 33 34 35 36 37
type                 : 2 3
vars                 : 1 3
varsp                : 2 3 6
writefunction        : 17 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . IDENTIFIER LCURLYBRACE vars block RCURLYBRACE

    IDENTIFIER      shift and go to state 3


state 3

    (1) program -> PROGRAM IDENTIFIER . LCURLYBRACE vars block RCURLYBRACE

    LCURLYBRACE     shift and go to state 4


state 4

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE . vars block RCURLYBRACE
    (2) vars -> . VAR varsp COLON type seentype SEMICOLON
    (3) vars -> . VAR varsp COLON type seentype SEMICOLON vars
    (4) vars -> . empty
    (51) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 51 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars . block RCURLYBRACE
    (13) block -> . BEGIN SEMICOLON statement END SEMICOLON

    BEGIN           shift and go to state 9

    block                          shift and go to state 8

state 6

    (2) vars -> VAR . varsp COLON type seentype SEMICOLON
    (3) vars -> VAR . varsp COLON type seentype SEMICOLON vars
    (5) varsp -> . IDENTIFIER seenid
    (6) varsp -> . IDENTIFIER seenid COMMA varsp

    IDENTIFIER      shift and go to state 11

    varsp                          shift and go to state 10

state 7

    (4) vars -> empty .

    BEGIN           reduce using rule 4 (vars -> empty .)


state 8

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars block . RCURLYBRACE

    RCURLYBRACE     shift and go to state 12


state 9

    (13) block -> BEGIN . SEMICOLON statement END SEMICOLON

    SEMICOLON       shift and go to state 13


state 10

    (2) vars -> VAR varsp . COLON type seentype SEMICOLON
    (3) vars -> VAR varsp . COLON type seentype SEMICOLON vars

    COLON           shift and go to state 14


state 11

    (5) varsp -> IDENTIFIER . seenid
    (6) varsp -> IDENTIFIER . seenid COMMA varsp
    (7) seenid -> .

    COMMA           reduce using rule 7 (seenid -> .)
    COLON           reduce using rule 7 (seenid -> .)

    seenid                         shift and go to state 15

state 12

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE .

    $end            reduce using rule 1 (program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE .)


state 13

    (13) block -> BEGIN SEMICOLON . statement END SEMICOLON
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (51) empty -> .
    (19) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (49) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (50) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON

    END             reduce using rule 51 (empty -> .)
    IDENTIFIER      shift and go to state 20
    PRINT           shift and go to state 21
    WRITE           shift and go to state 22

    statement                      shift and go to state 16
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19

state 14

    (2) vars -> VAR varsp COLON . type seentype SEMICOLON
    (3) vars -> VAR varsp COLON . type seentype SEMICOLON vars
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . STRING
    (12) type -> . BOOLEAN

    INT             shift and go to state 24
    REAL            shift and go to state 25
    STRING          shift and go to state 26
    BOOLEAN         shift and go to state 27

    type                           shift and go to state 23

state 15

    (5) varsp -> IDENTIFIER seenid .
    (6) varsp -> IDENTIFIER seenid . COMMA varsp

    COLON           reduce using rule 5 (varsp -> IDENTIFIER seenid .)
    COMMA           shift and go to state 28


state 16

    (13) block -> BEGIN SEMICOLON statement . END SEMICOLON

    END             shift and go to state 29


state 17

    (14) statement -> empty .

    END             reduce using rule 14 (statement -> empty .)


state 18

    (15) statement -> assign .
    (16) statement -> assign . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (51) empty -> .
    (19) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (49) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (50) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON

  ! reduce/reduce conflict for END resolved using rule 15 (statement -> assign .)
    END             reduce using rule 15 (statement -> assign .)
    IDENTIFIER      shift and go to state 20
    PRINT           shift and go to state 21
    WRITE           shift and go to state 22

  ! END             [ reduce using rule 51 (empty -> .) ]

    assign                         shift and go to state 18
    statement                      shift and go to state 30
    empty                          shift and go to state 17
    writefunction                  shift and go to state 19

state 19

    (17) statement -> writefunction .
    (18) statement -> writefunction . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (51) empty -> .
    (19) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (49) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (50) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON

  ! reduce/reduce conflict for END resolved using rule 17 (statement -> writefunction .)
    END             reduce using rule 17 (statement -> writefunction .)
    IDENTIFIER      shift and go to state 20
    PRINT           shift and go to state 21
    WRITE           shift and go to state 22

  ! END             [ reduce using rule 51 (empty -> .) ]

    writefunction                  shift and go to state 19
    statement                      shift and go to state 31
    empty                          shift and go to state 17
    assign                         shift and go to state 18

state 20

    (19) assign -> IDENTIFIER . ASSIGNOP expression assignnow SEMICOLON

    ASSIGNOP        shift and go to state 32


state 21

    (49) writefunction -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 33


state 22

    (50) writefunction -> WRITE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 34


state 23

    (2) vars -> VAR varsp COLON type . seentype SEMICOLON
    (3) vars -> VAR varsp COLON type . seentype SEMICOLON vars
    (8) seentype -> .

    SEMICOLON       reduce using rule 8 (seentype -> .)

    seentype                       shift and go to state 35

state 24

    (9) type -> INT .

    SEMICOLON       reduce using rule 9 (type -> INT .)


state 25

    (10) type -> REAL .

    SEMICOLON       reduce using rule 10 (type -> REAL .)


state 26

    (11) type -> STRING .

    SEMICOLON       reduce using rule 11 (type -> STRING .)


state 27

    (12) type -> BOOLEAN .

    SEMICOLON       reduce using rule 12 (type -> BOOLEAN .)


state 28

    (6) varsp -> IDENTIFIER seenid COMMA . varsp
    (5) varsp -> . IDENTIFIER seenid
    (6) varsp -> . IDENTIFIER seenid COMMA varsp

    IDENTIFIER      shift and go to state 11

    varsp                          shift and go to state 36

state 29

    (13) block -> BEGIN SEMICOLON statement END . SEMICOLON

    SEMICOLON       shift and go to state 37


state 30

    (16) statement -> assign statement .

    END             reduce using rule 16 (statement -> assign statement .)


state 31

    (18) statement -> writefunction statement .

    END             reduce using rule 18 (statement -> writefunction statement .)


state 32

    (19) assign -> IDENTIFIER ASSIGNOP . expression assignnow SEMICOLON
    (21) expression -> . simpleexpression
    (22) expression -> . simpleexpression LESS_THAN simpleexpression
    (23) expression -> . simpleexpression LESS_THAN_EQUALS simpleexpression
    (24) expression -> . simpleexpression GREATER_THAN simpleexpression
    (25) expression -> . simpleexpression GREATER_THAN_EQUALS simpleexpression
    (26) expression -> . simpleexpression NOT_EQUALS simpleexpression
    (27) expression -> . simpleexpression EQUALS simpleexpression
    (28) simpleexpression -> . term
    (29) simpleexpression -> . term PLUS simpleexpression
    (30) simpleexpression -> . term MINUS simpleexpression
    (31) simpleexpression -> . term OR simpleexpression
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    expression                     shift and go to state 39
    simpleexpression               shift and go to state 40
    term                           shift and go to state 41
    factor                         shift and go to state 44
    const                          shift and go to state 45

state 33

    (49) writefunction -> PRINT LPAREN . expression RPAREN SEMICOLON
    (21) expression -> . simpleexpression
    (22) expression -> . simpleexpression LESS_THAN simpleexpression
    (23) expression -> . simpleexpression LESS_THAN_EQUALS simpleexpression
    (24) expression -> . simpleexpression GREATER_THAN simpleexpression
    (25) expression -> . simpleexpression GREATER_THAN_EQUALS simpleexpression
    (26) expression -> . simpleexpression NOT_EQUALS simpleexpression
    (27) expression -> . simpleexpression EQUALS simpleexpression
    (28) simpleexpression -> . term
    (29) simpleexpression -> . term PLUS simpleexpression
    (30) simpleexpression -> . term MINUS simpleexpression
    (31) simpleexpression -> . term OR simpleexpression
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    expression                     shift and go to state 49
    simpleexpression               shift and go to state 40
    term                           shift and go to state 41
    factor                         shift and go to state 44
    const                          shift and go to state 45

state 34

    (50) writefunction -> WRITE LPAREN . expression RPAREN SEMICOLON
    (21) expression -> . simpleexpression
    (22) expression -> . simpleexpression LESS_THAN simpleexpression
    (23) expression -> . simpleexpression LESS_THAN_EQUALS simpleexpression
    (24) expression -> . simpleexpression GREATER_THAN simpleexpression
    (25) expression -> . simpleexpression GREATER_THAN_EQUALS simpleexpression
    (26) expression -> . simpleexpression NOT_EQUALS simpleexpression
    (27) expression -> . simpleexpression EQUALS simpleexpression
    (28) simpleexpression -> . term
    (29) simpleexpression -> . term PLUS simpleexpression
    (30) simpleexpression -> . term MINUS simpleexpression
    (31) simpleexpression -> . term OR simpleexpression
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    expression                     shift and go to state 50
    simpleexpression               shift and go to state 40
    term                           shift and go to state 41
    factor                         shift and go to state 44
    const                          shift and go to state 45

state 35

    (2) vars -> VAR varsp COLON type seentype . SEMICOLON
    (3) vars -> VAR varsp COLON type seentype . SEMICOLON vars

    SEMICOLON       shift and go to state 51


state 36

    (6) varsp -> IDENTIFIER seenid COMMA varsp .

    COLON           reduce using rule 6 (varsp -> IDENTIFIER seenid COMMA varsp .)


state 37

    (13) block -> BEGIN SEMICOLON statement END SEMICOLON .

    RCURLYBRACE     reduce using rule 13 (block -> BEGIN SEMICOLON statement END SEMICOLON .)


state 38

    (44) const -> IDENTIFIER .

    DIV             reduce using rule 44 (const -> IDENTIFIER .)
    MULTIPLY        reduce using rule 44 (const -> IDENTIFIER .)
    DIVIDE          reduce using rule 44 (const -> IDENTIFIER .)
    MOD             reduce using rule 44 (const -> IDENTIFIER .)
    AND             reduce using rule 44 (const -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 44 (const -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 44 (const -> IDENTIFIER .)
    PLUS            reduce using rule 44 (const -> IDENTIFIER .)
    MINUS           reduce using rule 44 (const -> IDENTIFIER .)
    OR              reduce using rule 44 (const -> IDENTIFIER .)
    LESS_THAN       reduce using rule 44 (const -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 44 (const -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 44 (const -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 44 (const -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 44 (const -> IDENTIFIER .)
    EQUALS          reduce using rule 44 (const -> IDENTIFIER .)
    SEMICOLON       reduce using rule 44 (const -> IDENTIFIER .)
    RPAREN          reduce using rule 44 (const -> IDENTIFIER .)


state 39

    (19) assign -> IDENTIFIER ASSIGNOP expression . assignnow SEMICOLON
    (20) assignnow -> .

    SEMICOLON       reduce using rule 20 (assignnow -> .)

    assignnow                      shift and go to state 52

state 40

    (21) expression -> simpleexpression .
    (22) expression -> simpleexpression . LESS_THAN simpleexpression
    (23) expression -> simpleexpression . LESS_THAN_EQUALS simpleexpression
    (24) expression -> simpleexpression . GREATER_THAN simpleexpression
    (25) expression -> simpleexpression . GREATER_THAN_EQUALS simpleexpression
    (26) expression -> simpleexpression . NOT_EQUALS simpleexpression
    (27) expression -> simpleexpression . EQUALS simpleexpression

    SEMICOLON       reduce using rule 21 (expression -> simpleexpression .)
    RPAREN          reduce using rule 21 (expression -> simpleexpression .)
    LESS_THAN       shift and go to state 53
    LESS_THAN_EQUALS shift and go to state 54
    GREATER_THAN    shift and go to state 55
    GREATER_THAN_EQUALS shift and go to state 56
    NOT_EQUALS      shift and go to state 57
    EQUALS          shift and go to state 58


state 41

    (28) simpleexpression -> term .
    (29) simpleexpression -> term . PLUS simpleexpression
    (30) simpleexpression -> term . MINUS simpleexpression
    (31) simpleexpression -> term . OR simpleexpression

    LESS_THAN       reduce using rule 28 (simpleexpression -> term .)
    LESS_THAN_EQUALS reduce using rule 28 (simpleexpression -> term .)
    GREATER_THAN    reduce using rule 28 (simpleexpression -> term .)
    GREATER_THAN_EQUALS reduce using rule 28 (simpleexpression -> term .)
    NOT_EQUALS      reduce using rule 28 (simpleexpression -> term .)
    EQUALS          reduce using rule 28 (simpleexpression -> term .)
    SEMICOLON       reduce using rule 28 (simpleexpression -> term .)
    RPAREN          reduce using rule 28 (simpleexpression -> term .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    OR              shift and go to state 61


state 42

    (42) const -> PLUS . IDENTIFIER
    (45) const -> PLUS . NUMBER_CONST

    IDENTIFIER      shift and go to state 62
    NUMBER_CONST    shift and go to state 63


state 43

    (43) const -> MINUS . IDENTIFIER
    (46) const -> MINUS . NUMBER_CONST

    IDENTIFIER      shift and go to state 64
    NUMBER_CONST    shift and go to state 65


state 44

    (32) term -> factor .
    (33) term -> factor . DIV term
    (34) term -> factor . MULTIPLY term
    (35) term -> factor . DIVIDE term
    (36) term -> factor . MOD term
    (37) term -> factor . AND term
    (38) term -> factor . PLUSPLUS
    (39) term -> factor . MINUSMINUS

    PLUS            reduce using rule 32 (term -> factor .)
    MINUS           reduce using rule 32 (term -> factor .)
    OR              reduce using rule 32 (term -> factor .)
    LESS_THAN       reduce using rule 32 (term -> factor .)
    LESS_THAN_EQUALS reduce using rule 32 (term -> factor .)
    GREATER_THAN    reduce using rule 32 (term -> factor .)
    GREATER_THAN_EQUALS reduce using rule 32 (term -> factor .)
    NOT_EQUALS      reduce using rule 32 (term -> factor .)
    EQUALS          reduce using rule 32 (term -> factor .)
    SEMICOLON       reduce using rule 32 (term -> factor .)
    RPAREN          reduce using rule 32 (term -> factor .)
    DIV             shift and go to state 66
    MULTIPLY        shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69
    AND             shift and go to state 70
    PLUSPLUS        shift and go to state 71
    MINUSMINUS      shift and go to state 72


state 45

    (40) factor -> const .

    DIV             reduce using rule 40 (factor -> const .)
    MULTIPLY        reduce using rule 40 (factor -> const .)
    DIVIDE          reduce using rule 40 (factor -> const .)
    MOD             reduce using rule 40 (factor -> const .)
    AND             reduce using rule 40 (factor -> const .)
    PLUSPLUS        reduce using rule 40 (factor -> const .)
    MINUSMINUS      reduce using rule 40 (factor -> const .)
    PLUS            reduce using rule 40 (factor -> const .)
    MINUS           reduce using rule 40 (factor -> const .)
    OR              reduce using rule 40 (factor -> const .)
    LESS_THAN       reduce using rule 40 (factor -> const .)
    LESS_THAN_EQUALS reduce using rule 40 (factor -> const .)
    GREATER_THAN    reduce using rule 40 (factor -> const .)
    GREATER_THAN_EQUALS reduce using rule 40 (factor -> const .)
    NOT_EQUALS      reduce using rule 40 (factor -> const .)
    EQUALS          reduce using rule 40 (factor -> const .)
    SEMICOLON       reduce using rule 40 (factor -> const .)
    RPAREN          reduce using rule 40 (factor -> const .)


state 46

    (41) factor -> LPAREN . expression RPAREN
    (21) expression -> . simpleexpression
    (22) expression -> . simpleexpression LESS_THAN simpleexpression
    (23) expression -> . simpleexpression LESS_THAN_EQUALS simpleexpression
    (24) expression -> . simpleexpression GREATER_THAN simpleexpression
    (25) expression -> . simpleexpression GREATER_THAN_EQUALS simpleexpression
    (26) expression -> . simpleexpression NOT_EQUALS simpleexpression
    (27) expression -> . simpleexpression EQUALS simpleexpression
    (28) simpleexpression -> . term
    (29) simpleexpression -> . term PLUS simpleexpression
    (30) simpleexpression -> . term MINUS simpleexpression
    (31) simpleexpression -> . term OR simpleexpression
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    expression                     shift and go to state 73
    simpleexpression               shift and go to state 40
    term                           shift and go to state 41
    factor                         shift and go to state 44
    const                          shift and go to state 45

state 47

    (47) const -> NUMBER_CONST .

    DIV             reduce using rule 47 (const -> NUMBER_CONST .)
    MULTIPLY        reduce using rule 47 (const -> NUMBER_CONST .)
    DIVIDE          reduce using rule 47 (const -> NUMBER_CONST .)
    MOD             reduce using rule 47 (const -> NUMBER_CONST .)
    AND             reduce using rule 47 (const -> NUMBER_CONST .)
    PLUSPLUS        reduce using rule 47 (const -> NUMBER_CONST .)
    MINUSMINUS      reduce using rule 47 (const -> NUMBER_CONST .)
    PLUS            reduce using rule 47 (const -> NUMBER_CONST .)
    MINUS           reduce using rule 47 (const -> NUMBER_CONST .)
    OR              reduce using rule 47 (const -> NUMBER_CONST .)
    LESS_THAN       reduce using rule 47 (const -> NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 47 (const -> NUMBER_CONST .)
    GREATER_THAN    reduce using rule 47 (const -> NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 47 (const -> NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 47 (const -> NUMBER_CONST .)
    EQUALS          reduce using rule 47 (const -> NUMBER_CONST .)
    SEMICOLON       reduce using rule 47 (const -> NUMBER_CONST .)
    RPAREN          reduce using rule 47 (const -> NUMBER_CONST .)


state 48

    (48) const -> STRING_CONST .

    DIV             reduce using rule 48 (const -> STRING_CONST .)
    MULTIPLY        reduce using rule 48 (const -> STRING_CONST .)
    DIVIDE          reduce using rule 48 (const -> STRING_CONST .)
    MOD             reduce using rule 48 (const -> STRING_CONST .)
    AND             reduce using rule 48 (const -> STRING_CONST .)
    PLUSPLUS        reduce using rule 48 (const -> STRING_CONST .)
    MINUSMINUS      reduce using rule 48 (const -> STRING_CONST .)
    PLUS            reduce using rule 48 (const -> STRING_CONST .)
    MINUS           reduce using rule 48 (const -> STRING_CONST .)
    OR              reduce using rule 48 (const -> STRING_CONST .)
    LESS_THAN       reduce using rule 48 (const -> STRING_CONST .)
    LESS_THAN_EQUALS reduce using rule 48 (const -> STRING_CONST .)
    GREATER_THAN    reduce using rule 48 (const -> STRING_CONST .)
    GREATER_THAN_EQUALS reduce using rule 48 (const -> STRING_CONST .)
    NOT_EQUALS      reduce using rule 48 (const -> STRING_CONST .)
    EQUALS          reduce using rule 48 (const -> STRING_CONST .)
    SEMICOLON       reduce using rule 48 (const -> STRING_CONST .)
    RPAREN          reduce using rule 48 (const -> STRING_CONST .)


state 49

    (49) writefunction -> PRINT LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 74


state 50

    (50) writefunction -> WRITE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 75


state 51

    (2) vars -> VAR varsp COLON type seentype SEMICOLON .
    (3) vars -> VAR varsp COLON type seentype SEMICOLON . vars
    (2) vars -> . VAR varsp COLON type seentype SEMICOLON
    (3) vars -> . VAR varsp COLON type seentype SEMICOLON vars
    (4) vars -> . empty
    (51) empty -> .

  ! reduce/reduce conflict for BEGIN resolved using rule 2 (vars -> VAR varsp COLON type seentype SEMICOLON .)
    BEGIN           reduce using rule 2 (vars -> VAR varsp COLON type seentype SEMICOLON .)
    VAR             shift and go to state 6

  ! BEGIN           [ reduce using rule 51 (empty -> .) ]

    vars                           shift and go to state 76
    empty                          shift and go to state 7

state 52

    (19) assign -> IDENTIFIER ASSIGNOP expression assignnow . SEMICOLON

    SEMICOLON       shift and go to state 77


state 53

    (22) expression -> simpleexpression LESS_THAN . simpleexpression
    (28) simpleexpression -> . term
    (29) simpleexpression -> . term PLUS simpleexpression
    (30) simpleexpression -> . term MINUS simpleexpression
    (31) simpleexpression -> . term OR simpleexpression
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    simpleexpression               shift and go to state 78
    term                           shift and go to state 41
    factor                         shift and go to state 44
    const                          shift and go to state 45

state 54

    (23) expression -> simpleexpression LESS_THAN_EQUALS . simpleexpression
    (28) simpleexpression -> . term
    (29) simpleexpression -> . term PLUS simpleexpression
    (30) simpleexpression -> . term MINUS simpleexpression
    (31) simpleexpression -> . term OR simpleexpression
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    simpleexpression               shift and go to state 79
    term                           shift and go to state 41
    factor                         shift and go to state 44
    const                          shift and go to state 45

state 55

    (24) expression -> simpleexpression GREATER_THAN . simpleexpression
    (28) simpleexpression -> . term
    (29) simpleexpression -> . term PLUS simpleexpression
    (30) simpleexpression -> . term MINUS simpleexpression
    (31) simpleexpression -> . term OR simpleexpression
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    simpleexpression               shift and go to state 80
    term                           shift and go to state 41
    factor                         shift and go to state 44
    const                          shift and go to state 45

state 56

    (25) expression -> simpleexpression GREATER_THAN_EQUALS . simpleexpression
    (28) simpleexpression -> . term
    (29) simpleexpression -> . term PLUS simpleexpression
    (30) simpleexpression -> . term MINUS simpleexpression
    (31) simpleexpression -> . term OR simpleexpression
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    simpleexpression               shift and go to state 81
    term                           shift and go to state 41
    factor                         shift and go to state 44
    const                          shift and go to state 45

state 57

    (26) expression -> simpleexpression NOT_EQUALS . simpleexpression
    (28) simpleexpression -> . term
    (29) simpleexpression -> . term PLUS simpleexpression
    (30) simpleexpression -> . term MINUS simpleexpression
    (31) simpleexpression -> . term OR simpleexpression
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    simpleexpression               shift and go to state 82
    term                           shift and go to state 41
    factor                         shift and go to state 44
    const                          shift and go to state 45

state 58

    (27) expression -> simpleexpression EQUALS . simpleexpression
    (28) simpleexpression -> . term
    (29) simpleexpression -> . term PLUS simpleexpression
    (30) simpleexpression -> . term MINUS simpleexpression
    (31) simpleexpression -> . term OR simpleexpression
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    simpleexpression               shift and go to state 83
    term                           shift and go to state 41
    factor                         shift and go to state 44
    const                          shift and go to state 45

state 59

    (29) simpleexpression -> term PLUS . simpleexpression
    (28) simpleexpression -> . term
    (29) simpleexpression -> . term PLUS simpleexpression
    (30) simpleexpression -> . term MINUS simpleexpression
    (31) simpleexpression -> . term OR simpleexpression
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    term                           shift and go to state 41
    simpleexpression               shift and go to state 84
    factor                         shift and go to state 44
    const                          shift and go to state 45

state 60

    (30) simpleexpression -> term MINUS . simpleexpression
    (28) simpleexpression -> . term
    (29) simpleexpression -> . term PLUS simpleexpression
    (30) simpleexpression -> . term MINUS simpleexpression
    (31) simpleexpression -> . term OR simpleexpression
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    term                           shift and go to state 41
    simpleexpression               shift and go to state 85
    factor                         shift and go to state 44
    const                          shift and go to state 45

state 61

    (31) simpleexpression -> term OR . simpleexpression
    (28) simpleexpression -> . term
    (29) simpleexpression -> . term PLUS simpleexpression
    (30) simpleexpression -> . term MINUS simpleexpression
    (31) simpleexpression -> . term OR simpleexpression
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    term                           shift and go to state 41
    simpleexpression               shift and go to state 86
    factor                         shift and go to state 44
    const                          shift and go to state 45

state 62

    (42) const -> PLUS IDENTIFIER .

    DIV             reduce using rule 42 (const -> PLUS IDENTIFIER .)
    MULTIPLY        reduce using rule 42 (const -> PLUS IDENTIFIER .)
    DIVIDE          reduce using rule 42 (const -> PLUS IDENTIFIER .)
    MOD             reduce using rule 42 (const -> PLUS IDENTIFIER .)
    AND             reduce using rule 42 (const -> PLUS IDENTIFIER .)
    PLUSPLUS        reduce using rule 42 (const -> PLUS IDENTIFIER .)
    MINUSMINUS      reduce using rule 42 (const -> PLUS IDENTIFIER .)
    PLUS            reduce using rule 42 (const -> PLUS IDENTIFIER .)
    MINUS           reduce using rule 42 (const -> PLUS IDENTIFIER .)
    OR              reduce using rule 42 (const -> PLUS IDENTIFIER .)
    LESS_THAN       reduce using rule 42 (const -> PLUS IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 42 (const -> PLUS IDENTIFIER .)
    GREATER_THAN    reduce using rule 42 (const -> PLUS IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 42 (const -> PLUS IDENTIFIER .)
    NOT_EQUALS      reduce using rule 42 (const -> PLUS IDENTIFIER .)
    EQUALS          reduce using rule 42 (const -> PLUS IDENTIFIER .)
    SEMICOLON       reduce using rule 42 (const -> PLUS IDENTIFIER .)
    RPAREN          reduce using rule 42 (const -> PLUS IDENTIFIER .)


state 63

    (45) const -> PLUS NUMBER_CONST .

    DIV             reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    MULTIPLY        reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    DIVIDE          reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    MOD             reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    AND             reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    PLUSPLUS        reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    MINUSMINUS      reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    PLUS            reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    MINUS           reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    OR              reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    LESS_THAN       reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    GREATER_THAN    reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    EQUALS          reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    SEMICOLON       reduce using rule 45 (const -> PLUS NUMBER_CONST .)
    RPAREN          reduce using rule 45 (const -> PLUS NUMBER_CONST .)


state 64

    (43) const -> MINUS IDENTIFIER .

    DIV             reduce using rule 43 (const -> MINUS IDENTIFIER .)
    MULTIPLY        reduce using rule 43 (const -> MINUS IDENTIFIER .)
    DIVIDE          reduce using rule 43 (const -> MINUS IDENTIFIER .)
    MOD             reduce using rule 43 (const -> MINUS IDENTIFIER .)
    AND             reduce using rule 43 (const -> MINUS IDENTIFIER .)
    PLUSPLUS        reduce using rule 43 (const -> MINUS IDENTIFIER .)
    MINUSMINUS      reduce using rule 43 (const -> MINUS IDENTIFIER .)
    PLUS            reduce using rule 43 (const -> MINUS IDENTIFIER .)
    MINUS           reduce using rule 43 (const -> MINUS IDENTIFIER .)
    OR              reduce using rule 43 (const -> MINUS IDENTIFIER .)
    LESS_THAN       reduce using rule 43 (const -> MINUS IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 43 (const -> MINUS IDENTIFIER .)
    GREATER_THAN    reduce using rule 43 (const -> MINUS IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 43 (const -> MINUS IDENTIFIER .)
    NOT_EQUALS      reduce using rule 43 (const -> MINUS IDENTIFIER .)
    EQUALS          reduce using rule 43 (const -> MINUS IDENTIFIER .)
    SEMICOLON       reduce using rule 43 (const -> MINUS IDENTIFIER .)
    RPAREN          reduce using rule 43 (const -> MINUS IDENTIFIER .)


state 65

    (46) const -> MINUS NUMBER_CONST .

    DIV             reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    MULTIPLY        reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    DIVIDE          reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    MOD             reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    AND             reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    PLUSPLUS        reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    MINUSMINUS      reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    PLUS            reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    MINUS           reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    OR              reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    LESS_THAN       reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    GREATER_THAN    reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    EQUALS          reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    SEMICOLON       reduce using rule 46 (const -> MINUS NUMBER_CONST .)
    RPAREN          reduce using rule 46 (const -> MINUS NUMBER_CONST .)


state 66

    (33) term -> factor DIV . term
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    factor                         shift and go to state 44
    term                           shift and go to state 87
    const                          shift and go to state 45

state 67

    (34) term -> factor MULTIPLY . term
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    factor                         shift and go to state 44
    term                           shift and go to state 88
    const                          shift and go to state 45

state 68

    (35) term -> factor DIVIDE . term
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    factor                         shift and go to state 44
    term                           shift and go to state 89
    const                          shift and go to state 45

state 69

    (36) term -> factor MOD . term
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    factor                         shift and go to state 44
    term                           shift and go to state 90
    const                          shift and go to state 45

state 70

    (37) term -> factor AND . term
    (32) term -> . factor
    (33) term -> . factor DIV term
    (34) term -> . factor MULTIPLY term
    (35) term -> . factor DIVIDE term
    (36) term -> . factor MOD term
    (37) term -> . factor AND term
    (38) term -> . factor PLUSPLUS
    (39) term -> . factor MINUSMINUS
    (40) factor -> . const
    (41) factor -> . LPAREN expression RPAREN
    (42) const -> . PLUS IDENTIFIER
    (43) const -> . MINUS IDENTIFIER
    (44) const -> . IDENTIFIER
    (45) const -> . PLUS NUMBER_CONST
    (46) const -> . MINUS NUMBER_CONST
    (47) const -> . NUMBER_CONST
    (48) const -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 38
    NUMBER_CONST    shift and go to state 47
    STRING_CONST    shift and go to state 48

    factor                         shift and go to state 44
    term                           shift and go to state 91
    const                          shift and go to state 45

state 71

    (38) term -> factor PLUSPLUS .

    PLUS            reduce using rule 38 (term -> factor PLUSPLUS .)
    MINUS           reduce using rule 38 (term -> factor PLUSPLUS .)
    OR              reduce using rule 38 (term -> factor PLUSPLUS .)
    LESS_THAN       reduce using rule 38 (term -> factor PLUSPLUS .)
    LESS_THAN_EQUALS reduce using rule 38 (term -> factor PLUSPLUS .)
    GREATER_THAN    reduce using rule 38 (term -> factor PLUSPLUS .)
    GREATER_THAN_EQUALS reduce using rule 38 (term -> factor PLUSPLUS .)
    NOT_EQUALS      reduce using rule 38 (term -> factor PLUSPLUS .)
    EQUALS          reduce using rule 38 (term -> factor PLUSPLUS .)
    SEMICOLON       reduce using rule 38 (term -> factor PLUSPLUS .)
    RPAREN          reduce using rule 38 (term -> factor PLUSPLUS .)


state 72

    (39) term -> factor MINUSMINUS .

    PLUS            reduce using rule 39 (term -> factor MINUSMINUS .)
    MINUS           reduce using rule 39 (term -> factor MINUSMINUS .)
    OR              reduce using rule 39 (term -> factor MINUSMINUS .)
    LESS_THAN       reduce using rule 39 (term -> factor MINUSMINUS .)
    LESS_THAN_EQUALS reduce using rule 39 (term -> factor MINUSMINUS .)
    GREATER_THAN    reduce using rule 39 (term -> factor MINUSMINUS .)
    GREATER_THAN_EQUALS reduce using rule 39 (term -> factor MINUSMINUS .)
    NOT_EQUALS      reduce using rule 39 (term -> factor MINUSMINUS .)
    EQUALS          reduce using rule 39 (term -> factor MINUSMINUS .)
    SEMICOLON       reduce using rule 39 (term -> factor MINUSMINUS .)
    RPAREN          reduce using rule 39 (term -> factor MINUSMINUS .)


state 73

    (41) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 92


state 74

    (49) writefunction -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 93


state 75

    (50) writefunction -> WRITE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 94


state 76

    (3) vars -> VAR varsp COLON type seentype SEMICOLON vars .

    BEGIN           reduce using rule 3 (vars -> VAR varsp COLON type seentype SEMICOLON vars .)


state 77

    (19) assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .

    IDENTIFIER      reduce using rule 19 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    PRINT           reduce using rule 19 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    WRITE           reduce using rule 19 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    END             reduce using rule 19 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)


state 78

    (22) expression -> simpleexpression LESS_THAN simpleexpression .

    SEMICOLON       reduce using rule 22 (expression -> simpleexpression LESS_THAN simpleexpression .)
    RPAREN          reduce using rule 22 (expression -> simpleexpression LESS_THAN simpleexpression .)


state 79

    (23) expression -> simpleexpression LESS_THAN_EQUALS simpleexpression .

    SEMICOLON       reduce using rule 23 (expression -> simpleexpression LESS_THAN_EQUALS simpleexpression .)
    RPAREN          reduce using rule 23 (expression -> simpleexpression LESS_THAN_EQUALS simpleexpression .)


state 80

    (24) expression -> simpleexpression GREATER_THAN simpleexpression .

    SEMICOLON       reduce using rule 24 (expression -> simpleexpression GREATER_THAN simpleexpression .)
    RPAREN          reduce using rule 24 (expression -> simpleexpression GREATER_THAN simpleexpression .)


state 81

    (25) expression -> simpleexpression GREATER_THAN_EQUALS simpleexpression .

    SEMICOLON       reduce using rule 25 (expression -> simpleexpression GREATER_THAN_EQUALS simpleexpression .)
    RPAREN          reduce using rule 25 (expression -> simpleexpression GREATER_THAN_EQUALS simpleexpression .)


state 82

    (26) expression -> simpleexpression NOT_EQUALS simpleexpression .

    SEMICOLON       reduce using rule 26 (expression -> simpleexpression NOT_EQUALS simpleexpression .)
    RPAREN          reduce using rule 26 (expression -> simpleexpression NOT_EQUALS simpleexpression .)


state 83

    (27) expression -> simpleexpression EQUALS simpleexpression .

    SEMICOLON       reduce using rule 27 (expression -> simpleexpression EQUALS simpleexpression .)
    RPAREN          reduce using rule 27 (expression -> simpleexpression EQUALS simpleexpression .)


state 84

    (29) simpleexpression -> term PLUS simpleexpression .

    LESS_THAN       reduce using rule 29 (simpleexpression -> term PLUS simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 29 (simpleexpression -> term PLUS simpleexpression .)
    GREATER_THAN    reduce using rule 29 (simpleexpression -> term PLUS simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 29 (simpleexpression -> term PLUS simpleexpression .)
    NOT_EQUALS      reduce using rule 29 (simpleexpression -> term PLUS simpleexpression .)
    EQUALS          reduce using rule 29 (simpleexpression -> term PLUS simpleexpression .)
    SEMICOLON       reduce using rule 29 (simpleexpression -> term PLUS simpleexpression .)
    RPAREN          reduce using rule 29 (simpleexpression -> term PLUS simpleexpression .)


state 85

    (30) simpleexpression -> term MINUS simpleexpression .

    LESS_THAN       reduce using rule 30 (simpleexpression -> term MINUS simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 30 (simpleexpression -> term MINUS simpleexpression .)
    GREATER_THAN    reduce using rule 30 (simpleexpression -> term MINUS simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 30 (simpleexpression -> term MINUS simpleexpression .)
    NOT_EQUALS      reduce using rule 30 (simpleexpression -> term MINUS simpleexpression .)
    EQUALS          reduce using rule 30 (simpleexpression -> term MINUS simpleexpression .)
    SEMICOLON       reduce using rule 30 (simpleexpression -> term MINUS simpleexpression .)
    RPAREN          reduce using rule 30 (simpleexpression -> term MINUS simpleexpression .)


state 86

    (31) simpleexpression -> term OR simpleexpression .

    LESS_THAN       reduce using rule 31 (simpleexpression -> term OR simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 31 (simpleexpression -> term OR simpleexpression .)
    GREATER_THAN    reduce using rule 31 (simpleexpression -> term OR simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 31 (simpleexpression -> term OR simpleexpression .)
    NOT_EQUALS      reduce using rule 31 (simpleexpression -> term OR simpleexpression .)
    EQUALS          reduce using rule 31 (simpleexpression -> term OR simpleexpression .)
    SEMICOLON       reduce using rule 31 (simpleexpression -> term OR simpleexpression .)
    RPAREN          reduce using rule 31 (simpleexpression -> term OR simpleexpression .)


state 87

    (33) term -> factor DIV term .

    PLUS            reduce using rule 33 (term -> factor DIV term .)
    MINUS           reduce using rule 33 (term -> factor DIV term .)
    OR              reduce using rule 33 (term -> factor DIV term .)
    LESS_THAN       reduce using rule 33 (term -> factor DIV term .)
    LESS_THAN_EQUALS reduce using rule 33 (term -> factor DIV term .)
    GREATER_THAN    reduce using rule 33 (term -> factor DIV term .)
    GREATER_THAN_EQUALS reduce using rule 33 (term -> factor DIV term .)
    NOT_EQUALS      reduce using rule 33 (term -> factor DIV term .)
    EQUALS          reduce using rule 33 (term -> factor DIV term .)
    SEMICOLON       reduce using rule 33 (term -> factor DIV term .)
    RPAREN          reduce using rule 33 (term -> factor DIV term .)


state 88

    (34) term -> factor MULTIPLY term .

    PLUS            reduce using rule 34 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 34 (term -> factor MULTIPLY term .)
    OR              reduce using rule 34 (term -> factor MULTIPLY term .)
    LESS_THAN       reduce using rule 34 (term -> factor MULTIPLY term .)
    LESS_THAN_EQUALS reduce using rule 34 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 34 (term -> factor MULTIPLY term .)
    GREATER_THAN_EQUALS reduce using rule 34 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 34 (term -> factor MULTIPLY term .)
    EQUALS          reduce using rule 34 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 34 (term -> factor MULTIPLY term .)
    RPAREN          reduce using rule 34 (term -> factor MULTIPLY term .)


state 89

    (35) term -> factor DIVIDE term .

    PLUS            reduce using rule 35 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 35 (term -> factor DIVIDE term .)
    OR              reduce using rule 35 (term -> factor DIVIDE term .)
    LESS_THAN       reduce using rule 35 (term -> factor DIVIDE term .)
    LESS_THAN_EQUALS reduce using rule 35 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 35 (term -> factor DIVIDE term .)
    GREATER_THAN_EQUALS reduce using rule 35 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 35 (term -> factor DIVIDE term .)
    EQUALS          reduce using rule 35 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 35 (term -> factor DIVIDE term .)
    RPAREN          reduce using rule 35 (term -> factor DIVIDE term .)


state 90

    (36) term -> factor MOD term .

    PLUS            reduce using rule 36 (term -> factor MOD term .)
    MINUS           reduce using rule 36 (term -> factor MOD term .)
    OR              reduce using rule 36 (term -> factor MOD term .)
    LESS_THAN       reduce using rule 36 (term -> factor MOD term .)
    LESS_THAN_EQUALS reduce using rule 36 (term -> factor MOD term .)
    GREATER_THAN    reduce using rule 36 (term -> factor MOD term .)
    GREATER_THAN_EQUALS reduce using rule 36 (term -> factor MOD term .)
    NOT_EQUALS      reduce using rule 36 (term -> factor MOD term .)
    EQUALS          reduce using rule 36 (term -> factor MOD term .)
    SEMICOLON       reduce using rule 36 (term -> factor MOD term .)
    RPAREN          reduce using rule 36 (term -> factor MOD term .)


state 91

    (37) term -> factor AND term .

    PLUS            reduce using rule 37 (term -> factor AND term .)
    MINUS           reduce using rule 37 (term -> factor AND term .)
    OR              reduce using rule 37 (term -> factor AND term .)
    LESS_THAN       reduce using rule 37 (term -> factor AND term .)
    LESS_THAN_EQUALS reduce using rule 37 (term -> factor AND term .)
    GREATER_THAN    reduce using rule 37 (term -> factor AND term .)
    GREATER_THAN_EQUALS reduce using rule 37 (term -> factor AND term .)
    NOT_EQUALS      reduce using rule 37 (term -> factor AND term .)
    EQUALS          reduce using rule 37 (term -> factor AND term .)
    SEMICOLON       reduce using rule 37 (term -> factor AND term .)
    RPAREN          reduce using rule 37 (term -> factor AND term .)


state 92

    (41) factor -> LPAREN expression RPAREN .

    DIV             reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    LESS_THAN_EQUALS reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN_EQUALS reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    NOT_EQUALS      reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 41 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 41 (factor -> LPAREN expression RPAREN .)


state 93

    (49) writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 49 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 49 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 49 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 49 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 94

    (50) writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 50 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 50 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 50 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 50 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 18 resolved using rule (statement -> assign)
WARNING: rejected rule (empty -> <empty>) in state 18
WARNING: reduce/reduce conflict in state 19 resolved using rule (statement -> writefunction)
WARNING: rejected rule (empty -> <empty>) in state 19
WARNING: reduce/reduce conflict in state 51 resolved using rule (vars -> VAR varsp COLON type seentype SEMICOLON)
WARNING: rejected rule (empty -> <empty>) in state 51
