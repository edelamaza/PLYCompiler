Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHAR
    FALSE
    LBRACKET
    NOT
    PERIOD
    RBRACKET
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE
Rule 2     vars -> VAR varsp COLON type seentype SEMICOLON
Rule 3     vars -> VAR varsp COLON type seentype SEMICOLON vars
Rule 4     vars -> empty
Rule 5     varsp -> IDENTIFIER seenid
Rule 6     varsp -> IDENTIFIER seenid COMMA varsp
Rule 7     seenid -> <empty>
Rule 8     seentype -> <empty>
Rule 9     type -> INT
Rule 10    type -> REAL
Rule 11    type -> STRING
Rule 12    type -> BOOLEAN
Rule 13    block -> BEGIN SEMICOLON statement END SEMICOLON
Rule 14    statement -> empty
Rule 15    statement -> assign
Rule 16    statement -> assign statement
Rule 17    statement -> writefunction
Rule 18    statement -> writefunction statement
Rule 19    statement -> condition
Rule 20    statement -> condition statement
Rule 21    statement -> while
Rule 22    statement -> while statement
Rule 23    statement -> for
Rule 24    statement -> for statement
Rule 25    statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON
Rule 26    statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON
Rule 27    statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
Rule 28    statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
Rule 29    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
Rule 30    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
Rule 31    condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
Rule 32    checkbool -> <empty>
Rule 33    seenif -> <empty>
Rule 34    seencurlyif -> <empty>
Rule 35    seencurlyelse -> <empty>
Rule 36    while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
Rule 37    seenwhile -> <empty>
Rule 38    seencurlywhile -> <empty>
Rule 39    for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
Rule 40    for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
Rule 41    seenboolfor -> <empty>
Rule 42    seenchangefor -> <empty>
Rule 43    seencurlyfor -> <empty>
Rule 44    assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
Rule 45    assignfor -> IDENTIFIER ASSIGNOP expression assignnow
Rule 46    assignnow -> <empty>
Rule 47    expression -> simpleexpression
Rule 48    expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad
Rule 49    expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
Rule 50    expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad
Rule 51    expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
Rule 52    expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
Rule 53    expression -> simpleexpression EQUALS seenoperator simpleexpression genquad
Rule 54    expression -> IDENTIFIER PLUSPLUS seenunary
Rule 55    expression -> IDENTIFIER MINUSMINUS seenunary
Rule 56    seenunary -> <empty>
Rule 57    simpleexpression -> term seenterm simpleexpressionp
Rule 58    seenterm -> <empty>
Rule 59    simpleexpressionp -> empty
Rule 60    simpleexpressionp -> PLUS seenoperator simpleexpression
Rule 61    simpleexpressionp -> MINUS seenoperator simpleexpression
Rule 62    simpleexpressionp -> OR seenoperator simpleexpression
Rule 63    term -> factor seenfactor termp
Rule 64    termp -> empty
Rule 65    termp -> MULTIPLY seenoperator term
Rule 66    termp -> DIV seenoperator term
Rule 67    termp -> DIVIDE seenoperator term
Rule 68    termp -> MOD seenoperator term
Rule 69    termp -> AND seenoperator term
Rule 70    termp -> PLUSPLUS seenoperator
Rule 71    termp -> MINUSMINUS seenoperator
Rule 72    seenoperator -> <empty>
Rule 73    seenfactor -> <empty>
Rule 74    genquad -> <empty>
Rule 75    factor -> const
Rule 76    factor -> LPAREN seenoperator expression RPAREN exitparen
Rule 77    exitparen -> <empty>
Rule 78    const -> PLUS IDENTIFIER
Rule 79    const -> MINUS IDENTIFIER
Rule 80    const -> IDENTIFIER
Rule 81    const -> PLUS NUMBER_CONST
Rule 82    const -> MINUS NUMBER_CONST
Rule 83    const -> NUMBER_CONST
Rule 84    const -> STRING_CONST
Rule 85    writefunction -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 86    writefunction -> WRITE LPAREN expression RPAREN SEMICOLON
Rule 87    empty -> <empty>

Terminals, with rules where they appear

AND                  : 69
ASSIGNOP             : 44 45
BEGIN                : 13
BOOLEAN              : 12
CHAR                 : 
COLON                : 2 3
COMMA                : 6
DIV                  : 66
DIVIDE               : 67
DO                   : 36
ELSE                 : 30 31
END                  : 13
EQUALS               : 53
FALSE                : 
FOR                  : 39 40
GREATER_THAN         : 50
GREATER_THAN_EQUALS  : 51
IDENTIFIER           : 1 5 6 25 26 27 28 44 45 54 55 78 79 80
IF                   : 29 30 31
INT                  : 9
LBRACKET             : 
LCURLYBRACE          : 1 29 30 31 31 36 39 40
LESS_THAN            : 48
LESS_THAN_EQUALS     : 49
LPAREN               : 29 30 31 36 39 40 76 85 86
MINUS                : 61 79 82
MINUSMINUS           : 26 28 55 71
MOD                  : 68
MULTIPLY             : 65
NOT                  : 
NOT_EQUALS           : 52
NUMBER_CONST         : 81 82 83
OR                   : 62
PERIOD               : 
PLUS                 : 60 78 81
PLUSPLUS             : 25 27 54 70
PRINT                : 85
PROGRAM              : 1
RBRACKET             : 
RCURLYBRACE          : 1 29 30 31 31 36 39 40
REAL                 : 10
RPAREN               : 29 30 31 36 39 40 76 85 86
SEMICOLON            : 2 3 13 13 25 26 27 28 39 40 44 85 86
STRING               : 11
STRING_CONST         : 84
THEN                 : 29 30 31
TRUE                 : 
VAR                  : 2 3
WHILE                : 36
WRITE                : 86
error                : 

Nonterminals, with rules where they appear

assign               : 15 16 39 40
assignfor            : 40
assignnow            : 44 45
block                : 1
checkbool            : 29 30 31 36 39 40
condition            : 19 20 30
const                : 75
empty                : 4 14 59 64
exitparen            : 76
expression           : 29 30 31 36 39 39 40 44 45 76 85 86
factor               : 63
for                  : 23 24
genquad              : 48 49 50 51 52 53
program              : 0
seenboolfor          : 39 40
seenchangefor        : 39 40
seencurlyelse        : 29 30 31
seencurlyfor         : 39 40
seencurlyif          : 29 30 31
seencurlywhile       : 36
seenfactor           : 63
seenid               : 5 6
seenif               : 29 30 31
seenoperator         : 48 49 50 51 52 53 60 61 62 65 66 67 68 69 70 71 76
seenterm             : 57
seentype             : 2 3
seenunary            : 25 26 27 28 54 55
seenwhile            : 36
simpleexpression     : 47 48 48 49 49 50 50 51 51 52 52 53 53 60 61 62
simpleexpressionp    : 57
statement            : 13 16 18 20 22 24 27 28 29 30 31 31 36 39 40
term                 : 57 65 66 67 68 69
termp                : 63
type                 : 2 3
vars                 : 1 3
varsp                : 2 3 6
while                : 21 22
writefunction        : 17 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . IDENTIFIER LCURLYBRACE vars block RCURLYBRACE

    IDENTIFIER      shift and go to state 3


state 3

    (1) program -> PROGRAM IDENTIFIER . LCURLYBRACE vars block RCURLYBRACE

    LCURLYBRACE     shift and go to state 4


state 4

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE . vars block RCURLYBRACE
    (2) vars -> . VAR varsp COLON type seentype SEMICOLON
    (3) vars -> . VAR varsp COLON type seentype SEMICOLON vars
    (4) vars -> . empty
    (87) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 87 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars . block RCURLYBRACE
    (13) block -> . BEGIN SEMICOLON statement END SEMICOLON

    BEGIN           shift and go to state 9

    block                          shift and go to state 8

state 6

    (2) vars -> VAR . varsp COLON type seentype SEMICOLON
    (3) vars -> VAR . varsp COLON type seentype SEMICOLON vars
    (5) varsp -> . IDENTIFIER seenid
    (6) varsp -> . IDENTIFIER seenid COMMA varsp

    IDENTIFIER      shift and go to state 11

    varsp                          shift and go to state 10

state 7

    (4) vars -> empty .

    BEGIN           reduce using rule 4 (vars -> empty .)


state 8

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars block . RCURLYBRACE

    RCURLYBRACE     shift and go to state 12


state 9

    (13) block -> BEGIN . SEMICOLON statement END SEMICOLON

    SEMICOLON       shift and go to state 13


state 10

    (2) vars -> VAR varsp . COLON type seentype SEMICOLON
    (3) vars -> VAR varsp . COLON type seentype SEMICOLON vars

    COLON           shift and go to state 14


state 11

    (5) varsp -> IDENTIFIER . seenid
    (6) varsp -> IDENTIFIER . seenid COMMA varsp
    (7) seenid -> .

    COMMA           reduce using rule 7 (seenid -> .)
    COLON           reduce using rule 7 (seenid -> .)

    seenid                         shift and go to state 15

state 12

    (1) program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE .

    $end            reduce using rule 1 (program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE .)


state 13

    (13) block -> BEGIN SEMICOLON . statement END SEMICOLON
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (27) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
    (87) empty -> .
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (85) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (86) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (36) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (39) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    IDENTIFIER      shift and go to state 23
    END             reduce using rule 87 (empty -> .)
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 16
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 14

    (2) vars -> VAR varsp COLON . type seentype SEMICOLON
    (3) vars -> VAR varsp COLON . type seentype SEMICOLON vars
    (9) type -> . INT
    (10) type -> . REAL
    (11) type -> . STRING
    (12) type -> . BOOLEAN

    INT             shift and go to state 30
    REAL            shift and go to state 31
    STRING          shift and go to state 32
    BOOLEAN         shift and go to state 33

    type                           shift and go to state 29

state 15

    (5) varsp -> IDENTIFIER seenid .
    (6) varsp -> IDENTIFIER seenid . COMMA varsp

    COLON           reduce using rule 5 (varsp -> IDENTIFIER seenid .)
    COMMA           shift and go to state 34


state 16

    (13) block -> BEGIN SEMICOLON statement . END SEMICOLON

    END             shift and go to state 35


state 17

    (14) statement -> empty .

    END             reduce using rule 14 (statement -> empty .)
    RCURLYBRACE     reduce using rule 14 (statement -> empty .)


state 18

    (15) statement -> assign .
    (16) statement -> assign . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (27) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
    (87) empty -> .
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (85) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (86) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (36) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (39) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 15 (statement -> assign .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 15 (statement -> assign .)
    END             reduce using rule 15 (statement -> assign .)
    RCURLYBRACE     reduce using rule 15 (statement -> assign .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 87 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 87 (empty -> .) ]

    assign                         shift and go to state 18
    statement                      shift and go to state 36
    empty                          shift and go to state 17
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 19

    (17) statement -> writefunction .
    (18) statement -> writefunction . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (27) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
    (87) empty -> .
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (85) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (86) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (36) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (39) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 17 (statement -> writefunction .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 17 (statement -> writefunction .)
    END             reduce using rule 17 (statement -> writefunction .)
    RCURLYBRACE     reduce using rule 17 (statement -> writefunction .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 87 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 87 (empty -> .) ]

    writefunction                  shift and go to state 19
    statement                      shift and go to state 37
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 20

    (19) statement -> condition .
    (20) statement -> condition . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (27) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
    (87) empty -> .
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (85) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (86) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (36) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (39) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 19 (statement -> condition .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 19 (statement -> condition .)
    END             reduce using rule 19 (statement -> condition .)
    RCURLYBRACE     reduce using rule 19 (statement -> condition .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 87 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 87 (empty -> .) ]

    condition                      shift and go to state 20
    statement                      shift and go to state 38
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    while                          shift and go to state 21
    for                            shift and go to state 22

state 21

    (21) statement -> while .
    (22) statement -> while . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (27) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
    (87) empty -> .
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (85) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (86) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (36) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (39) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 21 (statement -> while .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 21 (statement -> while .)
    END             reduce using rule 21 (statement -> while .)
    RCURLYBRACE     reduce using rule 21 (statement -> while .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 87 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 87 (empty -> .) ]

    while                          shift and go to state 21
    statement                      shift and go to state 39
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    for                            shift and go to state 22

state 22

    (23) statement -> for .
    (24) statement -> for . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (27) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
    (87) empty -> .
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (85) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (86) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (36) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (39) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 23 (statement -> for .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 23 (statement -> for .)
    END             reduce using rule 23 (statement -> for .)
    RCURLYBRACE     reduce using rule 23 (statement -> for .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 87 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 87 (empty -> .) ]

    for                            shift and go to state 22
    statement                      shift and go to state 40
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21

state 23

    (25) statement -> IDENTIFIER . PLUSPLUS seenunary SEMICOLON
    (26) statement -> IDENTIFIER . MINUSMINUS seenunary SEMICOLON
    (27) statement -> IDENTIFIER . PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> IDENTIFIER . MINUSMINUS seenunary SEMICOLON statement
    (44) assign -> IDENTIFIER . ASSIGNOP expression assignnow SEMICOLON

    PLUSPLUS        shift and go to state 41
    MINUSMINUS      shift and go to state 42
    ASSIGNOP        shift and go to state 43


state 24

    (85) writefunction -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 44


state 25

    (86) writefunction -> WRITE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 45


state 26

    (29) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> IF . LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LPAREN          shift and go to state 46


state 27

    (36) while -> WHILE . LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    LPAREN          shift and go to state 47


state 28

    (39) for -> FOR . LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> FOR . LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    LPAREN          shift and go to state 48


state 29

    (2) vars -> VAR varsp COLON type . seentype SEMICOLON
    (3) vars -> VAR varsp COLON type . seentype SEMICOLON vars
    (8) seentype -> .

    SEMICOLON       reduce using rule 8 (seentype -> .)

    seentype                       shift and go to state 49

state 30

    (9) type -> INT .

    SEMICOLON       reduce using rule 9 (type -> INT .)


state 31

    (10) type -> REAL .

    SEMICOLON       reduce using rule 10 (type -> REAL .)


state 32

    (11) type -> STRING .

    SEMICOLON       reduce using rule 11 (type -> STRING .)


state 33

    (12) type -> BOOLEAN .

    SEMICOLON       reduce using rule 12 (type -> BOOLEAN .)


state 34

    (6) varsp -> IDENTIFIER seenid COMMA . varsp
    (5) varsp -> . IDENTIFIER seenid
    (6) varsp -> . IDENTIFIER seenid COMMA varsp

    IDENTIFIER      shift and go to state 11

    varsp                          shift and go to state 50

state 35

    (13) block -> BEGIN SEMICOLON statement END . SEMICOLON

    SEMICOLON       shift and go to state 51


state 36

    (16) statement -> assign statement .

    END             reduce using rule 16 (statement -> assign statement .)
    RCURLYBRACE     reduce using rule 16 (statement -> assign statement .)


state 37

    (18) statement -> writefunction statement .

    END             reduce using rule 18 (statement -> writefunction statement .)
    RCURLYBRACE     reduce using rule 18 (statement -> writefunction statement .)


state 38

    (20) statement -> condition statement .

    END             reduce using rule 20 (statement -> condition statement .)
    RCURLYBRACE     reduce using rule 20 (statement -> condition statement .)


state 39

    (22) statement -> while statement .

    END             reduce using rule 22 (statement -> while statement .)
    RCURLYBRACE     reduce using rule 22 (statement -> while statement .)


state 40

    (24) statement -> for statement .

    END             reduce using rule 24 (statement -> for statement .)
    RCURLYBRACE     reduce using rule 24 (statement -> for statement .)


state 41

    (25) statement -> IDENTIFIER PLUSPLUS . seenunary SEMICOLON
    (27) statement -> IDENTIFIER PLUSPLUS . seenunary SEMICOLON statement
    (56) seenunary -> .

    SEMICOLON       reduce using rule 56 (seenunary -> .)

    seenunary                      shift and go to state 52

state 42

    (26) statement -> IDENTIFIER MINUSMINUS . seenunary SEMICOLON
    (28) statement -> IDENTIFIER MINUSMINUS . seenunary SEMICOLON statement
    (56) seenunary -> .

    SEMICOLON       reduce using rule 56 (seenunary -> .)

    seenunary                      shift and go to state 53

state 43

    (44) assign -> IDENTIFIER ASSIGNOP . expression assignnow SEMICOLON
    (47) expression -> . simpleexpression
    (48) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (52) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (53) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (54) expression -> . IDENTIFIER PLUSPLUS seenunary
    (55) expression -> . IDENTIFIER MINUSMINUS seenunary
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 55
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 44

    (85) writefunction -> PRINT LPAREN . expression RPAREN SEMICOLON
    (47) expression -> . simpleexpression
    (48) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (52) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (53) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (54) expression -> . IDENTIFIER PLUSPLUS seenunary
    (55) expression -> . IDENTIFIER MINUSMINUS seenunary
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 65
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 45

    (86) writefunction -> WRITE LPAREN . expression RPAREN SEMICOLON
    (47) expression -> . simpleexpression
    (48) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (52) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (53) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (54) expression -> . IDENTIFIER PLUSPLUS seenunary
    (55) expression -> . IDENTIFIER MINUSMINUS seenunary
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 66
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 46

    (29) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> IF LPAREN . expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (47) expression -> . simpleexpression
    (48) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (52) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (53) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (54) expression -> . IDENTIFIER PLUSPLUS seenunary
    (55) expression -> . IDENTIFIER MINUSMINUS seenunary
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 67
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 47

    (36) while -> WHILE LPAREN . expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (47) expression -> . simpleexpression
    (48) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (52) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (53) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (54) expression -> . IDENTIFIER PLUSPLUS seenunary
    (55) expression -> . IDENTIFIER MINUSMINUS seenunary
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 68
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 48

    (39) for -> FOR LPAREN . assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> FOR LPAREN . assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON

    IDENTIFIER      shift and go to state 70

    assign                         shift and go to state 69

state 49

    (2) vars -> VAR varsp COLON type seentype . SEMICOLON
    (3) vars -> VAR varsp COLON type seentype . SEMICOLON vars

    SEMICOLON       shift and go to state 71


state 50

    (6) varsp -> IDENTIFIER seenid COMMA varsp .

    COLON           reduce using rule 6 (varsp -> IDENTIFIER seenid COMMA varsp .)


state 51

    (13) block -> BEGIN SEMICOLON statement END SEMICOLON .

    RCURLYBRACE     reduce using rule 13 (block -> BEGIN SEMICOLON statement END SEMICOLON .)


state 52

    (25) statement -> IDENTIFIER PLUSPLUS seenunary . SEMICOLON
    (27) statement -> IDENTIFIER PLUSPLUS seenunary . SEMICOLON statement

    SEMICOLON       shift and go to state 72


state 53

    (26) statement -> IDENTIFIER MINUSMINUS seenunary . SEMICOLON
    (28) statement -> IDENTIFIER MINUSMINUS seenunary . SEMICOLON statement

    SEMICOLON       shift and go to state 73


state 54

    (54) expression -> IDENTIFIER . PLUSPLUS seenunary
    (55) expression -> IDENTIFIER . MINUSMINUS seenunary
    (80) const -> IDENTIFIER .

  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    PLUSPLUS        shift and go to state 74
    MINUSMINUS      shift and go to state 75
    MULTIPLY        reduce using rule 80 (const -> IDENTIFIER .)
    DIV             reduce using rule 80 (const -> IDENTIFIER .)
    DIVIDE          reduce using rule 80 (const -> IDENTIFIER .)
    MOD             reduce using rule 80 (const -> IDENTIFIER .)
    AND             reduce using rule 80 (const -> IDENTIFIER .)
    PLUS            reduce using rule 80 (const -> IDENTIFIER .)
    MINUS           reduce using rule 80 (const -> IDENTIFIER .)
    OR              reduce using rule 80 (const -> IDENTIFIER .)
    LESS_THAN       reduce using rule 80 (const -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 80 (const -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 80 (const -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 80 (const -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 80 (const -> IDENTIFIER .)
    EQUALS          reduce using rule 80 (const -> IDENTIFIER .)
    SEMICOLON       reduce using rule 80 (const -> IDENTIFIER .)
    RPAREN          reduce using rule 80 (const -> IDENTIFIER .)

  ! PLUSPLUS        [ reduce using rule 80 (const -> IDENTIFIER .) ]
  ! MINUSMINUS      [ reduce using rule 80 (const -> IDENTIFIER .) ]


state 55

    (44) assign -> IDENTIFIER ASSIGNOP expression . assignnow SEMICOLON
    (46) assignnow -> .

    SEMICOLON       reduce using rule 46 (assignnow -> .)

    assignnow                      shift and go to state 76

state 56

    (47) expression -> simpleexpression .
    (48) expression -> simpleexpression . LESS_THAN seenoperator simpleexpression genquad
    (49) expression -> simpleexpression . LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> simpleexpression . GREATER_THAN seenoperator simpleexpression genquad
    (51) expression -> simpleexpression . GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (52) expression -> simpleexpression . NOT_EQUALS seenoperator simpleexpression genquad
    (53) expression -> simpleexpression . EQUALS seenoperator simpleexpression genquad

    SEMICOLON       reduce using rule 47 (expression -> simpleexpression .)
    RPAREN          reduce using rule 47 (expression -> simpleexpression .)
    LESS_THAN       shift and go to state 77
    LESS_THAN_EQUALS shift and go to state 78
    GREATER_THAN    shift and go to state 79
    GREATER_THAN_EQUALS shift and go to state 80
    NOT_EQUALS      shift and go to state 81
    EQUALS          shift and go to state 82


state 57

    (57) simpleexpression -> term . seenterm simpleexpressionp
    (58) seenterm -> .

    PLUS            reduce using rule 58 (seenterm -> .)
    MINUS           reduce using rule 58 (seenterm -> .)
    OR              reduce using rule 58 (seenterm -> .)
    LESS_THAN       reduce using rule 58 (seenterm -> .)
    LESS_THAN_EQUALS reduce using rule 58 (seenterm -> .)
    GREATER_THAN    reduce using rule 58 (seenterm -> .)
    GREATER_THAN_EQUALS reduce using rule 58 (seenterm -> .)
    NOT_EQUALS      reduce using rule 58 (seenterm -> .)
    EQUALS          reduce using rule 58 (seenterm -> .)
    SEMICOLON       reduce using rule 58 (seenterm -> .)
    RPAREN          reduce using rule 58 (seenterm -> .)

    seenterm                       shift and go to state 83

state 58

    (63) term -> factor . seenfactor termp
    (73) seenfactor -> .

    MULTIPLY        reduce using rule 73 (seenfactor -> .)
    DIV             reduce using rule 73 (seenfactor -> .)
    DIVIDE          reduce using rule 73 (seenfactor -> .)
    MOD             reduce using rule 73 (seenfactor -> .)
    AND             reduce using rule 73 (seenfactor -> .)
    PLUSPLUS        reduce using rule 73 (seenfactor -> .)
    MINUSMINUS      reduce using rule 73 (seenfactor -> .)
    PLUS            reduce using rule 73 (seenfactor -> .)
    MINUS           reduce using rule 73 (seenfactor -> .)
    OR              reduce using rule 73 (seenfactor -> .)
    LESS_THAN       reduce using rule 73 (seenfactor -> .)
    LESS_THAN_EQUALS reduce using rule 73 (seenfactor -> .)
    GREATER_THAN    reduce using rule 73 (seenfactor -> .)
    GREATER_THAN_EQUALS reduce using rule 73 (seenfactor -> .)
    NOT_EQUALS      reduce using rule 73 (seenfactor -> .)
    EQUALS          reduce using rule 73 (seenfactor -> .)
    SEMICOLON       reduce using rule 73 (seenfactor -> .)
    RPAREN          reduce using rule 73 (seenfactor -> .)

    seenfactor                     shift and go to state 84

state 59

    (75) factor -> const .

    MULTIPLY        reduce using rule 75 (factor -> const .)
    DIV             reduce using rule 75 (factor -> const .)
    DIVIDE          reduce using rule 75 (factor -> const .)
    MOD             reduce using rule 75 (factor -> const .)
    AND             reduce using rule 75 (factor -> const .)
    PLUSPLUS        reduce using rule 75 (factor -> const .)
    MINUSMINUS      reduce using rule 75 (factor -> const .)
    PLUS            reduce using rule 75 (factor -> const .)
    MINUS           reduce using rule 75 (factor -> const .)
    OR              reduce using rule 75 (factor -> const .)
    LESS_THAN       reduce using rule 75 (factor -> const .)
    LESS_THAN_EQUALS reduce using rule 75 (factor -> const .)
    GREATER_THAN    reduce using rule 75 (factor -> const .)
    GREATER_THAN_EQUALS reduce using rule 75 (factor -> const .)
    NOT_EQUALS      reduce using rule 75 (factor -> const .)
    EQUALS          reduce using rule 75 (factor -> const .)
    SEMICOLON       reduce using rule 75 (factor -> const .)
    RPAREN          reduce using rule 75 (factor -> const .)


state 60

    (76) factor -> LPAREN . seenoperator expression RPAREN exitparen
    (72) seenoperator -> .

    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 85

state 61

    (78) const -> PLUS . IDENTIFIER
    (81) const -> PLUS . NUMBER_CONST

    IDENTIFIER      shift and go to state 86
    NUMBER_CONST    shift and go to state 87


state 62

    (79) const -> MINUS . IDENTIFIER
    (82) const -> MINUS . NUMBER_CONST

    IDENTIFIER      shift and go to state 88
    NUMBER_CONST    shift and go to state 89


state 63

    (83) const -> NUMBER_CONST .

    MULTIPLY        reduce using rule 83 (const -> NUMBER_CONST .)
    DIV             reduce using rule 83 (const -> NUMBER_CONST .)
    DIVIDE          reduce using rule 83 (const -> NUMBER_CONST .)
    MOD             reduce using rule 83 (const -> NUMBER_CONST .)
    AND             reduce using rule 83 (const -> NUMBER_CONST .)
    PLUSPLUS        reduce using rule 83 (const -> NUMBER_CONST .)
    MINUSMINUS      reduce using rule 83 (const -> NUMBER_CONST .)
    PLUS            reduce using rule 83 (const -> NUMBER_CONST .)
    MINUS           reduce using rule 83 (const -> NUMBER_CONST .)
    OR              reduce using rule 83 (const -> NUMBER_CONST .)
    LESS_THAN       reduce using rule 83 (const -> NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 83 (const -> NUMBER_CONST .)
    GREATER_THAN    reduce using rule 83 (const -> NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 83 (const -> NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 83 (const -> NUMBER_CONST .)
    EQUALS          reduce using rule 83 (const -> NUMBER_CONST .)
    SEMICOLON       reduce using rule 83 (const -> NUMBER_CONST .)
    RPAREN          reduce using rule 83 (const -> NUMBER_CONST .)


state 64

    (84) const -> STRING_CONST .

    MULTIPLY        reduce using rule 84 (const -> STRING_CONST .)
    DIV             reduce using rule 84 (const -> STRING_CONST .)
    DIVIDE          reduce using rule 84 (const -> STRING_CONST .)
    MOD             reduce using rule 84 (const -> STRING_CONST .)
    AND             reduce using rule 84 (const -> STRING_CONST .)
    PLUSPLUS        reduce using rule 84 (const -> STRING_CONST .)
    MINUSMINUS      reduce using rule 84 (const -> STRING_CONST .)
    PLUS            reduce using rule 84 (const -> STRING_CONST .)
    MINUS           reduce using rule 84 (const -> STRING_CONST .)
    OR              reduce using rule 84 (const -> STRING_CONST .)
    LESS_THAN       reduce using rule 84 (const -> STRING_CONST .)
    LESS_THAN_EQUALS reduce using rule 84 (const -> STRING_CONST .)
    GREATER_THAN    reduce using rule 84 (const -> STRING_CONST .)
    GREATER_THAN_EQUALS reduce using rule 84 (const -> STRING_CONST .)
    NOT_EQUALS      reduce using rule 84 (const -> STRING_CONST .)
    EQUALS          reduce using rule 84 (const -> STRING_CONST .)
    SEMICOLON       reduce using rule 84 (const -> STRING_CONST .)
    RPAREN          reduce using rule 84 (const -> STRING_CONST .)


state 65

    (85) writefunction -> PRINT LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 90


state 66

    (86) writefunction -> WRITE LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 91


state 67

    (29) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> IF LPAREN expression . RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    RPAREN          shift and go to state 92


state 68

    (36) while -> WHILE LPAREN expression . RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    RPAREN          shift and go to state 93


state 69

    (39) for -> FOR LPAREN assign . expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> FOR LPAREN assign . expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (47) expression -> . simpleexpression
    (48) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (52) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (53) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (54) expression -> . IDENTIFIER PLUSPLUS seenunary
    (55) expression -> . IDENTIFIER MINUSMINUS seenunary
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 94
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 70

    (44) assign -> IDENTIFIER . ASSIGNOP expression assignnow SEMICOLON

    ASSIGNOP        shift and go to state 43


state 71

    (2) vars -> VAR varsp COLON type seentype SEMICOLON .
    (3) vars -> VAR varsp COLON type seentype SEMICOLON . vars
    (2) vars -> . VAR varsp COLON type seentype SEMICOLON
    (3) vars -> . VAR varsp COLON type seentype SEMICOLON vars
    (4) vars -> . empty
    (87) empty -> .

  ! reduce/reduce conflict for BEGIN resolved using rule 2 (vars -> VAR varsp COLON type seentype SEMICOLON .)
    BEGIN           reduce using rule 2 (vars -> VAR varsp COLON type seentype SEMICOLON .)
    VAR             shift and go to state 6

  ! BEGIN           [ reduce using rule 87 (empty -> .) ]

    vars                           shift and go to state 95
    empty                          shift and go to state 7

state 72

    (25) statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON .
    (27) statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (27) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
    (87) empty -> .
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (85) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (86) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (36) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (39) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 25 (statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 25 (statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON .)
    END             reduce using rule 25 (statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON .)
    RCURLYBRACE     reduce using rule 25 (statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 87 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 87 (empty -> .) ]

    statement                      shift and go to state 96
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 73

    (26) statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON .
    (28) statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON . statement
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (27) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
    (87) empty -> .
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (85) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (86) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (36) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (39) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

  ! reduce/reduce conflict for END resolved using rule 26 (statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON .)
  ! reduce/reduce conflict for RCURLYBRACE resolved using rule 26 (statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON .)
    END             reduce using rule 26 (statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON .)
    RCURLYBRACE     reduce using rule 26 (statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON .)
    IDENTIFIER      shift and go to state 23
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! END             [ reduce using rule 87 (empty -> .) ]
  ! RCURLYBRACE     [ reduce using rule 87 (empty -> .) ]

    statement                      shift and go to state 97
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 74

    (54) expression -> IDENTIFIER PLUSPLUS . seenunary
    (56) seenunary -> .

    SEMICOLON       reduce using rule 56 (seenunary -> .)
    RPAREN          reduce using rule 56 (seenunary -> .)

    seenunary                      shift and go to state 98

state 75

    (55) expression -> IDENTIFIER MINUSMINUS . seenunary
    (56) seenunary -> .

    SEMICOLON       reduce using rule 56 (seenunary -> .)
    RPAREN          reduce using rule 56 (seenunary -> .)

    seenunary                      shift and go to state 99

state 76

    (44) assign -> IDENTIFIER ASSIGNOP expression assignnow . SEMICOLON

    SEMICOLON       shift and go to state 100


state 77

    (48) expression -> simpleexpression LESS_THAN . seenoperator simpleexpression genquad
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 101

state 78

    (49) expression -> simpleexpression LESS_THAN_EQUALS . seenoperator simpleexpression genquad
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 102

state 79

    (50) expression -> simpleexpression GREATER_THAN . seenoperator simpleexpression genquad
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 103

state 80

    (51) expression -> simpleexpression GREATER_THAN_EQUALS . seenoperator simpleexpression genquad
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 104

state 81

    (52) expression -> simpleexpression NOT_EQUALS . seenoperator simpleexpression genquad
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 105

state 82

    (53) expression -> simpleexpression EQUALS . seenoperator simpleexpression genquad
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 106

state 83

    (57) simpleexpression -> term seenterm . simpleexpressionp
    (59) simpleexpressionp -> . empty
    (60) simpleexpressionp -> . PLUS seenoperator simpleexpression
    (61) simpleexpressionp -> . MINUS seenoperator simpleexpression
    (62) simpleexpressionp -> . OR seenoperator simpleexpression
    (87) empty -> .

    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    OR              shift and go to state 111
    LESS_THAN       reduce using rule 87 (empty -> .)
    LESS_THAN_EQUALS reduce using rule 87 (empty -> .)
    GREATER_THAN    reduce using rule 87 (empty -> .)
    GREATER_THAN_EQUALS reduce using rule 87 (empty -> .)
    NOT_EQUALS      reduce using rule 87 (empty -> .)
    EQUALS          reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)

    simpleexpressionp              shift and go to state 107
    empty                          shift and go to state 108

state 84

    (63) term -> factor seenfactor . termp
    (64) termp -> . empty
    (65) termp -> . MULTIPLY seenoperator term
    (66) termp -> . DIV seenoperator term
    (67) termp -> . DIVIDE seenoperator term
    (68) termp -> . MOD seenoperator term
    (69) termp -> . AND seenoperator term
    (70) termp -> . PLUSPLUS seenoperator
    (71) termp -> . MINUSMINUS seenoperator
    (87) empty -> .

    MULTIPLY        shift and go to state 114
    DIV             shift and go to state 115
    DIVIDE          shift and go to state 116
    MOD             shift and go to state 117
    AND             shift and go to state 118
    PLUSPLUS        shift and go to state 119
    MINUSMINUS      shift and go to state 120
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    LESS_THAN       reduce using rule 87 (empty -> .)
    LESS_THAN_EQUALS reduce using rule 87 (empty -> .)
    GREATER_THAN    reduce using rule 87 (empty -> .)
    GREATER_THAN_EQUALS reduce using rule 87 (empty -> .)
    NOT_EQUALS      reduce using rule 87 (empty -> .)
    EQUALS          reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)

    termp                          shift and go to state 112
    empty                          shift and go to state 113

state 85

    (76) factor -> LPAREN seenoperator . expression RPAREN exitparen
    (47) expression -> . simpleexpression
    (48) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (52) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (53) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (54) expression -> . IDENTIFIER PLUSPLUS seenunary
    (55) expression -> . IDENTIFIER MINUSMINUS seenunary
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 121
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 86

    (78) const -> PLUS IDENTIFIER .

    MULTIPLY        reduce using rule 78 (const -> PLUS IDENTIFIER .)
    DIV             reduce using rule 78 (const -> PLUS IDENTIFIER .)
    DIVIDE          reduce using rule 78 (const -> PLUS IDENTIFIER .)
    MOD             reduce using rule 78 (const -> PLUS IDENTIFIER .)
    AND             reduce using rule 78 (const -> PLUS IDENTIFIER .)
    PLUSPLUS        reduce using rule 78 (const -> PLUS IDENTIFIER .)
    MINUSMINUS      reduce using rule 78 (const -> PLUS IDENTIFIER .)
    PLUS            reduce using rule 78 (const -> PLUS IDENTIFIER .)
    MINUS           reduce using rule 78 (const -> PLUS IDENTIFIER .)
    OR              reduce using rule 78 (const -> PLUS IDENTIFIER .)
    LESS_THAN       reduce using rule 78 (const -> PLUS IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 78 (const -> PLUS IDENTIFIER .)
    GREATER_THAN    reduce using rule 78 (const -> PLUS IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 78 (const -> PLUS IDENTIFIER .)
    NOT_EQUALS      reduce using rule 78 (const -> PLUS IDENTIFIER .)
    EQUALS          reduce using rule 78 (const -> PLUS IDENTIFIER .)
    SEMICOLON       reduce using rule 78 (const -> PLUS IDENTIFIER .)
    RPAREN          reduce using rule 78 (const -> PLUS IDENTIFIER .)


state 87

    (81) const -> PLUS NUMBER_CONST .

    MULTIPLY        reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    DIV             reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    DIVIDE          reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    MOD             reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    AND             reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    PLUSPLUS        reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    MINUSMINUS      reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    PLUS            reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    MINUS           reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    OR              reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    LESS_THAN       reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    GREATER_THAN    reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    EQUALS          reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    SEMICOLON       reduce using rule 81 (const -> PLUS NUMBER_CONST .)
    RPAREN          reduce using rule 81 (const -> PLUS NUMBER_CONST .)


state 88

    (79) const -> MINUS IDENTIFIER .

    MULTIPLY        reduce using rule 79 (const -> MINUS IDENTIFIER .)
    DIV             reduce using rule 79 (const -> MINUS IDENTIFIER .)
    DIVIDE          reduce using rule 79 (const -> MINUS IDENTIFIER .)
    MOD             reduce using rule 79 (const -> MINUS IDENTIFIER .)
    AND             reduce using rule 79 (const -> MINUS IDENTIFIER .)
    PLUSPLUS        reduce using rule 79 (const -> MINUS IDENTIFIER .)
    MINUSMINUS      reduce using rule 79 (const -> MINUS IDENTIFIER .)
    PLUS            reduce using rule 79 (const -> MINUS IDENTIFIER .)
    MINUS           reduce using rule 79 (const -> MINUS IDENTIFIER .)
    OR              reduce using rule 79 (const -> MINUS IDENTIFIER .)
    LESS_THAN       reduce using rule 79 (const -> MINUS IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 79 (const -> MINUS IDENTIFIER .)
    GREATER_THAN    reduce using rule 79 (const -> MINUS IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 79 (const -> MINUS IDENTIFIER .)
    NOT_EQUALS      reduce using rule 79 (const -> MINUS IDENTIFIER .)
    EQUALS          reduce using rule 79 (const -> MINUS IDENTIFIER .)
    SEMICOLON       reduce using rule 79 (const -> MINUS IDENTIFIER .)
    RPAREN          reduce using rule 79 (const -> MINUS IDENTIFIER .)


state 89

    (82) const -> MINUS NUMBER_CONST .

    MULTIPLY        reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    DIV             reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    DIVIDE          reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    MOD             reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    AND             reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    PLUSPLUS        reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    MINUSMINUS      reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    PLUS            reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    MINUS           reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    OR              reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    LESS_THAN       reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    LESS_THAN_EQUALS reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    GREATER_THAN    reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    GREATER_THAN_EQUALS reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    NOT_EQUALS      reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    EQUALS          reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    SEMICOLON       reduce using rule 82 (const -> MINUS NUMBER_CONST .)
    RPAREN          reduce using rule 82 (const -> MINUS NUMBER_CONST .)


state 90

    (85) writefunction -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 122


state 91

    (86) writefunction -> WRITE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 123


state 92

    (29) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> IF LPAREN expression RPAREN . checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (32) checkbool -> .

    THEN            reduce using rule 32 (checkbool -> .)

    checkbool                      shift and go to state 124

state 93

    (36) while -> WHILE LPAREN expression RPAREN . checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (32) checkbool -> .

    DO              reduce using rule 32 (checkbool -> .)

    checkbool                      shift and go to state 125

state 94

    (39) for -> FOR LPAREN assign expression . checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> FOR LPAREN assign expression . checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (32) checkbool -> .

    SEMICOLON       reduce using rule 32 (checkbool -> .)

    checkbool                      shift and go to state 126

state 95

    (3) vars -> VAR varsp COLON type seentype SEMICOLON vars .

    BEGIN           reduce using rule 3 (vars -> VAR varsp COLON type seentype SEMICOLON vars .)


state 96

    (27) statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON statement .

    END             reduce using rule 27 (statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON statement .)
    RCURLYBRACE     reduce using rule 27 (statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON statement .)


state 97

    (28) statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON statement .

    END             reduce using rule 28 (statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON statement .)
    RCURLYBRACE     reduce using rule 28 (statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON statement .)


state 98

    (54) expression -> IDENTIFIER PLUSPLUS seenunary .

    SEMICOLON       reduce using rule 54 (expression -> IDENTIFIER PLUSPLUS seenunary .)
    RPAREN          reduce using rule 54 (expression -> IDENTIFIER PLUSPLUS seenunary .)


state 99

    (55) expression -> IDENTIFIER MINUSMINUS seenunary .

    SEMICOLON       reduce using rule 55 (expression -> IDENTIFIER MINUSMINUS seenunary .)
    RPAREN          reduce using rule 55 (expression -> IDENTIFIER MINUSMINUS seenunary .)


state 100

    (44) assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .

    IDENTIFIER      reduce using rule 44 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    PRINT           reduce using rule 44 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    WRITE           reduce using rule 44 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    IF              reduce using rule 44 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    WHILE           reduce using rule 44 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    FOR             reduce using rule 44 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    END             reduce using rule 44 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    RCURLYBRACE     reduce using rule 44 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    LPAREN          reduce using rule 44 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    PLUS            reduce using rule 44 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    MINUS           reduce using rule 44 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    NUMBER_CONST    reduce using rule 44 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)
    STRING_CONST    reduce using rule 44 (assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON .)


state 101

    (48) expression -> simpleexpression LESS_THAN seenoperator . simpleexpression genquad
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 127
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 102

    (49) expression -> simpleexpression LESS_THAN_EQUALS seenoperator . simpleexpression genquad
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 129
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 103

    (50) expression -> simpleexpression GREATER_THAN seenoperator . simpleexpression genquad
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 130
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 104

    (51) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator . simpleexpression genquad
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 131
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 105

    (52) expression -> simpleexpression NOT_EQUALS seenoperator . simpleexpression genquad
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 132
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 106

    (53) expression -> simpleexpression EQUALS seenoperator . simpleexpression genquad
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 133
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 107

    (57) simpleexpression -> term seenterm simpleexpressionp .

    LESS_THAN       reduce using rule 57 (simpleexpression -> term seenterm simpleexpressionp .)
    LESS_THAN_EQUALS reduce using rule 57 (simpleexpression -> term seenterm simpleexpressionp .)
    GREATER_THAN    reduce using rule 57 (simpleexpression -> term seenterm simpleexpressionp .)
    GREATER_THAN_EQUALS reduce using rule 57 (simpleexpression -> term seenterm simpleexpressionp .)
    NOT_EQUALS      reduce using rule 57 (simpleexpression -> term seenterm simpleexpressionp .)
    EQUALS          reduce using rule 57 (simpleexpression -> term seenterm simpleexpressionp .)
    SEMICOLON       reduce using rule 57 (simpleexpression -> term seenterm simpleexpressionp .)
    RPAREN          reduce using rule 57 (simpleexpression -> term seenterm simpleexpressionp .)


state 108

    (59) simpleexpressionp -> empty .

    LESS_THAN       reduce using rule 59 (simpleexpressionp -> empty .)
    LESS_THAN_EQUALS reduce using rule 59 (simpleexpressionp -> empty .)
    GREATER_THAN    reduce using rule 59 (simpleexpressionp -> empty .)
    GREATER_THAN_EQUALS reduce using rule 59 (simpleexpressionp -> empty .)
    NOT_EQUALS      reduce using rule 59 (simpleexpressionp -> empty .)
    EQUALS          reduce using rule 59 (simpleexpressionp -> empty .)
    SEMICOLON       reduce using rule 59 (simpleexpressionp -> empty .)
    RPAREN          reduce using rule 59 (simpleexpressionp -> empty .)


state 109

    (60) simpleexpressionp -> PLUS . seenoperator simpleexpression
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 134

state 110

    (61) simpleexpressionp -> MINUS . seenoperator simpleexpression
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 135

state 111

    (62) simpleexpressionp -> OR . seenoperator simpleexpression
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 136

state 112

    (63) term -> factor seenfactor termp .

    PLUS            reduce using rule 63 (term -> factor seenfactor termp .)
    MINUS           reduce using rule 63 (term -> factor seenfactor termp .)
    OR              reduce using rule 63 (term -> factor seenfactor termp .)
    LESS_THAN       reduce using rule 63 (term -> factor seenfactor termp .)
    LESS_THAN_EQUALS reduce using rule 63 (term -> factor seenfactor termp .)
    GREATER_THAN    reduce using rule 63 (term -> factor seenfactor termp .)
    GREATER_THAN_EQUALS reduce using rule 63 (term -> factor seenfactor termp .)
    NOT_EQUALS      reduce using rule 63 (term -> factor seenfactor termp .)
    EQUALS          reduce using rule 63 (term -> factor seenfactor termp .)
    SEMICOLON       reduce using rule 63 (term -> factor seenfactor termp .)
    RPAREN          reduce using rule 63 (term -> factor seenfactor termp .)


state 113

    (64) termp -> empty .

    PLUS            reduce using rule 64 (termp -> empty .)
    MINUS           reduce using rule 64 (termp -> empty .)
    OR              reduce using rule 64 (termp -> empty .)
    LESS_THAN       reduce using rule 64 (termp -> empty .)
    LESS_THAN_EQUALS reduce using rule 64 (termp -> empty .)
    GREATER_THAN    reduce using rule 64 (termp -> empty .)
    GREATER_THAN_EQUALS reduce using rule 64 (termp -> empty .)
    NOT_EQUALS      reduce using rule 64 (termp -> empty .)
    EQUALS          reduce using rule 64 (termp -> empty .)
    SEMICOLON       reduce using rule 64 (termp -> empty .)
    RPAREN          reduce using rule 64 (termp -> empty .)


state 114

    (65) termp -> MULTIPLY . seenoperator term
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 137

state 115

    (66) termp -> DIV . seenoperator term
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 138

state 116

    (67) termp -> DIVIDE . seenoperator term
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 139

state 117

    (68) termp -> MOD . seenoperator term
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 140

state 118

    (69) termp -> AND . seenoperator term
    (72) seenoperator -> .

    LPAREN          reduce using rule 72 (seenoperator -> .)
    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    IDENTIFIER      reduce using rule 72 (seenoperator -> .)
    NUMBER_CONST    reduce using rule 72 (seenoperator -> .)
    STRING_CONST    reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 141

state 119

    (70) termp -> PLUSPLUS . seenoperator
    (72) seenoperator -> .

    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    OR              reduce using rule 72 (seenoperator -> .)
    LESS_THAN       reduce using rule 72 (seenoperator -> .)
    LESS_THAN_EQUALS reduce using rule 72 (seenoperator -> .)
    GREATER_THAN    reduce using rule 72 (seenoperator -> .)
    GREATER_THAN_EQUALS reduce using rule 72 (seenoperator -> .)
    NOT_EQUALS      reduce using rule 72 (seenoperator -> .)
    EQUALS          reduce using rule 72 (seenoperator -> .)
    SEMICOLON       reduce using rule 72 (seenoperator -> .)
    RPAREN          reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 142

state 120

    (71) termp -> MINUSMINUS . seenoperator
    (72) seenoperator -> .

    PLUS            reduce using rule 72 (seenoperator -> .)
    MINUS           reduce using rule 72 (seenoperator -> .)
    OR              reduce using rule 72 (seenoperator -> .)
    LESS_THAN       reduce using rule 72 (seenoperator -> .)
    LESS_THAN_EQUALS reduce using rule 72 (seenoperator -> .)
    GREATER_THAN    reduce using rule 72 (seenoperator -> .)
    GREATER_THAN_EQUALS reduce using rule 72 (seenoperator -> .)
    NOT_EQUALS      reduce using rule 72 (seenoperator -> .)
    EQUALS          reduce using rule 72 (seenoperator -> .)
    SEMICOLON       reduce using rule 72 (seenoperator -> .)
    RPAREN          reduce using rule 72 (seenoperator -> .)

    seenoperator                   shift and go to state 143

state 121

    (76) factor -> LPAREN seenoperator expression . RPAREN exitparen

    RPAREN          shift and go to state 144


state 122

    (85) writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 85 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 85 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 85 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 85 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 85 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 85 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 85 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RCURLYBRACE     reduce using rule 85 (writefunction -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 123

    (86) writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 86 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 86 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 86 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 86 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 86 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 86 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 86 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)
    RCURLYBRACE     reduce using rule 86 (writefunction -> WRITE LPAREN expression RPAREN SEMICOLON .)


state 124

    (29) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> IF LPAREN expression RPAREN checkbool . seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (33) seenif -> .

    THEN            reduce using rule 33 (seenif -> .)

    seenif                         shift and go to state 145

state 125

    (36) while -> WHILE LPAREN expression RPAREN checkbool . seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (37) seenwhile -> .

    DO              reduce using rule 37 (seenwhile -> .)

    seenwhile                      shift and go to state 146

state 126

    (39) for -> FOR LPAREN assign expression checkbool . seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> FOR LPAREN assign expression checkbool . seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (41) seenboolfor -> .

    SEMICOLON       reduce using rule 41 (seenboolfor -> .)

    seenboolfor                    shift and go to state 147

state 127

    (48) expression -> simpleexpression LESS_THAN seenoperator simpleexpression . genquad
    (74) genquad -> .

    SEMICOLON       reduce using rule 74 (genquad -> .)
    RPAREN          reduce using rule 74 (genquad -> .)

    genquad                        shift and go to state 148

state 128

    (80) const -> IDENTIFIER .

    MULTIPLY        reduce using rule 80 (const -> IDENTIFIER .)
    DIV             reduce using rule 80 (const -> IDENTIFIER .)
    DIVIDE          reduce using rule 80 (const -> IDENTIFIER .)
    MOD             reduce using rule 80 (const -> IDENTIFIER .)
    AND             reduce using rule 80 (const -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 80 (const -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 80 (const -> IDENTIFIER .)
    PLUS            reduce using rule 80 (const -> IDENTIFIER .)
    MINUS           reduce using rule 80 (const -> IDENTIFIER .)
    OR              reduce using rule 80 (const -> IDENTIFIER .)
    SEMICOLON       reduce using rule 80 (const -> IDENTIFIER .)
    RPAREN          reduce using rule 80 (const -> IDENTIFIER .)
    LESS_THAN       reduce using rule 80 (const -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 80 (const -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 80 (const -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 80 (const -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 80 (const -> IDENTIFIER .)
    EQUALS          reduce using rule 80 (const -> IDENTIFIER .)


state 129

    (49) expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression . genquad
    (74) genquad -> .

    SEMICOLON       reduce using rule 74 (genquad -> .)
    RPAREN          reduce using rule 74 (genquad -> .)

    genquad                        shift and go to state 149

state 130

    (50) expression -> simpleexpression GREATER_THAN seenoperator simpleexpression . genquad
    (74) genquad -> .

    SEMICOLON       reduce using rule 74 (genquad -> .)
    RPAREN          reduce using rule 74 (genquad -> .)

    genquad                        shift and go to state 150

state 131

    (51) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression . genquad
    (74) genquad -> .

    SEMICOLON       reduce using rule 74 (genquad -> .)
    RPAREN          reduce using rule 74 (genquad -> .)

    genquad                        shift and go to state 151

state 132

    (52) expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression . genquad
    (74) genquad -> .

    SEMICOLON       reduce using rule 74 (genquad -> .)
    RPAREN          reduce using rule 74 (genquad -> .)

    genquad                        shift and go to state 152

state 133

    (53) expression -> simpleexpression EQUALS seenoperator simpleexpression . genquad
    (74) genquad -> .

    SEMICOLON       reduce using rule 74 (genquad -> .)
    RPAREN          reduce using rule 74 (genquad -> .)

    genquad                        shift and go to state 153

state 134

    (60) simpleexpressionp -> PLUS seenoperator . simpleexpression
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 154
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 135

    (61) simpleexpressionp -> MINUS seenoperator . simpleexpression
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 155
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 136

    (62) simpleexpressionp -> OR seenoperator . simpleexpression
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    simpleexpression               shift and go to state 156
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 137

    (65) termp -> MULTIPLY seenoperator . term
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    term                           shift and go to state 157
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 138

    (66) termp -> DIV seenoperator . term
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    term                           shift and go to state 158
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 139

    (67) termp -> DIVIDE seenoperator . term
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    term                           shift and go to state 159
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 140

    (68) termp -> MOD seenoperator . term
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    term                           shift and go to state 160
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 141

    (69) termp -> AND seenoperator . term
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    IDENTIFIER      shift and go to state 128
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    term                           shift and go to state 161
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 142

    (70) termp -> PLUSPLUS seenoperator .

    PLUS            reduce using rule 70 (termp -> PLUSPLUS seenoperator .)
    MINUS           reduce using rule 70 (termp -> PLUSPLUS seenoperator .)
    OR              reduce using rule 70 (termp -> PLUSPLUS seenoperator .)
    LESS_THAN       reduce using rule 70 (termp -> PLUSPLUS seenoperator .)
    LESS_THAN_EQUALS reduce using rule 70 (termp -> PLUSPLUS seenoperator .)
    GREATER_THAN    reduce using rule 70 (termp -> PLUSPLUS seenoperator .)
    GREATER_THAN_EQUALS reduce using rule 70 (termp -> PLUSPLUS seenoperator .)
    NOT_EQUALS      reduce using rule 70 (termp -> PLUSPLUS seenoperator .)
    EQUALS          reduce using rule 70 (termp -> PLUSPLUS seenoperator .)
    SEMICOLON       reduce using rule 70 (termp -> PLUSPLUS seenoperator .)
    RPAREN          reduce using rule 70 (termp -> PLUSPLUS seenoperator .)


state 143

    (71) termp -> MINUSMINUS seenoperator .

    PLUS            reduce using rule 71 (termp -> MINUSMINUS seenoperator .)
    MINUS           reduce using rule 71 (termp -> MINUSMINUS seenoperator .)
    OR              reduce using rule 71 (termp -> MINUSMINUS seenoperator .)
    LESS_THAN       reduce using rule 71 (termp -> MINUSMINUS seenoperator .)
    LESS_THAN_EQUALS reduce using rule 71 (termp -> MINUSMINUS seenoperator .)
    GREATER_THAN    reduce using rule 71 (termp -> MINUSMINUS seenoperator .)
    GREATER_THAN_EQUALS reduce using rule 71 (termp -> MINUSMINUS seenoperator .)
    NOT_EQUALS      reduce using rule 71 (termp -> MINUSMINUS seenoperator .)
    EQUALS          reduce using rule 71 (termp -> MINUSMINUS seenoperator .)
    SEMICOLON       reduce using rule 71 (termp -> MINUSMINUS seenoperator .)
    RPAREN          reduce using rule 71 (termp -> MINUSMINUS seenoperator .)


state 144

    (76) factor -> LPAREN seenoperator expression RPAREN . exitparen
    (77) exitparen -> .

    MULTIPLY        reduce using rule 77 (exitparen -> .)
    DIV             reduce using rule 77 (exitparen -> .)
    DIVIDE          reduce using rule 77 (exitparen -> .)
    MOD             reduce using rule 77 (exitparen -> .)
    AND             reduce using rule 77 (exitparen -> .)
    PLUSPLUS        reduce using rule 77 (exitparen -> .)
    MINUSMINUS      reduce using rule 77 (exitparen -> .)
    PLUS            reduce using rule 77 (exitparen -> .)
    MINUS           reduce using rule 77 (exitparen -> .)
    OR              reduce using rule 77 (exitparen -> .)
    LESS_THAN       reduce using rule 77 (exitparen -> .)
    LESS_THAN_EQUALS reduce using rule 77 (exitparen -> .)
    GREATER_THAN    reduce using rule 77 (exitparen -> .)
    GREATER_THAN_EQUALS reduce using rule 77 (exitparen -> .)
    NOT_EQUALS      reduce using rule 77 (exitparen -> .)
    EQUALS          reduce using rule 77 (exitparen -> .)
    SEMICOLON       reduce using rule 77 (exitparen -> .)
    RPAREN          reduce using rule 77 (exitparen -> .)

    exitparen                      shift and go to state 162

state 145

    (29) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> IF LPAREN expression RPAREN checkbool seenif . THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    THEN            shift and go to state 163


state 146

    (36) while -> WHILE LPAREN expression RPAREN checkbool seenwhile . DO LCURLYBRACE statement RCURLYBRACE seencurlywhile

    DO              shift and go to state 164


state 147

    (39) for -> FOR LPAREN assign expression checkbool seenboolfor . SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> FOR LPAREN assign expression checkbool seenboolfor . SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    SEMICOLON       shift and go to state 165


state 148

    (48) expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 48 (expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 48 (expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad .)


state 149

    (49) expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 49 (expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 49 (expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad .)


state 150

    (50) expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 50 (expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 50 (expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad .)


state 151

    (51) expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 51 (expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 51 (expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad .)


state 152

    (52) expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 52 (expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 52 (expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad .)


state 153

    (53) expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .

    SEMICOLON       reduce using rule 53 (expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .)
    RPAREN          reduce using rule 53 (expression -> simpleexpression EQUALS seenoperator simpleexpression genquad .)


state 154

    (60) simpleexpressionp -> PLUS seenoperator simpleexpression .

    LESS_THAN       reduce using rule 60 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 60 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 60 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 60 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 60 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    EQUALS          reduce using rule 60 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 60 (simpleexpressionp -> PLUS seenoperator simpleexpression .)
    RPAREN          reduce using rule 60 (simpleexpressionp -> PLUS seenoperator simpleexpression .)


state 155

    (61) simpleexpressionp -> MINUS seenoperator simpleexpression .

    LESS_THAN       reduce using rule 61 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 61 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 61 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 61 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 61 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    EQUALS          reduce using rule 61 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 61 (simpleexpressionp -> MINUS seenoperator simpleexpression .)
    RPAREN          reduce using rule 61 (simpleexpressionp -> MINUS seenoperator simpleexpression .)


state 156

    (62) simpleexpressionp -> OR seenoperator simpleexpression .

    LESS_THAN       reduce using rule 62 (simpleexpressionp -> OR seenoperator simpleexpression .)
    LESS_THAN_EQUALS reduce using rule 62 (simpleexpressionp -> OR seenoperator simpleexpression .)
    GREATER_THAN    reduce using rule 62 (simpleexpressionp -> OR seenoperator simpleexpression .)
    GREATER_THAN_EQUALS reduce using rule 62 (simpleexpressionp -> OR seenoperator simpleexpression .)
    NOT_EQUALS      reduce using rule 62 (simpleexpressionp -> OR seenoperator simpleexpression .)
    EQUALS          reduce using rule 62 (simpleexpressionp -> OR seenoperator simpleexpression .)
    SEMICOLON       reduce using rule 62 (simpleexpressionp -> OR seenoperator simpleexpression .)
    RPAREN          reduce using rule 62 (simpleexpressionp -> OR seenoperator simpleexpression .)


state 157

    (65) termp -> MULTIPLY seenoperator term .

    PLUS            reduce using rule 65 (termp -> MULTIPLY seenoperator term .)
    MINUS           reduce using rule 65 (termp -> MULTIPLY seenoperator term .)
    OR              reduce using rule 65 (termp -> MULTIPLY seenoperator term .)
    LESS_THAN       reduce using rule 65 (termp -> MULTIPLY seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 65 (termp -> MULTIPLY seenoperator term .)
    GREATER_THAN    reduce using rule 65 (termp -> MULTIPLY seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 65 (termp -> MULTIPLY seenoperator term .)
    NOT_EQUALS      reduce using rule 65 (termp -> MULTIPLY seenoperator term .)
    EQUALS          reduce using rule 65 (termp -> MULTIPLY seenoperator term .)
    SEMICOLON       reduce using rule 65 (termp -> MULTIPLY seenoperator term .)
    RPAREN          reduce using rule 65 (termp -> MULTIPLY seenoperator term .)


state 158

    (66) termp -> DIV seenoperator term .

    PLUS            reduce using rule 66 (termp -> DIV seenoperator term .)
    MINUS           reduce using rule 66 (termp -> DIV seenoperator term .)
    OR              reduce using rule 66 (termp -> DIV seenoperator term .)
    LESS_THAN       reduce using rule 66 (termp -> DIV seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 66 (termp -> DIV seenoperator term .)
    GREATER_THAN    reduce using rule 66 (termp -> DIV seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 66 (termp -> DIV seenoperator term .)
    NOT_EQUALS      reduce using rule 66 (termp -> DIV seenoperator term .)
    EQUALS          reduce using rule 66 (termp -> DIV seenoperator term .)
    SEMICOLON       reduce using rule 66 (termp -> DIV seenoperator term .)
    RPAREN          reduce using rule 66 (termp -> DIV seenoperator term .)


state 159

    (67) termp -> DIVIDE seenoperator term .

    PLUS            reduce using rule 67 (termp -> DIVIDE seenoperator term .)
    MINUS           reduce using rule 67 (termp -> DIVIDE seenoperator term .)
    OR              reduce using rule 67 (termp -> DIVIDE seenoperator term .)
    LESS_THAN       reduce using rule 67 (termp -> DIVIDE seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 67 (termp -> DIVIDE seenoperator term .)
    GREATER_THAN    reduce using rule 67 (termp -> DIVIDE seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 67 (termp -> DIVIDE seenoperator term .)
    NOT_EQUALS      reduce using rule 67 (termp -> DIVIDE seenoperator term .)
    EQUALS          reduce using rule 67 (termp -> DIVIDE seenoperator term .)
    SEMICOLON       reduce using rule 67 (termp -> DIVIDE seenoperator term .)
    RPAREN          reduce using rule 67 (termp -> DIVIDE seenoperator term .)


state 160

    (68) termp -> MOD seenoperator term .

    PLUS            reduce using rule 68 (termp -> MOD seenoperator term .)
    MINUS           reduce using rule 68 (termp -> MOD seenoperator term .)
    OR              reduce using rule 68 (termp -> MOD seenoperator term .)
    LESS_THAN       reduce using rule 68 (termp -> MOD seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 68 (termp -> MOD seenoperator term .)
    GREATER_THAN    reduce using rule 68 (termp -> MOD seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 68 (termp -> MOD seenoperator term .)
    NOT_EQUALS      reduce using rule 68 (termp -> MOD seenoperator term .)
    EQUALS          reduce using rule 68 (termp -> MOD seenoperator term .)
    SEMICOLON       reduce using rule 68 (termp -> MOD seenoperator term .)
    RPAREN          reduce using rule 68 (termp -> MOD seenoperator term .)


state 161

    (69) termp -> AND seenoperator term .

    PLUS            reduce using rule 69 (termp -> AND seenoperator term .)
    MINUS           reduce using rule 69 (termp -> AND seenoperator term .)
    OR              reduce using rule 69 (termp -> AND seenoperator term .)
    LESS_THAN       reduce using rule 69 (termp -> AND seenoperator term .)
    LESS_THAN_EQUALS reduce using rule 69 (termp -> AND seenoperator term .)
    GREATER_THAN    reduce using rule 69 (termp -> AND seenoperator term .)
    GREATER_THAN_EQUALS reduce using rule 69 (termp -> AND seenoperator term .)
    NOT_EQUALS      reduce using rule 69 (termp -> AND seenoperator term .)
    EQUALS          reduce using rule 69 (termp -> AND seenoperator term .)
    SEMICOLON       reduce using rule 69 (termp -> AND seenoperator term .)
    RPAREN          reduce using rule 69 (termp -> AND seenoperator term .)


state 162

    (76) factor -> LPAREN seenoperator expression RPAREN exitparen .

    MULTIPLY        reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    DIV             reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    DIVIDE          reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MOD             reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    AND             reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    PLUSPLUS        reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MINUSMINUS      reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    PLUS            reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    MINUS           reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    OR              reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    LESS_THAN       reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    LESS_THAN_EQUALS reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    GREATER_THAN    reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    GREATER_THAN_EQUALS reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    NOT_EQUALS      reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    EQUALS          reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    SEMICOLON       reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)
    RPAREN          reduce using rule 76 (factor -> LPAREN seenoperator expression RPAREN exitparen .)


state 163

    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> IF LPAREN expression RPAREN checkbool seenif THEN . LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LCURLYBRACE     shift and go to state 166


state 164

    (36) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO . LCURLYBRACE statement RCURLYBRACE seencurlywhile

    LCURLYBRACE     shift and go to state 167


state 165

    (39) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON . expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON . assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (47) expression -> . simpleexpression
    (48) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (52) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (53) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (54) expression -> . IDENTIFIER PLUSPLUS seenunary
    (55) expression -> . IDENTIFIER MINUSMINUS seenunary
    (45) assignfor -> . IDENTIFIER ASSIGNOP expression assignnow
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 170
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 168
    assignfor                      shift and go to state 169
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 166

    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE . statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (27) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
    (87) empty -> .
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (85) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (86) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (36) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (39) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    IDENTIFIER      shift and go to state 23
    RCURLYBRACE     reduce using rule 87 (empty -> .)
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 171
    condition                      shift and go to state 20
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    while                          shift and go to state 21
    for                            shift and go to state 22

state 167

    (36) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE . statement RCURLYBRACE seencurlywhile
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (27) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
    (87) empty -> .
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (85) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (86) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (36) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (39) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    IDENTIFIER      shift and go to state 23
    RCURLYBRACE     reduce using rule 87 (empty -> .)
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 172
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 168

    (39) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression . seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (42) seenchangefor -> .

    RPAREN          reduce using rule 42 (seenchangefor -> .)

    seenchangefor                  shift and go to state 173

state 169

    (40) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor . seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (42) seenchangefor -> .

    RPAREN          reduce using rule 42 (seenchangefor -> .)

    seenchangefor                  shift and go to state 174

state 170

    (54) expression -> IDENTIFIER . PLUSPLUS seenunary
    (55) expression -> IDENTIFIER . MINUSMINUS seenunary
    (45) assignfor -> IDENTIFIER . ASSIGNOP expression assignnow
    (80) const -> IDENTIFIER .

  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    PLUSPLUS        shift and go to state 74
    MINUSMINUS      shift and go to state 75
    ASSIGNOP        shift and go to state 175
    MULTIPLY        reduce using rule 80 (const -> IDENTIFIER .)
    DIV             reduce using rule 80 (const -> IDENTIFIER .)
    DIVIDE          reduce using rule 80 (const -> IDENTIFIER .)
    MOD             reduce using rule 80 (const -> IDENTIFIER .)
    AND             reduce using rule 80 (const -> IDENTIFIER .)
    PLUS            reduce using rule 80 (const -> IDENTIFIER .)
    MINUS           reduce using rule 80 (const -> IDENTIFIER .)
    OR              reduce using rule 80 (const -> IDENTIFIER .)
    LESS_THAN       reduce using rule 80 (const -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 80 (const -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 80 (const -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 80 (const -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 80 (const -> IDENTIFIER .)
    EQUALS          reduce using rule 80 (const -> IDENTIFIER .)
    RPAREN          reduce using rule 80 (const -> IDENTIFIER .)

  ! PLUSPLUS        [ reduce using rule 80 (const -> IDENTIFIER .) ]
  ! MINUSMINUS      [ reduce using rule 80 (const -> IDENTIFIER .) ]


state 171

    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement . RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    RCURLYBRACE     shift and go to state 176


state 172

    (36) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement . RCURLYBRACE seencurlywhile

    RCURLYBRACE     shift and go to state 177


state 173

    (39) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor . RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    RPAREN          shift and go to state 178


state 174

    (40) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor . RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    RPAREN          shift and go to state 179


state 175

    (45) assignfor -> IDENTIFIER ASSIGNOP . expression assignnow
    (47) expression -> . simpleexpression
    (48) expression -> . simpleexpression LESS_THAN seenoperator simpleexpression genquad
    (49) expression -> . simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad
    (50) expression -> . simpleexpression GREATER_THAN seenoperator simpleexpression genquad
    (51) expression -> . simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad
    (52) expression -> . simpleexpression NOT_EQUALS seenoperator simpleexpression genquad
    (53) expression -> . simpleexpression EQUALS seenoperator simpleexpression genquad
    (54) expression -> . IDENTIFIER PLUSPLUS seenunary
    (55) expression -> . IDENTIFIER MINUSMINUS seenunary
    (57) simpleexpression -> . term seenterm simpleexpressionp
    (63) term -> . factor seenfactor termp
    (75) factor -> . const
    (76) factor -> . LPAREN seenoperator expression RPAREN exitparen
    (78) const -> . PLUS IDENTIFIER
    (79) const -> . MINUS IDENTIFIER
    (80) const -> . IDENTIFIER
    (81) const -> . PLUS NUMBER_CONST
    (82) const -> . MINUS NUMBER_CONST
    (83) const -> . NUMBER_CONST
    (84) const -> . STRING_CONST

    IDENTIFIER      shift and go to state 54
    LPAREN          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NUMBER_CONST    shift and go to state 63
    STRING_CONST    shift and go to state 64

    expression                     shift and go to state 180
    simpleexpression               shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    const                          shift and go to state 59

state 176

    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif seencurlyelse
    (30) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif ELSE condition seencurlyelse
    (31) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE . seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (34) seencurlyif -> .

    ELSE            reduce using rule 34 (seencurlyif -> .)
    IDENTIFIER      reduce using rule 34 (seencurlyif -> .)
    PRINT           reduce using rule 34 (seencurlyif -> .)
    WRITE           reduce using rule 34 (seencurlyif -> .)
    IF              reduce using rule 34 (seencurlyif -> .)
    WHILE           reduce using rule 34 (seencurlyif -> .)
    FOR             reduce using rule 34 (seencurlyif -> .)
    END             reduce using rule 34 (seencurlyif -> .)
    RCURLYBRACE     reduce using rule 34 (seencurlyif -> .)

    seencurlyif                    shift and go to state 181

state 177

    (36) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE . seencurlywhile
    (38) seencurlywhile -> .

    IDENTIFIER      reduce using rule 38 (seencurlywhile -> .)
    PRINT           reduce using rule 38 (seencurlywhile -> .)
    WRITE           reduce using rule 38 (seencurlywhile -> .)
    IF              reduce using rule 38 (seencurlywhile -> .)
    WHILE           reduce using rule 38 (seencurlywhile -> .)
    FOR             reduce using rule 38 (seencurlywhile -> .)
    END             reduce using rule 38 (seencurlywhile -> .)
    RCURLYBRACE     reduce using rule 38 (seencurlywhile -> .)

    seencurlywhile                 shift and go to state 182

state 178

    (39) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN . LCURLYBRACE statement RCURLYBRACE seencurlyfor

    LCURLYBRACE     shift and go to state 183


state 179

    (40) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN . LCURLYBRACE statement RCURLYBRACE seencurlyfor

    LCURLYBRACE     shift and go to state 184


state 180

    (45) assignfor -> IDENTIFIER ASSIGNOP expression . assignnow
    (46) assignnow -> .

    RPAREN          reduce using rule 46 (assignnow -> .)

    assignnow                      shift and go to state 185

state 181

    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . seencurlyelse
    (30) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . ELSE condition seencurlyelse
    (31) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif . ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (35) seencurlyelse -> .

    ELSE            shift and go to state 187
    IDENTIFIER      reduce using rule 35 (seencurlyelse -> .)
    PRINT           reduce using rule 35 (seencurlyelse -> .)
    WRITE           reduce using rule 35 (seencurlyelse -> .)
    IF              reduce using rule 35 (seencurlyelse -> .)
    WHILE           reduce using rule 35 (seencurlyelse -> .)
    FOR             reduce using rule 35 (seencurlyelse -> .)
    END             reduce using rule 35 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 35 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 186

state 182

    (36) while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .

    IDENTIFIER      reduce using rule 36 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    PRINT           reduce using rule 36 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    WRITE           reduce using rule 36 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    IF              reduce using rule 36 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    WHILE           reduce using rule 36 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    FOR             reduce using rule 36 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    END             reduce using rule 36 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)
    RCURLYBRACE     reduce using rule 36 (while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile .)


state 183

    (39) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE . statement RCURLYBRACE seencurlyfor
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (27) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
    (87) empty -> .
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (85) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (86) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (36) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (39) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    IDENTIFIER      shift and go to state 23
    RCURLYBRACE     reduce using rule 87 (empty -> .)
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    assign                         shift and go to state 18
    statement                      shift and go to state 188
    empty                          shift and go to state 17
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 184

    (40) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE . statement RCURLYBRACE seencurlyfor
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (27) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
    (87) empty -> .
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (85) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (86) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (36) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (39) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    IDENTIFIER      shift and go to state 23
    RCURLYBRACE     reduce using rule 87 (empty -> .)
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    assign                         shift and go to state 18
    statement                      shift and go to state 189
    empty                          shift and go to state 17
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 185

    (45) assignfor -> IDENTIFIER ASSIGNOP expression assignnow .

    RPAREN          reduce using rule 45 (assignfor -> IDENTIFIER ASSIGNOP expression assignnow .)


state 186

    (29) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .

    IDENTIFIER      reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    PRINT           reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    WRITE           reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    IF              reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    WHILE           reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    FOR             reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    END             reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)
    RCURLYBRACE     reduce using rule 29 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse .)


state 187

    (30) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE . condition seencurlyelse
    (31) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE . LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse

    LCURLYBRACE     shift and go to state 190
    IF              shift and go to state 26

    condition                      shift and go to state 191

state 188

    (39) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement . RCURLYBRACE seencurlyfor

    RCURLYBRACE     shift and go to state 192


state 189

    (40) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement . RCURLYBRACE seencurlyfor

    RCURLYBRACE     shift and go to state 193


state 190

    (31) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE . statement RCURLYBRACE seencurlyelse
    (14) statement -> . empty
    (15) statement -> . assign
    (16) statement -> . assign statement
    (17) statement -> . writefunction
    (18) statement -> . writefunction statement
    (19) statement -> . condition
    (20) statement -> . condition statement
    (21) statement -> . while
    (22) statement -> . while statement
    (23) statement -> . for
    (24) statement -> . for statement
    (25) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON
    (26) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON
    (27) statement -> . IDENTIFIER PLUSPLUS seenunary SEMICOLON statement
    (28) statement -> . IDENTIFIER MINUSMINUS seenunary SEMICOLON statement
    (87) empty -> .
    (44) assign -> . IDENTIFIER ASSIGNOP expression assignnow SEMICOLON
    (85) writefunction -> . PRINT LPAREN expression RPAREN SEMICOLON
    (86) writefunction -> . WRITE LPAREN expression RPAREN SEMICOLON
    (29) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse
    (30) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse
    (31) condition -> . IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse
    (36) while -> . WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile
    (39) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor
    (40) for -> . FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor

    IDENTIFIER      shift and go to state 23
    RCURLYBRACE     reduce using rule 87 (empty -> .)
    PRINT           shift and go to state 24
    WRITE           shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 194
    empty                          shift and go to state 17
    assign                         shift and go to state 18
    writefunction                  shift and go to state 19
    condition                      shift and go to state 20
    while                          shift and go to state 21
    for                            shift and go to state 22

state 191

    (30) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition . seencurlyelse
    (35) seencurlyelse -> .

    IDENTIFIER      reduce using rule 35 (seencurlyelse -> .)
    PRINT           reduce using rule 35 (seencurlyelse -> .)
    WRITE           reduce using rule 35 (seencurlyelse -> .)
    IF              reduce using rule 35 (seencurlyelse -> .)
    WHILE           reduce using rule 35 (seencurlyelse -> .)
    FOR             reduce using rule 35 (seencurlyelse -> .)
    END             reduce using rule 35 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 35 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 195

state 192

    (39) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE . seencurlyfor
    (43) seencurlyfor -> .

    IDENTIFIER      reduce using rule 43 (seencurlyfor -> .)
    PRINT           reduce using rule 43 (seencurlyfor -> .)
    WRITE           reduce using rule 43 (seencurlyfor -> .)
    IF              reduce using rule 43 (seencurlyfor -> .)
    WHILE           reduce using rule 43 (seencurlyfor -> .)
    FOR             reduce using rule 43 (seencurlyfor -> .)
    END             reduce using rule 43 (seencurlyfor -> .)
    RCURLYBRACE     reduce using rule 43 (seencurlyfor -> .)

    seencurlyfor                   shift and go to state 196

state 193

    (40) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE . seencurlyfor
    (43) seencurlyfor -> .

    IDENTIFIER      reduce using rule 43 (seencurlyfor -> .)
    PRINT           reduce using rule 43 (seencurlyfor -> .)
    WRITE           reduce using rule 43 (seencurlyfor -> .)
    IF              reduce using rule 43 (seencurlyfor -> .)
    WHILE           reduce using rule 43 (seencurlyfor -> .)
    FOR             reduce using rule 43 (seencurlyfor -> .)
    END             reduce using rule 43 (seencurlyfor -> .)
    RCURLYBRACE     reduce using rule 43 (seencurlyfor -> .)

    seencurlyfor                   shift and go to state 197

state 194

    (31) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement . RCURLYBRACE seencurlyelse

    RCURLYBRACE     shift and go to state 198


state 195

    (30) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .

    IDENTIFIER      reduce using rule 30 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    PRINT           reduce using rule 30 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    WRITE           reduce using rule 30 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    IF              reduce using rule 30 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    WHILE           reduce using rule 30 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    FOR             reduce using rule 30 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    END             reduce using rule 30 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)
    RCURLYBRACE     reduce using rule 30 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse .)


state 196

    (39) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .

    IDENTIFIER      reduce using rule 39 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    PRINT           reduce using rule 39 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    WRITE           reduce using rule 39 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    IF              reduce using rule 39 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    WHILE           reduce using rule 39 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    FOR             reduce using rule 39 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    END             reduce using rule 39 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    RCURLYBRACE     reduce using rule 39 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)


state 197

    (40) for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .

    IDENTIFIER      reduce using rule 40 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    PRINT           reduce using rule 40 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    WRITE           reduce using rule 40 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    IF              reduce using rule 40 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    WHILE           reduce using rule 40 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    FOR             reduce using rule 40 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    END             reduce using rule 40 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)
    RCURLYBRACE     reduce using rule 40 (for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor .)


state 198

    (31) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE . seencurlyelse
    (35) seencurlyelse -> .

    IDENTIFIER      reduce using rule 35 (seencurlyelse -> .)
    PRINT           reduce using rule 35 (seencurlyelse -> .)
    WRITE           reduce using rule 35 (seencurlyelse -> .)
    IF              reduce using rule 35 (seencurlyelse -> .)
    WHILE           reduce using rule 35 (seencurlyelse -> .)
    FOR             reduce using rule 35 (seencurlyelse -> .)
    END             reduce using rule 35 (seencurlyelse -> .)
    RCURLYBRACE     reduce using rule 35 (seencurlyelse -> .)

    seencurlyelse                  shift and go to state 199

state 199

    (31) condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .

    IDENTIFIER      reduce using rule 31 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    PRINT           reduce using rule 31 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    WRITE           reduce using rule 31 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    IF              reduce using rule 31 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    WHILE           reduce using rule 31 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    FOR             reduce using rule 31 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    END             reduce using rule 31 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)
    RCURLYBRACE     reduce using rule 31 (condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUSPLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 170 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 170 resolved as shift
WARNING: reduce/reduce conflict in state 18 resolved using rule (statement -> assign)
WARNING: rejected rule (empty -> <empty>) in state 18
WARNING: reduce/reduce conflict in state 19 resolved using rule (statement -> writefunction)
WARNING: rejected rule (empty -> <empty>) in state 19
WARNING: reduce/reduce conflict in state 20 resolved using rule (statement -> condition)
WARNING: rejected rule (empty -> <empty>) in state 20
WARNING: reduce/reduce conflict in state 21 resolved using rule (statement -> while)
WARNING: rejected rule (empty -> <empty>) in state 21
WARNING: reduce/reduce conflict in state 22 resolved using rule (statement -> for)
WARNING: rejected rule (empty -> <empty>) in state 22
WARNING: reduce/reduce conflict in state 71 resolved using rule (vars -> VAR varsp COLON type seentype SEMICOLON)
WARNING: rejected rule (empty -> <empty>) in state 71
WARNING: reduce/reduce conflict in state 72 resolved using rule (statement -> IDENTIFIER PLUSPLUS seenunary SEMICOLON)
WARNING: rejected rule (empty -> <empty>) in state 72
WARNING: reduce/reduce conflict in state 73 resolved using rule (statement -> IDENTIFIER MINUSMINUS seenunary SEMICOLON)
WARNING: rejected rule (empty -> <empty>) in state 73
