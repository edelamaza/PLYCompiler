
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGNOP BEGIN BOOLEAN CHAR COLON COMMA DIV DIVIDE DO ELSE END EQUALS FALSE FOR GREATER_THAN GREATER_THAN_EQUALS IDENTIFIER IF INT LBRACKET LCURLYBRACE LESS_THAN LESS_THAN_EQUALS LPAREN MINUS MINUSMINUS MOD MULTIPLY NOT NOT_EQUALS NUMBER_CONST OR PERIOD PLUS PLUSPLUS PRINT PROGRAM RBRACKET RCURLYBRACE REAL RPAREN SEMICOLON STRING STRING_CONST THEN TRUE VAR WHILE WRITEprogram : PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACEvars : VAR varsp COLON type seentype SEMICOLON\n            | VAR varsp COLON type seentype SEMICOLON vars\n            | empty varsp : IDENTIFIER seenid\n            | IDENTIFIER seenid COMMA varspseenid : seentype : type : INT\n            | REAL\n            | STRING\n            | BOOLEANblock : BEGIN SEMICOLON statement END SEMICOLONstatement : empty\n                | assign\n                | assign statement\n                | writefunction\n                | writefunction statementassign : IDENTIFIER ASSIGNOP expression assignnow SEMICOLONassignnow : expression : simpleexpression\n                | simpleexpression LESS_THAN seenoperator simpleexpression genquad\n                | simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression GREATER_THAN seenoperator simpleexpression genquad\n                | simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression NOT_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression EQUALS seenoperator simpleexpression genquad\n                    simpleexpression : term seenterm simpleexpressionpseenterm :  simpleexpressionp : empty\n                        | PLUS seenoperator simpleexpression\n                        | MINUS seenoperator simpleexpression\n                        | OR seenoperator simpleexpressionterm : factor seenfactor termptermp : empty\n            | MULTIPLY seenoperator term\n            | DIV seenoperator term\n            | DIVIDE seenoperator term\n            | MOD seenoperator term\n            | AND seenoperator term \n            | PLUSPLUS seenoperator\n            | MINUSMINUS seenoperatorseenoperator : seenfactor :  genquad : factor : const\n                | LPAREN expression RPARENconst : PLUS IDENTIFIER\n            | MINUS IDENTIFIER\n            | IDENTIFIER\n            | PLUS NUMBER_CONST\n            | MINUS NUMBER_CONST\n            | NUMBER_CONST\n            | STRING_CONST\n    writefunction : PRINT LPAREN expression RPAREN SEMICOLON\n                    | WRITE LPAREN expression RPAREN SEMICOLONempty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,],[0,-1,]),'IDENTIFIER':([2,6,13,18,19,28,32,33,34,44,45,46,53,54,55,56,57,58,69,70,71,72,73,74,75,78,79,80,83,84,85,86,87,91,92,99,100,101,102,103,104,105,106,],[3,11,20,20,20,11,38,38,38,38,62,64,-43,-43,-43,-43,-43,-43,-19,38,38,38,38,38,38,-43,-43,-43,-43,-43,-43,-43,-43,-55,-56,38,38,38,38,38,38,38,38,]),'LCURLYBRACE':([3,],[4,]),'VAR':([4,51,],[6,6,]),'BEGIN':([4,5,7,51,68,],[-57,9,-4,-2,-3,]),'RCURLYBRACE':([8,37,],[12,-13,]),'SEMICOLON':([9,23,24,25,26,27,29,35,38,39,40,41,42,43,47,48,52,59,60,62,63,64,65,66,67,76,77,81,82,88,89,90,93,94,95,96,97,98,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,],[13,-8,-9,-10,-11,-12,37,51,-50,-20,-21,-29,-44,-46,-53,-54,69,-57,-57,-48,-51,-49,-52,91,92,-28,-30,-34,-35,-43,-43,-47,-45,-45,-45,-45,-45,-45,-41,-42,-22,-23,-24,-25,-26,-27,-31,-32,-33,-36,-37,-38,-39,-40,]),'COLON':([10,11,15,36,],[14,-7,-5,-6,]),'COMMA':([11,15,],[-7,28,]),'END':([13,16,17,18,19,30,31,69,91,92,],[-57,29,-14,-15,-17,-16,-18,-19,-55,-56,]),'PRINT':([13,18,19,69,91,92,],[21,21,21,-19,-55,-56,]),'WRITE':([13,18,19,69,91,92,],[22,22,22,-19,-55,-56,]),'INT':([14,],[24,]),'REAL':([14,],[25,]),'STRING':([14,],[26,]),'BOOLEAN':([14,],[27,]),'ASSIGNOP':([20,],[32,]),'LPAREN':([21,22,32,33,34,44,53,54,55,56,57,58,70,71,72,73,74,75,78,79,80,83,84,85,86,87,99,100,101,102,103,104,105,106,],[33,34,44,44,44,44,-43,-43,-43,-43,-43,-43,44,44,44,44,44,44,-43,-43,-43,-43,-43,-43,-43,-43,44,44,44,44,44,44,44,44,]),'PLUS':([32,33,34,38,41,42,43,44,47,48,53,54,55,56,57,58,59,60,62,63,64,65,70,71,72,73,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,107,108,118,119,120,121,122,],[45,45,45,-50,-29,-44,-46,45,-53,-54,-43,-43,-43,-43,-43,-43,78,-57,-48,-51,-49,-52,45,45,45,45,45,45,-43,-43,-43,-34,-35,-43,-43,-43,-43,-43,-43,-43,-47,45,45,45,45,45,45,45,45,-41,-42,-36,-37,-38,-39,-40,]),'MINUS':([32,33,34,38,41,42,43,44,47,48,53,54,55,56,57,58,59,60,62,63,64,65,70,71,72,73,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,107,108,118,119,120,121,122,],[46,46,46,-50,-29,-44,-46,46,-53,-54,-43,-43,-43,-43,-43,-43,79,-57,-48,-51,-49,-52,46,46,46,46,46,46,-43,-43,-43,-34,-35,-43,-43,-43,-43,-43,-43,-43,-47,46,46,46,46,46,46,46,46,-41,-42,-36,-37,-38,-39,-40,]),'NUMBER_CONST':([32,33,34,44,45,46,53,54,55,56,57,58,70,71,72,73,74,75,78,79,80,83,84,85,86,87,99,100,101,102,103,104,105,106,],[47,47,47,47,63,65,-43,-43,-43,-43,-43,-43,47,47,47,47,47,47,-43,-43,-43,-43,-43,-43,-43,-43,47,47,47,47,47,47,47,47,]),'STRING_CONST':([32,33,34,44,53,54,55,56,57,58,70,71,72,73,74,75,78,79,80,83,84,85,86,87,99,100,101,102,103,104,105,106,],[48,48,48,48,-43,-43,-43,-43,-43,-43,48,48,48,48,48,48,-43,-43,-43,-43,-43,-43,-43,-43,48,48,48,48,48,48,48,48,]),'MULTIPLY':([38,42,43,47,48,60,62,63,64,65,90,],[-50,-44,-46,-53,-54,83,-48,-51,-49,-52,-47,]),'DIV':([38,42,43,47,48,60,62,63,64,65,90,],[-50,-44,-46,-53,-54,84,-48,-51,-49,-52,-47,]),'DIVIDE':([38,42,43,47,48,60,62,63,64,65,90,],[-50,-44,-46,-53,-54,85,-48,-51,-49,-52,-47,]),'MOD':([38,42,43,47,48,60,62,63,64,65,90,],[-50,-44,-46,-53,-54,86,-48,-51,-49,-52,-47,]),'AND':([38,42,43,47,48,60,62,63,64,65,90,],[-50,-44,-46,-53,-54,87,-48,-51,-49,-52,-47,]),'PLUSPLUS':([38,42,43,47,48,60,62,63,64,65,90,],[-50,-44,-46,-53,-54,88,-48,-51,-49,-52,-47,]),'MINUSMINUS':([38,42,43,47,48,60,62,63,64,65,90,],[-50,-44,-46,-53,-54,89,-48,-51,-49,-52,-47,]),'OR':([38,41,42,43,47,48,59,60,62,63,64,65,81,82,88,89,90,107,108,118,119,120,121,122,],[-50,-29,-44,-46,-53,-54,80,-57,-48,-51,-49,-52,-34,-35,-43,-43,-47,-41,-42,-36,-37,-38,-39,-40,]),'LESS_THAN':([38,40,41,42,43,47,48,59,60,62,63,64,65,76,77,81,82,88,89,90,107,108,115,116,117,118,119,120,121,122,],[-50,53,-29,-44,-46,-53,-54,-57,-57,-48,-51,-49,-52,-28,-30,-34,-35,-43,-43,-47,-41,-42,-31,-32,-33,-36,-37,-38,-39,-40,]),'LESS_THAN_EQUALS':([38,40,41,42,43,47,48,59,60,62,63,64,65,76,77,81,82,88,89,90,107,108,115,116,117,118,119,120,121,122,],[-50,54,-29,-44,-46,-53,-54,-57,-57,-48,-51,-49,-52,-28,-30,-34,-35,-43,-43,-47,-41,-42,-31,-32,-33,-36,-37,-38,-39,-40,]),'GREATER_THAN':([38,40,41,42,43,47,48,59,60,62,63,64,65,76,77,81,82,88,89,90,107,108,115,116,117,118,119,120,121,122,],[-50,55,-29,-44,-46,-53,-54,-57,-57,-48,-51,-49,-52,-28,-30,-34,-35,-43,-43,-47,-41,-42,-31,-32,-33,-36,-37,-38,-39,-40,]),'GREATER_THAN_EQUALS':([38,40,41,42,43,47,48,59,60,62,63,64,65,76,77,81,82,88,89,90,107,108,115,116,117,118,119,120,121,122,],[-50,56,-29,-44,-46,-53,-54,-57,-57,-48,-51,-49,-52,-28,-30,-34,-35,-43,-43,-47,-41,-42,-31,-32,-33,-36,-37,-38,-39,-40,]),'NOT_EQUALS':([38,40,41,42,43,47,48,59,60,62,63,64,65,76,77,81,82,88,89,90,107,108,115,116,117,118,119,120,121,122,],[-50,57,-29,-44,-46,-53,-54,-57,-57,-48,-51,-49,-52,-28,-30,-34,-35,-43,-43,-47,-41,-42,-31,-32,-33,-36,-37,-38,-39,-40,]),'EQUALS':([38,40,41,42,43,47,48,59,60,62,63,64,65,76,77,81,82,88,89,90,107,108,115,116,117,118,119,120,121,122,],[-50,58,-29,-44,-46,-53,-54,-57,-57,-48,-51,-49,-52,-28,-30,-34,-35,-43,-43,-47,-41,-42,-31,-32,-33,-36,-37,-38,-39,-40,]),'RPAREN':([38,40,41,42,43,47,48,49,50,59,60,61,62,63,64,65,76,77,81,82,88,89,90,93,94,95,96,97,98,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,],[-50,-21,-29,-44,-46,-53,-54,66,67,-57,-57,90,-48,-51,-49,-52,-28,-30,-34,-35,-43,-43,-47,-45,-45,-45,-45,-45,-45,-41,-42,-22,-23,-24,-25,-26,-27,-31,-32,-33,-36,-37,-38,-39,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,51,],[5,68,]),'empty':([4,13,18,19,51,59,60,],[7,17,17,17,7,77,82,]),'block':([5,],[8,]),'varsp':([6,28,],[10,36,]),'seenid':([11,],[15,]),'statement':([13,18,19,],[16,30,31,]),'assign':([13,18,19,],[18,18,18,]),'writefunction':([13,18,19,],[19,19,19,]),'type':([14,],[23,]),'seentype':([23,],[35,]),'expression':([32,33,34,44,],[39,49,50,61,]),'simpleexpression':([32,33,34,44,70,71,72,73,74,75,99,100,101,],[40,40,40,40,93,94,95,96,97,98,115,116,117,]),'term':([32,33,34,44,70,71,72,73,74,75,99,100,101,102,103,104,105,106,],[41,41,41,41,41,41,41,41,41,41,41,41,41,118,119,120,121,122,]),'factor':([32,33,34,44,70,71,72,73,74,75,99,100,101,102,103,104,105,106,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'const':([32,33,34,44,70,71,72,73,74,75,99,100,101,102,103,104,105,106,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'assignnow':([39,],[52,]),'seenterm':([41,],[59,]),'seenfactor':([42,],[60,]),'seenoperator':([53,54,55,56,57,58,78,79,80,83,84,85,86,87,88,89,],[70,71,72,73,74,75,99,100,101,102,103,104,105,106,107,108,]),'simpleexpressionp':([59,],[76,]),'termp':([60,],[81,]),'genquad':([93,94,95,96,97,98,],[109,110,111,112,113,114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE','program',6,'p_program','parser_1.py',123),
  ('vars -> VAR varsp COLON type seentype SEMICOLON','vars',6,'p_vars','parser_1.py',128),
  ('vars -> VAR varsp COLON type seentype SEMICOLON vars','vars',7,'p_vars','parser_1.py',129),
  ('vars -> empty','vars',1,'p_vars','parser_1.py',130),
  ('varsp -> IDENTIFIER seenid','varsp',2,'p_varsp','parser_1.py',134),
  ('varsp -> IDENTIFIER seenid COMMA varsp','varsp',4,'p_varsp','parser_1.py',135),
  ('seenid -> <empty>','seenid',0,'p_seenid','parser_1.py',139),
  ('seentype -> <empty>','seentype',0,'p_seentype','parser_1.py',146),
  ('type -> INT','type',1,'p_type','parser_1.py',164),
  ('type -> REAL','type',1,'p_type','parser_1.py',165),
  ('type -> STRING','type',1,'p_type','parser_1.py',166),
  ('type -> BOOLEAN','type',1,'p_type','parser_1.py',167),
  ('block -> BEGIN SEMICOLON statement END SEMICOLON','block',5,'p_block','parser_1.py',172),
  ('statement -> empty','statement',1,'p_statement','parser_1.py',189),
  ('statement -> assign','statement',1,'p_statement','parser_1.py',190),
  ('statement -> assign statement','statement',2,'p_statement','parser_1.py',191),
  ('statement -> writefunction','statement',1,'p_statement','parser_1.py',192),
  ('statement -> writefunction statement','statement',2,'p_statement','parser_1.py',193),
  ('assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON','assign',5,'p_assign','parser_1.py',202),
  ('assignnow -> <empty>','assignnow',0,'p_assignnow','parser_1.py',206),
  ('expression -> simpleexpression','expression',1,'p_expression','parser_1.py',219),
  ('expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',220),
  ('expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',221),
  ('expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',222),
  ('expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',223),
  ('expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',224),
  ('expression -> simpleexpression EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',225),
  ('simpleexpression -> term seenterm simpleexpressionp','simpleexpression',3,'p_simpleexpression','parser_1.py',235),
  ('seenterm -> <empty>','seenterm',0,'p_seenterm','parser_1.py',252),
  ('simpleexpressionp -> empty','simpleexpressionp',1,'p_simpleexpressionp','parser_1.py',260),
  ('simpleexpressionp -> PLUS seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',261),
  ('simpleexpressionp -> MINUS seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',262),
  ('simpleexpressionp -> OR seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',263),
  ('term -> factor seenfactor termp','term',3,'p_term','parser_1.py',267),
  ('termp -> empty','termp',1,'p_termp','parser_1.py',280),
  ('termp -> MULTIPLY seenoperator term','termp',3,'p_termp','parser_1.py',281),
  ('termp -> DIV seenoperator term','termp',3,'p_termp','parser_1.py',282),
  ('termp -> DIVIDE seenoperator term','termp',3,'p_termp','parser_1.py',283),
  ('termp -> MOD seenoperator term','termp',3,'p_termp','parser_1.py',284),
  ('termp -> AND seenoperator term','termp',3,'p_termp','parser_1.py',285),
  ('termp -> PLUSPLUS seenoperator','termp',2,'p_termp','parser_1.py',286),
  ('termp -> MINUSMINUS seenoperator','termp',2,'p_termp','parser_1.py',287),
  ('seenoperator -> <empty>','seenoperator',0,'p_seenoperator','parser_1.py',291),
  ('seenfactor -> <empty>','seenfactor',0,'p_seenfactor','parser_1.py',297),
  ('genquad -> <empty>','genquad',0,'p_genquad','parser_1.py',308),
  ('factor -> const','factor',1,'p_factor','parser_1.py',314),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser_1.py',315),
  ('const -> PLUS IDENTIFIER','const',2,'p_const','parser_1.py',323),
  ('const -> MINUS IDENTIFIER','const',2,'p_const','parser_1.py',324),
  ('const -> IDENTIFIER','const',1,'p_const','parser_1.py',325),
  ('const -> PLUS NUMBER_CONST','const',2,'p_const','parser_1.py',326),
  ('const -> MINUS NUMBER_CONST','const',2,'p_const','parser_1.py',327),
  ('const -> NUMBER_CONST','const',1,'p_const','parser_1.py',328),
  ('const -> STRING_CONST','const',1,'p_const','parser_1.py',329),
  ('writefunction -> PRINT LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',371),
  ('writefunction -> WRITE LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',372),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',377),
]
