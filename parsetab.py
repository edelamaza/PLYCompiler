
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGNOP BEGIN BOOLEAN CHAR COLON COMMA DIV DIVIDE DO ELSE END EQUALS FALSE FOR GREATER_THAN GREATER_THAN_EQUALS IDENTIFIER IF INT LBRACKET LCURLYBRACE LESS_THAN LESS_THAN_EQUALS LPAREN MINUS MINUSMINUS MOD MULTIPLY NOT NOT_EQUALS NUMBER_CONST OR PERIOD PLUS PLUSPLUS PRINT PROGRAM RBRACKET RCURLYBRACE REAL RPAREN SEMICOLON STRING STRING_CONST THEN TRUE VAR WHILE WRITEprogram : PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACEvars : VAR varsp COLON type seentype SEMICOLON\n            | VAR varsp COLON type seentype SEMICOLON vars\n            | empty varsp : IDENTIFIER seenid\n            | IDENTIFIER seenid COMMA varspseenid : seentype : type : INT\n            | REAL\n            | STRING\n            | BOOLEANblock : BEGIN SEMICOLON statement END SEMICOLONstatement : empty\n                | assign\n                | assign statement\n                | writefunction\n                | writefunction statement\n                | condition\n                | condition statement\n                | while\n                | while statementcondition : IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse\n                | IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse\n                | IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelsecheckbool : seenif : seencurlyif : seencurlyelse : while : WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile seenwhile : seencurlywhile : assign : IDENTIFIER ASSIGNOP expression assignnow SEMICOLONassignnow : expression : simpleexpression\n                | simpleexpression LESS_THAN seenoperator simpleexpression genquad\n                | simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression GREATER_THAN seenoperator simpleexpression genquad\n                | simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression NOT_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression EQUALS seenoperator simpleexpression genquad\n                    simpleexpression : term seenterm simpleexpressionpseenterm :  simpleexpressionp : empty\n                        | PLUS seenoperator simpleexpression\n                        | MINUS seenoperator simpleexpression\n                        | OR seenoperator simpleexpressionterm : factor seenfactor termptermp : empty\n            | MULTIPLY seenoperator term\n            | DIV seenoperator term\n            | DIVIDE seenoperator term\n            | MOD seenoperator term\n            | AND seenoperator term\n            | PLUSPLUS seenoperator\n            | MINUSMINUS seenoperatorseenoperator : seenfactor :  genquad : factor : const\n                | LPAREN seenoperator expression RPAREN exitparenexitparen : const : PLUS IDENTIFIER\n            | MINUS IDENTIFIER\n            | IDENTIFIER\n            | PLUS NUMBER_CONST\n            | MINUS NUMBER_CONST\n            | NUMBER_CONST\n            | STRING_CONST\n    writefunction : PRINT LPAREN expression RPAREN SEMICOLON\n                    | WRITE LPAREN expression RPAREN SEMICOLONempty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,],[0,-1,]),'IDENTIFIER':([2,6,13,18,19,20,21,32,38,39,40,41,42,52,53,54,63,64,65,66,67,68,71,81,82,83,84,85,86,87,90,91,92,95,96,97,98,99,103,104,113,114,115,116,117,118,119,120,143,144,147,148,149,150,151,153,154,156,157,158,],[3,11,22,22,22,22,22,11,46,46,46,46,46,-57,72,74,-57,-57,-57,-57,-57,-57,46,-33,46,46,46,46,46,46,-57,-57,-57,-57,-57,-57,-57,-57,-70,-71,46,46,46,46,46,46,46,46,22,22,-28,-32,-29,-30,-23,22,-29,-24,-29,-25,]),'LCURLYBRACE':([3,141,142,152,],[4,143,144,153,]),'VAR':([4,61,],[6,6,]),'BEGIN':([4,5,7,61,80,],[-72,9,-4,-2,-3,]),'RCURLYBRACE':([8,17,18,19,20,21,34,35,36,37,45,81,103,104,143,144,145,146,147,148,149,150,151,153,154,155,156,157,158,],[12,-14,-15,-17,-19,-21,-16,-18,-20,-22,-13,-33,-70,-71,-72,-72,147,148,-28,-32,-29,-30,-23,-72,-29,157,-24,-29,-25,]),'SEMICOLON':([9,27,28,29,30,31,33,43,46,47,48,49,50,51,55,56,62,69,70,72,73,74,75,76,77,88,89,93,94,100,101,107,108,109,110,111,112,121,122,123,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,],[13,-8,-9,-10,-11,-12,45,61,-65,-34,-35,-43,-58,-60,-68,-69,81,-72,-72,-63,-66,-64,-67,103,104,-42,-44,-48,-49,-57,-57,-59,-59,-59,-59,-59,-59,-55,-56,-62,-36,-37,-38,-39,-40,-41,-45,-46,-47,-50,-51,-52,-53,-54,-61,]),'COLON':([10,11,15,44,],[14,-7,-5,-6,]),'COMMA':([11,15,],[-7,32,]),'END':([13,16,17,18,19,20,21,34,35,36,37,81,103,104,147,148,149,150,151,154,156,157,158,],[-72,33,-14,-15,-17,-19,-21,-16,-18,-20,-22,-33,-70,-71,-28,-32,-29,-30,-23,-29,-24,-29,-25,]),'PRINT':([13,18,19,20,21,81,103,104,143,144,147,148,149,150,151,153,154,156,157,158,],[23,23,23,23,23,-33,-70,-71,23,23,-28,-32,-29,-30,-23,23,-29,-24,-29,-25,]),'WRITE':([13,18,19,20,21,81,103,104,143,144,147,148,149,150,151,153,154,156,157,158,],[24,24,24,24,24,-33,-70,-71,24,24,-28,-32,-29,-30,-23,24,-29,-24,-29,-25,]),'IF':([13,18,19,20,21,81,103,104,143,144,147,148,149,150,151,152,153,154,156,157,158,],[25,25,25,25,25,-33,-70,-71,25,25,-28,-32,-29,-30,-23,25,25,-29,-24,-29,-25,]),'WHILE':([13,18,19,20,21,81,103,104,143,144,147,148,149,150,151,153,154,156,157,158,],[26,26,26,26,26,-33,-70,-71,26,26,-28,-32,-29,-30,-23,26,-29,-24,-29,-25,]),'INT':([14,],[28,]),'REAL':([14,],[29,]),'STRING':([14,],[30,]),'BOOLEAN':([14,],[31,]),'ASSIGNOP':([22,],[38,]),'LPAREN':([23,24,25,26,38,39,40,41,42,52,63,64,65,66,67,68,71,82,83,84,85,86,87,90,91,92,95,96,97,98,99,113,114,115,116,117,118,119,120,],[39,40,41,42,52,52,52,52,52,-57,-57,-57,-57,-57,-57,-57,52,52,52,52,52,52,52,-57,-57,-57,-57,-57,-57,-57,-57,52,52,52,52,52,52,52,52,]),'PLUS':([38,39,40,41,42,46,49,50,51,52,55,56,63,64,65,66,67,68,69,70,71,72,73,74,75,82,83,84,85,86,87,90,91,92,93,94,95,96,97,98,99,100,101,113,114,115,116,117,118,119,120,121,122,123,135,136,137,138,139,140,],[53,53,53,53,53,-65,-43,-58,-60,-57,-68,-69,-57,-57,-57,-57,-57,-57,90,-72,53,-63,-66,-64,-67,53,53,53,53,53,53,-57,-57,-57,-48,-49,-57,-57,-57,-57,-57,-57,-57,53,53,53,53,53,53,53,53,-55,-56,-62,-50,-51,-52,-53,-54,-61,]),'MINUS':([38,39,40,41,42,46,49,50,51,52,55,56,63,64,65,66,67,68,69,70,71,72,73,74,75,82,83,84,85,86,87,90,91,92,93,94,95,96,97,98,99,100,101,113,114,115,116,117,118,119,120,121,122,123,135,136,137,138,139,140,],[54,54,54,54,54,-65,-43,-58,-60,-57,-68,-69,-57,-57,-57,-57,-57,-57,91,-72,54,-63,-66,-64,-67,54,54,54,54,54,54,-57,-57,-57,-48,-49,-57,-57,-57,-57,-57,-57,-57,54,54,54,54,54,54,54,54,-55,-56,-62,-50,-51,-52,-53,-54,-61,]),'NUMBER_CONST':([38,39,40,41,42,52,53,54,63,64,65,66,67,68,71,82,83,84,85,86,87,90,91,92,95,96,97,98,99,113,114,115,116,117,118,119,120,],[55,55,55,55,55,-57,73,75,-57,-57,-57,-57,-57,-57,55,55,55,55,55,55,55,-57,-57,-57,-57,-57,-57,-57,-57,55,55,55,55,55,55,55,55,]),'STRING_CONST':([38,39,40,41,42,52,63,64,65,66,67,68,71,82,83,84,85,86,87,90,91,92,95,96,97,98,99,113,114,115,116,117,118,119,120,],[56,56,56,56,56,-57,-57,-57,-57,-57,-57,-57,56,56,56,56,56,56,56,-57,-57,-57,-57,-57,-57,-57,-57,56,56,56,56,56,56,56,56,]),'MULTIPLY':([46,50,51,55,56,70,72,73,74,75,123,140,],[-65,-58,-60,-68,-69,95,-63,-66,-64,-67,-62,-61,]),'DIV':([46,50,51,55,56,70,72,73,74,75,123,140,],[-65,-58,-60,-68,-69,96,-63,-66,-64,-67,-62,-61,]),'DIVIDE':([46,50,51,55,56,70,72,73,74,75,123,140,],[-65,-58,-60,-68,-69,97,-63,-66,-64,-67,-62,-61,]),'MOD':([46,50,51,55,56,70,72,73,74,75,123,140,],[-65,-58,-60,-68,-69,98,-63,-66,-64,-67,-62,-61,]),'AND':([46,50,51,55,56,70,72,73,74,75,123,140,],[-65,-58,-60,-68,-69,99,-63,-66,-64,-67,-62,-61,]),'PLUSPLUS':([46,50,51,55,56,70,72,73,74,75,123,140,],[-65,-58,-60,-68,-69,100,-63,-66,-64,-67,-62,-61,]),'MINUSMINUS':([46,50,51,55,56,70,72,73,74,75,123,140,],[-65,-58,-60,-68,-69,101,-63,-66,-64,-67,-62,-61,]),'OR':([46,49,50,51,55,56,69,70,72,73,74,75,93,94,100,101,121,122,123,135,136,137,138,139,140,],[-65,-43,-58,-60,-68,-69,92,-72,-63,-66,-64,-67,-48,-49,-57,-57,-55,-56,-62,-50,-51,-52,-53,-54,-61,]),'LESS_THAN':([46,48,49,50,51,55,56,69,70,72,73,74,75,88,89,93,94,100,101,121,122,123,132,133,134,135,136,137,138,139,140,],[-65,63,-43,-58,-60,-68,-69,-72,-72,-63,-66,-64,-67,-42,-44,-48,-49,-57,-57,-55,-56,-62,-45,-46,-47,-50,-51,-52,-53,-54,-61,]),'LESS_THAN_EQUALS':([46,48,49,50,51,55,56,69,70,72,73,74,75,88,89,93,94,100,101,121,122,123,132,133,134,135,136,137,138,139,140,],[-65,64,-43,-58,-60,-68,-69,-72,-72,-63,-66,-64,-67,-42,-44,-48,-49,-57,-57,-55,-56,-62,-45,-46,-47,-50,-51,-52,-53,-54,-61,]),'GREATER_THAN':([46,48,49,50,51,55,56,69,70,72,73,74,75,88,89,93,94,100,101,121,122,123,132,133,134,135,136,137,138,139,140,],[-65,65,-43,-58,-60,-68,-69,-72,-72,-63,-66,-64,-67,-42,-44,-48,-49,-57,-57,-55,-56,-62,-45,-46,-47,-50,-51,-52,-53,-54,-61,]),'GREATER_THAN_EQUALS':([46,48,49,50,51,55,56,69,70,72,73,74,75,88,89,93,94,100,101,121,122,123,132,133,134,135,136,137,138,139,140,],[-65,66,-43,-58,-60,-68,-69,-72,-72,-63,-66,-64,-67,-42,-44,-48,-49,-57,-57,-55,-56,-62,-45,-46,-47,-50,-51,-52,-53,-54,-61,]),'NOT_EQUALS':([46,48,49,50,51,55,56,69,70,72,73,74,75,88,89,93,94,100,101,121,122,123,132,133,134,135,136,137,138,139,140,],[-65,67,-43,-58,-60,-68,-69,-72,-72,-63,-66,-64,-67,-42,-44,-48,-49,-57,-57,-55,-56,-62,-45,-46,-47,-50,-51,-52,-53,-54,-61,]),'EQUALS':([46,48,49,50,51,55,56,69,70,72,73,74,75,88,89,93,94,100,101,121,122,123,132,133,134,135,136,137,138,139,140,],[-65,68,-43,-58,-60,-68,-69,-72,-72,-63,-66,-64,-67,-42,-44,-48,-49,-57,-57,-55,-56,-62,-45,-46,-47,-50,-51,-52,-53,-54,-61,]),'RPAREN':([46,48,49,50,51,55,56,57,58,59,60,69,70,72,73,74,75,88,89,93,94,100,101,102,107,108,109,110,111,112,121,122,123,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,],[-65,-35,-43,-58,-60,-68,-69,76,77,78,79,-72,-72,-63,-66,-64,-67,-42,-44,-48,-49,-57,-57,123,-59,-59,-59,-59,-59,-59,-55,-56,-62,-36,-37,-38,-39,-40,-41,-45,-46,-47,-50,-51,-52,-53,-54,-61,]),'THEN':([78,105,124,],[-26,-27,141,]),'DO':([79,106,125,],[-26,-31,142,]),'ELSE':([147,149,],[-28,152,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,61,],[5,80,]),'empty':([4,13,18,19,20,21,61,69,70,143,144,153,],[7,17,17,17,17,17,7,89,94,17,17,17,]),'block':([5,],[8,]),'varsp':([6,32,],[10,44,]),'seenid':([11,],[15,]),'statement':([13,18,19,20,21,143,144,153,],[16,34,35,36,37,145,146,155,]),'assign':([13,18,19,20,21,143,144,153,],[18,18,18,18,18,18,18,18,]),'writefunction':([13,18,19,20,21,143,144,153,],[19,19,19,19,19,19,19,19,]),'condition':([13,18,19,20,21,143,144,152,153,],[20,20,20,20,20,20,20,154,20,]),'while':([13,18,19,20,21,143,144,153,],[21,21,21,21,21,21,21,21,]),'type':([14,],[27,]),'seentype':([27,],[43,]),'expression':([38,39,40,41,42,71,],[47,57,58,59,60,102,]),'simpleexpression':([38,39,40,41,42,71,82,83,84,85,86,87,113,114,115,],[48,48,48,48,48,48,107,108,109,110,111,112,132,133,134,]),'term':([38,39,40,41,42,71,82,83,84,85,86,87,113,114,115,116,117,118,119,120,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,135,136,137,138,139,]),'factor':([38,39,40,41,42,71,82,83,84,85,86,87,113,114,115,116,117,118,119,120,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'const':([38,39,40,41,42,71,82,83,84,85,86,87,113,114,115,116,117,118,119,120,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'assignnow':([47,],[62,]),'seenterm':([49,],[69,]),'seenfactor':([50,],[70,]),'seenoperator':([52,63,64,65,66,67,68,90,91,92,95,96,97,98,99,100,101,],[71,82,83,84,85,86,87,113,114,115,116,117,118,119,120,121,122,]),'simpleexpressionp':([69,],[88,]),'termp':([70,],[93,]),'checkbool':([78,79,],[105,106,]),'seenif':([105,],[124,]),'seenwhile':([106,],[125,]),'genquad':([107,108,109,110,111,112,],[126,127,128,129,130,131,]),'exitparen':([123,],[140,]),'seencurlyif':([147,],[149,]),'seencurlywhile':([148,],[150,]),'seencurlyelse':([149,154,157,],[151,156,158,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE','program',6,'p_program','parser_1.py',145),
  ('vars -> VAR varsp COLON type seentype SEMICOLON','vars',6,'p_vars','parser_1.py',150),
  ('vars -> VAR varsp COLON type seentype SEMICOLON vars','vars',7,'p_vars','parser_1.py',151),
  ('vars -> empty','vars',1,'p_vars','parser_1.py',152),
  ('varsp -> IDENTIFIER seenid','varsp',2,'p_varsp','parser_1.py',156),
  ('varsp -> IDENTIFIER seenid COMMA varsp','varsp',4,'p_varsp','parser_1.py',157),
  ('seenid -> <empty>','seenid',0,'p_seenid','parser_1.py',161),
  ('seentype -> <empty>','seentype',0,'p_seentype','parser_1.py',168),
  ('type -> INT','type',1,'p_type','parser_1.py',187),
  ('type -> REAL','type',1,'p_type','parser_1.py',188),
  ('type -> STRING','type',1,'p_type','parser_1.py',189),
  ('type -> BOOLEAN','type',1,'p_type','parser_1.py',190),
  ('block -> BEGIN SEMICOLON statement END SEMICOLON','block',5,'p_block','parser_1.py',195),
  ('statement -> empty','statement',1,'p_statement','parser_1.py',212),
  ('statement -> assign','statement',1,'p_statement','parser_1.py',213),
  ('statement -> assign statement','statement',2,'p_statement','parser_1.py',214),
  ('statement -> writefunction','statement',1,'p_statement','parser_1.py',215),
  ('statement -> writefunction statement','statement',2,'p_statement','parser_1.py',216),
  ('statement -> condition','statement',1,'p_statement','parser_1.py',217),
  ('statement -> condition statement','statement',2,'p_statement','parser_1.py',218),
  ('statement -> while','statement',1,'p_statement','parser_1.py',219),
  ('statement -> while statement','statement',2,'p_statement','parser_1.py',220),
  ('condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse','condition',12,'p_condition','parser_1.py',224),
  ('condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse','condition',14,'p_condition','parser_1.py',225),
  ('condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse','condition',16,'p_condition','parser_1.py',226),
  ('checkbool -> <empty>','checkbool',0,'p_checkbool','parser_1.py',230),
  ('seenif -> <empty>','seenif',0,'p_seenif','parser_1.py',236),
  ('seencurlyif -> <empty>','seencurlyif',0,'p_seencurlyif','parser_1.py',243),
  ('seencurlyelse -> <empty>','seencurlyelse',0,'p_seencurlyelse','parser_1.py',251),
  ('while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile','while',11,'p_while','parser_1.py',257),
  ('seenwhile -> <empty>','seenwhile',0,'p_seenwhile','parser_1.py',261),
  ('seencurlywhile -> <empty>','seencurlywhile',0,'p_seencurlywhile','parser_1.py',270),
  ('assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON','assign',5,'p_assign','parser_1.py',278),
  ('assignnow -> <empty>','assignnow',0,'p_assignnow','parser_1.py',282),
  ('expression -> simpleexpression','expression',1,'p_expression','parser_1.py',295),
  ('expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',296),
  ('expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',297),
  ('expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',298),
  ('expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',299),
  ('expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',300),
  ('expression -> simpleexpression EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',301),
  ('simpleexpression -> term seenterm simpleexpressionp','simpleexpression',3,'p_simpleexpression','parser_1.py',311),
  ('seenterm -> <empty>','seenterm',0,'p_seenterm','parser_1.py',328),
  ('simpleexpressionp -> empty','simpleexpressionp',1,'p_simpleexpressionp','parser_1.py',339),
  ('simpleexpressionp -> PLUS seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',340),
  ('simpleexpressionp -> MINUS seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',341),
  ('simpleexpressionp -> OR seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',342),
  ('term -> factor seenfactor termp','term',3,'p_term','parser_1.py',346),
  ('termp -> empty','termp',1,'p_termp','parser_1.py',359),
  ('termp -> MULTIPLY seenoperator term','termp',3,'p_termp','parser_1.py',360),
  ('termp -> DIV seenoperator term','termp',3,'p_termp','parser_1.py',361),
  ('termp -> DIVIDE seenoperator term','termp',3,'p_termp','parser_1.py',362),
  ('termp -> MOD seenoperator term','termp',3,'p_termp','parser_1.py',363),
  ('termp -> AND seenoperator term','termp',3,'p_termp','parser_1.py',364),
  ('termp -> PLUSPLUS seenoperator','termp',2,'p_termp','parser_1.py',365),
  ('termp -> MINUSMINUS seenoperator','termp',2,'p_termp','parser_1.py',366),
  ('seenoperator -> <empty>','seenoperator',0,'p_seenoperator','parser_1.py',370),
  ('seenfactor -> <empty>','seenfactor',0,'p_seenfactor','parser_1.py',376),
  ('genquad -> <empty>','genquad',0,'p_genquad','parser_1.py',384),
  ('factor -> const','factor',1,'p_factor','parser_1.py',390),
  ('factor -> LPAREN seenoperator expression RPAREN exitparen','factor',5,'p_factor','parser_1.py',391),
  ('exitparen -> <empty>','exitparen',0,'p_exitparen','parser_1.py',399),
  ('const -> PLUS IDENTIFIER','const',2,'p_const','parser_1.py',404),
  ('const -> MINUS IDENTIFIER','const',2,'p_const','parser_1.py',405),
  ('const -> IDENTIFIER','const',1,'p_const','parser_1.py',406),
  ('const -> PLUS NUMBER_CONST','const',2,'p_const','parser_1.py',407),
  ('const -> MINUS NUMBER_CONST','const',2,'p_const','parser_1.py',408),
  ('const -> NUMBER_CONST','const',1,'p_const','parser_1.py',409),
  ('const -> STRING_CONST','const',1,'p_const','parser_1.py',410),
  ('writefunction -> PRINT LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',455),
  ('writefunction -> WRITE LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',456),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',462),
]
