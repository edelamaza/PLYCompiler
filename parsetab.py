
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGNOP BEGIN BOOLEAN CHAR COLON COMMA DIV DIVIDE DO ELSE END EQUALS FALSE FOR GREATER_THAN GREATER_THAN_EQUALS IDENTIFIER IF INT LBRACKET LCURLYBRACE LESS_THAN LESS_THAN_EQUALS LPAREN MINUS MINUSMINUS MOD MULTIPLY NOT NOT_EQUALS NUMBER_CONST OR PERIOD PLUS PLUSPLUS PRINT PROGRAM RBRACKET RCURLYBRACE REAL RPAREN SEMICOLON STRING STRING_CONST THEN TRUE VAR WHILE WRITEprogram : PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACEvars : VAR varsp COLON type seentype SEMICOLON\n            | VAR varsp COLON type seentype SEMICOLON vars\n            | empty varsp : IDENTIFIER seenid\n            | IDENTIFIER seenid COMMA varspseenid : seentype : type : INT\n            | REAL\n            | STRING\n            | BOOLEANblock : BEGIN SEMICOLON statement END SEMICOLONstatement : empty\n                | assign\n                | assign statement\n                | writefunction\n                | writefunction statement\n                | condition\n                | condition statement\n                | while\n                | while statement\n                | for\n                | for statementcondition : IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse\n                | IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse\n                | IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelsecheckbool : seenif : seencurlyif : seencurlyelse : while : WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile seenwhile : seencurlywhile : for : FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyforseenboolfor : seenchangefor : seencurlyfor : assign : IDENTIFIER ASSIGNOP expression assignnow SEMICOLONassignnow : expression : simpleexpression\n                | simpleexpression LESS_THAN seenoperator simpleexpression genquad\n                | simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression GREATER_THAN seenoperator simpleexpression genquad\n                | simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression NOT_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression EQUALS seenoperator simpleexpression genquad\n                    simpleexpression : term seenterm simpleexpressionpseenterm :  simpleexpressionp : empty\n                        | PLUS seenoperator simpleexpression\n                        | MINUS seenoperator simpleexpression\n                        | OR seenoperator simpleexpressionterm : factor seenfactor termptermp : empty\n            | MULTIPLY seenoperator term\n            | DIV seenoperator term\n            | DIVIDE seenoperator term\n            | MOD seenoperator term\n            | AND seenoperator term\n            | PLUSPLUS seenoperator\n            | MINUSMINUS seenoperatorseenoperator : seenfactor :  genquad : factor : const\n                | LPAREN seenoperator expression RPAREN exitparenexitparen : const : PLUS IDENTIFIER\n            | MINUS IDENTIFIER\n            | IDENTIFIER\n            | PLUS NUMBER_CONST\n            | MINUS NUMBER_CONST\n            | NUMBER_CONST\n            | STRING_CONST\n    writefunction : PRINT LPAREN expression RPAREN SEMICOLON\n                    | WRITE LPAREN expression RPAREN SEMICOLONempty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,],[0,-1,]),'IDENTIFIER':([2,6,13,18,19,20,21,22,34,41,42,43,44,45,46,56,57,58,65,68,69,70,71,72,73,76,87,88,89,90,91,92,93,96,97,98,101,102,103,104,105,109,110,120,121,122,123,124,125,126,127,151,152,153,158,159,161,162,164,166,167,168,171,172,173,174,175,],[3,11,23,23,23,23,23,23,11,50,50,50,50,50,23,-63,77,79,50,-63,-63,-63,-63,-63,-63,50,-39,50,50,50,50,50,50,-63,-63,-63,-63,-63,-63,-63,-63,-76,-77,50,50,50,50,50,50,50,50,50,23,23,-30,-34,-31,-32,-25,23,23,-31,-26,-38,-31,-35,-27,]),'LCURLYBRACE':([3,149,150,163,165,],[4,152,153,166,167,]),'VAR':([4,66,],[6,6,]),'BEGIN':([4,5,7,66,86,],[-78,9,-4,-2,-3,]),'RCURLYBRACE':([8,17,18,19,20,21,22,36,37,38,39,40,49,87,109,110,152,153,155,156,158,159,161,162,164,166,167,168,169,170,171,172,173,174,175,],[12,-14,-15,-17,-19,-21,-23,-16,-18,-20,-22,-24,-13,-39,-76,-77,-78,-78,158,159,-30,-34,-31,-32,-25,-78,-78,-31,172,173,-26,-38,-31,-35,-27,]),'SEMICOLON':([9,29,30,31,32,33,35,47,50,51,52,53,54,55,59,60,67,74,75,77,78,79,80,81,82,85,94,95,99,100,106,107,113,114,115,116,117,118,119,128,129,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,],[13,-8,-9,-10,-11,-12,49,66,-71,-40,-41,-49,-64,-66,-74,-75,87,-78,-78,-69,-72,-70,-73,109,110,-28,-48,-50,-54,-55,-63,-63,-36,-65,-65,-65,-65,-65,-65,-61,-62,-68,151,-42,-43,-44,-45,-46,-47,-51,-52,-53,-56,-57,-58,-59,-60,-67,]),'COLON':([10,11,15,48,],[14,-7,-5,-6,]),'COMMA':([11,15,],[-7,34,]),'END':([13,16,17,18,19,20,21,22,36,37,38,39,40,87,109,110,158,159,161,162,164,168,171,172,173,174,175,],[-78,35,-14,-15,-17,-19,-21,-23,-16,-18,-20,-22,-24,-39,-76,-77,-30,-34,-31,-32,-25,-31,-26,-38,-31,-35,-27,]),'PRINT':([13,18,19,20,21,22,87,109,110,152,153,158,159,161,162,164,166,167,168,171,172,173,174,175,],[24,24,24,24,24,24,-39,-76,-77,24,24,-30,-34,-31,-32,-25,24,24,-31,-26,-38,-31,-35,-27,]),'WRITE':([13,18,19,20,21,22,87,109,110,152,153,158,159,161,162,164,166,167,168,171,172,173,174,175,],[25,25,25,25,25,25,-39,-76,-77,25,25,-30,-34,-31,-32,-25,25,25,-31,-26,-38,-31,-35,-27,]),'IF':([13,18,19,20,21,22,87,109,110,152,153,158,159,161,162,164,165,166,167,168,171,172,173,174,175,],[26,26,26,26,26,26,-39,-76,-77,26,26,-30,-34,-31,-32,-25,26,26,26,-31,-26,-38,-31,-35,-27,]),'WHILE':([13,18,19,20,21,22,87,109,110,152,153,158,159,161,162,164,166,167,168,171,172,173,174,175,],[27,27,27,27,27,27,-39,-76,-77,27,27,-30,-34,-31,-32,-25,27,27,-31,-26,-38,-31,-35,-27,]),'FOR':([13,18,19,20,21,22,87,109,110,152,153,158,159,161,162,164,166,167,168,171,172,173,174,175,],[28,28,28,28,28,28,-39,-76,-77,28,28,-30,-34,-31,-32,-25,28,28,-31,-26,-38,-31,-35,-27,]),'INT':([14,],[30,]),'REAL':([14,],[31,]),'STRING':([14,],[32,]),'BOOLEAN':([14,],[33,]),'ASSIGNOP':([23,],[41,]),'LPAREN':([24,25,26,27,28,41,42,43,44,45,56,65,68,69,70,71,72,73,76,87,88,89,90,91,92,93,96,97,98,101,102,103,104,105,120,121,122,123,124,125,126,127,151,],[42,43,44,45,46,56,56,56,56,56,-63,56,-63,-63,-63,-63,-63,-63,56,-39,56,56,56,56,56,56,-63,-63,-63,-63,-63,-63,-63,-63,56,56,56,56,56,56,56,56,56,]),'PLUS':([41,42,43,44,45,50,53,54,55,56,59,60,65,68,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,96,97,98,99,100,101,102,103,104,105,106,107,120,121,122,123,124,125,126,127,128,129,130,143,144,145,146,147,148,151,],[57,57,57,57,57,-71,-49,-64,-66,-63,-74,-75,57,-63,-63,-63,-63,-63,-63,96,-78,57,-69,-72,-70,-73,-39,57,57,57,57,57,57,-63,-63,-63,-54,-55,-63,-63,-63,-63,-63,-63,-63,57,57,57,57,57,57,57,57,-61,-62,-68,-56,-57,-58,-59,-60,-67,57,]),'MINUS':([41,42,43,44,45,50,53,54,55,56,59,60,65,68,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,96,97,98,99,100,101,102,103,104,105,106,107,120,121,122,123,124,125,126,127,128,129,130,143,144,145,146,147,148,151,],[58,58,58,58,58,-71,-49,-64,-66,-63,-74,-75,58,-63,-63,-63,-63,-63,-63,97,-78,58,-69,-72,-70,-73,-39,58,58,58,58,58,58,-63,-63,-63,-54,-55,-63,-63,-63,-63,-63,-63,-63,58,58,58,58,58,58,58,58,-61,-62,-68,-56,-57,-58,-59,-60,-67,58,]),'NUMBER_CONST':([41,42,43,44,45,56,57,58,65,68,69,70,71,72,73,76,87,88,89,90,91,92,93,96,97,98,101,102,103,104,105,120,121,122,123,124,125,126,127,151,],[59,59,59,59,59,-63,78,80,59,-63,-63,-63,-63,-63,-63,59,-39,59,59,59,59,59,59,-63,-63,-63,-63,-63,-63,-63,-63,59,59,59,59,59,59,59,59,59,]),'STRING_CONST':([41,42,43,44,45,56,65,68,69,70,71,72,73,76,87,88,89,90,91,92,93,96,97,98,101,102,103,104,105,120,121,122,123,124,125,126,127,151,],[60,60,60,60,60,-63,60,-63,-63,-63,-63,-63,-63,60,-39,60,60,60,60,60,60,-63,-63,-63,-63,-63,-63,-63,-63,60,60,60,60,60,60,60,60,60,]),'MULTIPLY':([50,54,55,59,60,75,77,78,79,80,130,148,],[-71,-64,-66,-74,-75,101,-69,-72,-70,-73,-68,-67,]),'DIV':([50,54,55,59,60,75,77,78,79,80,130,148,],[-71,-64,-66,-74,-75,102,-69,-72,-70,-73,-68,-67,]),'DIVIDE':([50,54,55,59,60,75,77,78,79,80,130,148,],[-71,-64,-66,-74,-75,103,-69,-72,-70,-73,-68,-67,]),'MOD':([50,54,55,59,60,75,77,78,79,80,130,148,],[-71,-64,-66,-74,-75,104,-69,-72,-70,-73,-68,-67,]),'AND':([50,54,55,59,60,75,77,78,79,80,130,148,],[-71,-64,-66,-74,-75,105,-69,-72,-70,-73,-68,-67,]),'PLUSPLUS':([50,54,55,59,60,75,77,78,79,80,130,148,],[-71,-64,-66,-74,-75,106,-69,-72,-70,-73,-68,-67,]),'MINUSMINUS':([50,54,55,59,60,75,77,78,79,80,130,148,],[-71,-64,-66,-74,-75,107,-69,-72,-70,-73,-68,-67,]),'OR':([50,53,54,55,59,60,74,75,77,78,79,80,99,100,106,107,128,129,130,143,144,145,146,147,148,],[-71,-49,-64,-66,-74,-75,98,-78,-69,-72,-70,-73,-54,-55,-63,-63,-61,-62,-68,-56,-57,-58,-59,-60,-67,]),'LESS_THAN':([50,52,53,54,55,59,60,74,75,77,78,79,80,94,95,99,100,106,107,128,129,130,140,141,142,143,144,145,146,147,148,],[-71,68,-49,-64,-66,-74,-75,-78,-78,-69,-72,-70,-73,-48,-50,-54,-55,-63,-63,-61,-62,-68,-51,-52,-53,-56,-57,-58,-59,-60,-67,]),'LESS_THAN_EQUALS':([50,52,53,54,55,59,60,74,75,77,78,79,80,94,95,99,100,106,107,128,129,130,140,141,142,143,144,145,146,147,148,],[-71,69,-49,-64,-66,-74,-75,-78,-78,-69,-72,-70,-73,-48,-50,-54,-55,-63,-63,-61,-62,-68,-51,-52,-53,-56,-57,-58,-59,-60,-67,]),'GREATER_THAN':([50,52,53,54,55,59,60,74,75,77,78,79,80,94,95,99,100,106,107,128,129,130,140,141,142,143,144,145,146,147,148,],[-71,70,-49,-64,-66,-74,-75,-78,-78,-69,-72,-70,-73,-48,-50,-54,-55,-63,-63,-61,-62,-68,-51,-52,-53,-56,-57,-58,-59,-60,-67,]),'GREATER_THAN_EQUALS':([50,52,53,54,55,59,60,74,75,77,78,79,80,94,95,99,100,106,107,128,129,130,140,141,142,143,144,145,146,147,148,],[-71,71,-49,-64,-66,-74,-75,-78,-78,-69,-72,-70,-73,-48,-50,-54,-55,-63,-63,-61,-62,-68,-51,-52,-53,-56,-57,-58,-59,-60,-67,]),'NOT_EQUALS':([50,52,53,54,55,59,60,74,75,77,78,79,80,94,95,99,100,106,107,128,129,130,140,141,142,143,144,145,146,147,148,],[-71,72,-49,-64,-66,-74,-75,-78,-78,-69,-72,-70,-73,-48,-50,-54,-55,-63,-63,-61,-62,-68,-51,-52,-53,-56,-57,-58,-59,-60,-67,]),'EQUALS':([50,52,53,54,55,59,60,74,75,77,78,79,80,94,95,99,100,106,107,128,129,130,140,141,142,143,144,145,146,147,148,],[-71,73,-49,-64,-66,-74,-75,-78,-78,-69,-72,-70,-73,-48,-50,-54,-55,-63,-63,-61,-62,-68,-51,-52,-53,-56,-57,-58,-59,-60,-67,]),'RPAREN':([50,52,53,54,55,59,60,61,62,63,64,74,75,77,78,79,80,94,95,99,100,106,107,108,114,115,116,117,118,119,128,129,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,154,157,160,],[-71,-41,-49,-64,-66,-74,-75,81,82,83,84,-78,-78,-69,-72,-70,-73,-48,-50,-54,-55,-63,-63,130,-65,-65,-65,-65,-65,-65,-61,-62,-68,-42,-43,-44,-45,-46,-47,-51,-52,-53,-56,-57,-58,-59,-60,-67,-40,-37,163,]),'THEN':([83,111,131,],[-28,-29,149,]),'DO':([84,112,132,],[-28,-33,150,]),'ELSE':([158,161,],[-30,165,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,66,],[5,86,]),'empty':([4,13,18,19,20,21,22,66,74,75,152,153,166,167,],[7,17,17,17,17,17,17,7,95,100,17,17,17,17,]),'block':([5,],[8,]),'varsp':([6,34,],[10,48,]),'seenid':([11,],[15,]),'statement':([13,18,19,20,21,22,152,153,166,167,],[16,36,37,38,39,40,155,156,169,170,]),'assign':([13,18,19,20,21,22,46,152,153,166,167,],[18,18,18,18,18,18,65,18,18,18,18,]),'writefunction':([13,18,19,20,21,22,152,153,166,167,],[19,19,19,19,19,19,19,19,19,19,]),'condition':([13,18,19,20,21,22,152,153,165,166,167,],[20,20,20,20,20,20,20,20,168,20,20,]),'while':([13,18,19,20,21,22,152,153,166,167,],[21,21,21,21,21,21,21,21,21,21,]),'for':([13,18,19,20,21,22,152,153,166,167,],[22,22,22,22,22,22,22,22,22,22,]),'type':([14,],[29,]),'seentype':([29,],[47,]),'expression':([41,42,43,44,45,65,76,151,],[51,61,62,63,64,85,108,154,]),'simpleexpression':([41,42,43,44,45,65,76,88,89,90,91,92,93,120,121,122,151,],[52,52,52,52,52,52,52,114,115,116,117,118,119,140,141,142,52,]),'term':([41,42,43,44,45,65,76,88,89,90,91,92,93,120,121,122,123,124,125,126,127,151,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,143,144,145,146,147,53,]),'factor':([41,42,43,44,45,65,76,88,89,90,91,92,93,120,121,122,123,124,125,126,127,151,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'const':([41,42,43,44,45,65,76,88,89,90,91,92,93,120,121,122,123,124,125,126,127,151,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'assignnow':([51,154,],[67,157,]),'seenterm':([53,],[74,]),'seenfactor':([54,],[75,]),'seenoperator':([56,68,69,70,71,72,73,96,97,98,101,102,103,104,105,106,107,],[76,88,89,90,91,92,93,120,121,122,123,124,125,126,127,128,129,]),'simpleexpressionp':([74,],[94,]),'termp':([75,],[99,]),'checkbool':([83,84,85,],[111,112,113,]),'seenif':([111,],[131,]),'seenwhile':([112,],[132,]),'seenboolfor':([113,],[133,]),'genquad':([114,115,116,117,118,119,],[134,135,136,137,138,139,]),'exitparen':([130,],[148,]),'seenchangefor':([157,],[160,]),'seencurlyif':([158,],[161,]),'seencurlywhile':([159,],[162,]),'seencurlyelse':([161,168,173,],[164,171,175,]),'seencurlyfor':([172,],[174,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE','program',6,'p_program','parser_1.py',145),
  ('vars -> VAR varsp COLON type seentype SEMICOLON','vars',6,'p_vars','parser_1.py',150),
  ('vars -> VAR varsp COLON type seentype SEMICOLON vars','vars',7,'p_vars','parser_1.py',151),
  ('vars -> empty','vars',1,'p_vars','parser_1.py',152),
  ('varsp -> IDENTIFIER seenid','varsp',2,'p_varsp','parser_1.py',156),
  ('varsp -> IDENTIFIER seenid COMMA varsp','varsp',4,'p_varsp','parser_1.py',157),
  ('seenid -> <empty>','seenid',0,'p_seenid','parser_1.py',161),
  ('seentype -> <empty>','seentype',0,'p_seentype','parser_1.py',168),
  ('type -> INT','type',1,'p_type','parser_1.py',187),
  ('type -> REAL','type',1,'p_type','parser_1.py',188),
  ('type -> STRING','type',1,'p_type','parser_1.py',189),
  ('type -> BOOLEAN','type',1,'p_type','parser_1.py',190),
  ('block -> BEGIN SEMICOLON statement END SEMICOLON','block',5,'p_block','parser_1.py',195),
  ('statement -> empty','statement',1,'p_statement','parser_1.py',199),
  ('statement -> assign','statement',1,'p_statement','parser_1.py',200),
  ('statement -> assign statement','statement',2,'p_statement','parser_1.py',201),
  ('statement -> writefunction','statement',1,'p_statement','parser_1.py',202),
  ('statement -> writefunction statement','statement',2,'p_statement','parser_1.py',203),
  ('statement -> condition','statement',1,'p_statement','parser_1.py',204),
  ('statement -> condition statement','statement',2,'p_statement','parser_1.py',205),
  ('statement -> while','statement',1,'p_statement','parser_1.py',206),
  ('statement -> while statement','statement',2,'p_statement','parser_1.py',207),
  ('statement -> for','statement',1,'p_statement','parser_1.py',208),
  ('statement -> for statement','statement',2,'p_statement','parser_1.py',209),
  ('condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse','condition',12,'p_condition','parser_1.py',213),
  ('condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse','condition',14,'p_condition','parser_1.py',214),
  ('condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse','condition',16,'p_condition','parser_1.py',215),
  ('checkbool -> <empty>','checkbool',0,'p_checkbool','parser_1.py',219),
  ('seenif -> <empty>','seenif',0,'p_seenif','parser_1.py',225),
  ('seencurlyif -> <empty>','seencurlyif',0,'p_seencurlyif','parser_1.py',232),
  ('seencurlyelse -> <empty>','seencurlyelse',0,'p_seencurlyelse','parser_1.py',240),
  ('while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile','while',11,'p_while','parser_1.py',246),
  ('seenwhile -> <empty>','seenwhile',0,'p_seenwhile','parser_1.py',250),
  ('seencurlywhile -> <empty>','seencurlywhile',0,'p_seencurlywhile','parser_1.py',259),
  ('for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression assignnow seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor','for',15,'p_for','parser_1.py',267),
  ('seenboolfor -> <empty>','seenboolfor',0,'p_seenboolfor','parser_1.py',271),
  ('seenchangefor -> <empty>','seenchangefor',0,'p_seenchangefor','parser_1.py',280),
  ('seencurlyfor -> <empty>','seencurlyfor',0,'p_seencurlyfor','parser_1.py',293),
  ('assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON','assign',5,'p_assign','parser_1.py',304),
  ('assignnow -> <empty>','assignnow',0,'p_assignnow','parser_1.py',308),
  ('expression -> simpleexpression','expression',1,'p_expression','parser_1.py',321),
  ('expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',322),
  ('expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',323),
  ('expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',324),
  ('expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',325),
  ('expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',326),
  ('expression -> simpleexpression EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',327),
  ('simpleexpression -> term seenterm simpleexpressionp','simpleexpression',3,'p_simpleexpression','parser_1.py',337),
  ('seenterm -> <empty>','seenterm',0,'p_seenterm','parser_1.py',354),
  ('simpleexpressionp -> empty','simpleexpressionp',1,'p_simpleexpressionp','parser_1.py',365),
  ('simpleexpressionp -> PLUS seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',366),
  ('simpleexpressionp -> MINUS seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',367),
  ('simpleexpressionp -> OR seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',368),
  ('term -> factor seenfactor termp','term',3,'p_term','parser_1.py',372),
  ('termp -> empty','termp',1,'p_termp','parser_1.py',385),
  ('termp -> MULTIPLY seenoperator term','termp',3,'p_termp','parser_1.py',386),
  ('termp -> DIV seenoperator term','termp',3,'p_termp','parser_1.py',387),
  ('termp -> DIVIDE seenoperator term','termp',3,'p_termp','parser_1.py',388),
  ('termp -> MOD seenoperator term','termp',3,'p_termp','parser_1.py',389),
  ('termp -> AND seenoperator term','termp',3,'p_termp','parser_1.py',390),
  ('termp -> PLUSPLUS seenoperator','termp',2,'p_termp','parser_1.py',391),
  ('termp -> MINUSMINUS seenoperator','termp',2,'p_termp','parser_1.py',392),
  ('seenoperator -> <empty>','seenoperator',0,'p_seenoperator','parser_1.py',396),
  ('seenfactor -> <empty>','seenfactor',0,'p_seenfactor','parser_1.py',402),
  ('genquad -> <empty>','genquad',0,'p_genquad','parser_1.py',410),
  ('factor -> const','factor',1,'p_factor','parser_1.py',416),
  ('factor -> LPAREN seenoperator expression RPAREN exitparen','factor',5,'p_factor','parser_1.py',417),
  ('exitparen -> <empty>','exitparen',0,'p_exitparen','parser_1.py',425),
  ('const -> PLUS IDENTIFIER','const',2,'p_const','parser_1.py',430),
  ('const -> MINUS IDENTIFIER','const',2,'p_const','parser_1.py',431),
  ('const -> IDENTIFIER','const',1,'p_const','parser_1.py',432),
  ('const -> PLUS NUMBER_CONST','const',2,'p_const','parser_1.py',433),
  ('const -> MINUS NUMBER_CONST','const',2,'p_const','parser_1.py',434),
  ('const -> NUMBER_CONST','const',1,'p_const','parser_1.py',435),
  ('const -> STRING_CONST','const',1,'p_const','parser_1.py',436),
  ('writefunction -> PRINT LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',481),
  ('writefunction -> WRITE LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',482),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',488),
]
