
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGNOP BEGIN BOOLEAN CHAR COLON COMMA DIV DIVIDE DO ELSE END EQUALS FALSE FOR GREATER_THAN GREATER_THAN_EQUALS IDENTIFIER IF INT LBRACKET LCURLYBRACE LESS_THAN LESS_THAN_EQUALS LPAREN MINUS MINUSMINUS MOD MULTIPLY NOT NOT_EQUALS NUMBER_CONST OR PERIOD PLUS PLUSPLUS PRINT PROGRAM RBRACKET RCURLYBRACE REAL RPAREN SEMICOLON STRING STRING_CONST THEN TRUE VAR WHILE WRITEprogram : PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACEvars : VAR varsp COLON type seentype SEMICOLON\n            | VAR varsp COLON type seentype SEMICOLON vars\n            | empty varsp : IDENTIFIER seenid\n            | IDENTIFIER seenid COMMA varspseenid : seentype : type : INT\n            | REAL\n            | STRING\n            | BOOLEANblock : BEGIN SEMICOLON statement END SEMICOLONstatement : empty\n                | assign\n                | assign statement\n                | writefunction\n                | writefunction statementassign : IDENTIFIER ASSIGNOP expression genquad assignnow SEMICOLONassignnow : expression : simpleexpression genquad\n                    | simpleexpression LESS_THAN simpleexpression\n                    | simpleexpression LESS_THAN_EQUALS simpleexpression\n                    | simpleexpression GREATER_THAN simpleexpression\n                    | simpleexpression GREATER_THAN_EQUALS simpleexpression\n                    | simpleexpression NOT_EQUALS simpleexpression\n                    | simpleexpression EQUALS simpleexpression\n                    simpleexpression : term genquad\n                        | term PLUS simpleexpression\n                        | term MINUS simpleexpression\n                        | term OR simpleexpression\n                        term : factor genquad\n            | factor DIV term\n            | factor MULTIPLY term\n            | factor DIVIDE term\n            | factor MOD term\n            | factor AND term\n            | factor PLUSPLUS\n            | factor MINUSMINUS\n    genquad : factor : const\n                | LPAREN expression RPARENconst : PLUS IDENTIFIER\n            | MINUS IDENTIFIER\n            | IDENTIFIER\n            | PLUS NUMBER_CONST\n            | MINUS NUMBER_CONST\n            | NUMBER_CONST\n            | STRING_CONST\n    writefunction : PRINT LPAREN expression RPAREN SEMICOLON\n                    | WRITE LPAREN expression RPAREN SEMICOLONempty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,],[0,-1,]),'IDENTIFIER':([2,6,13,18,19,28,32,33,34,42,43,46,54,55,56,57,58,59,61,62,63,69,70,71,72,73,96,97,98,],[3,11,20,20,20,11,38,38,38,64,66,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-50,-51,-19,]),'LCURLYBRACE':([3,],[4,]),'VAR':([4,51,],[6,6,]),'BEGIN':([4,5,7,51,79,],[-52,9,-4,-2,-3,]),'RCURLYBRACE':([8,37,],[12,-13,]),'SEMICOLON':([9,23,24,25,26,27,29,35,38,39,40,41,44,45,47,48,52,53,60,64,65,66,67,68,74,75,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,],[13,-8,-9,-10,-11,-12,37,51,-45,-40,-40,-40,-40,-41,-48,-49,-20,-21,-28,-43,-46,-44,-47,-32,-38,-39,96,97,98,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,-34,-35,-36,-37,-42,]),'COLON':([10,11,15,36,],[14,-7,-5,-6,]),'COMMA':([11,15,],[-7,28,]),'END':([13,16,17,18,19,30,31,96,97,98,],[-52,29,-14,-15,-17,-16,-18,-50,-51,-19,]),'PRINT':([13,18,19,96,97,98,],[21,21,21,-50,-51,-19,]),'WRITE':([13,18,19,96,97,98,],[22,22,22,-50,-51,-19,]),'INT':([14,],[24,]),'REAL':([14,],[25,]),'STRING':([14,],[26,]),'BOOLEAN':([14,],[27,]),'ASSIGNOP':([20,],[32,]),'LPAREN':([21,22,32,33,34,46,54,55,56,57,58,59,61,62,63,69,70,71,72,73,],[33,34,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'PLUS':([32,33,34,38,41,44,45,46,47,48,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,90,91,92,93,94,95,],[42,42,42,-45,61,-40,-41,42,-48,-49,42,42,42,42,42,42,42,42,42,-43,-46,-44,-47,-32,42,42,42,42,42,-38,-39,-33,-34,-35,-36,-37,-42,]),'MINUS':([32,33,34,38,41,44,45,46,47,48,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,90,91,92,93,94,95,],[43,43,43,-45,62,-40,-41,43,-48,-49,43,43,43,43,43,43,43,43,43,-43,-46,-44,-47,-32,43,43,43,43,43,-38,-39,-33,-34,-35,-36,-37,-42,]),'NUMBER_CONST':([32,33,34,42,43,46,54,55,56,57,58,59,61,62,63,69,70,71,72,73,],[47,47,47,65,67,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'STRING_CONST':([32,33,34,46,54,55,56,57,58,59,61,62,63,69,70,71,72,73,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'DIV':([38,44,45,47,48,64,65,66,67,95,],[-45,69,-41,-48,-49,-43,-46,-44,-47,-42,]),'MULTIPLY':([38,44,45,47,48,64,65,66,67,95,],[-45,70,-41,-48,-49,-43,-46,-44,-47,-42,]),'DIVIDE':([38,44,45,47,48,64,65,66,67,95,],[-45,71,-41,-48,-49,-43,-46,-44,-47,-42,]),'MOD':([38,44,45,47,48,64,65,66,67,95,],[-45,72,-41,-48,-49,-43,-46,-44,-47,-42,]),'AND':([38,44,45,47,48,64,65,66,67,95,],[-45,73,-41,-48,-49,-43,-46,-44,-47,-42,]),'PLUSPLUS':([38,44,45,47,48,64,65,66,67,95,],[-45,74,-41,-48,-49,-43,-46,-44,-47,-42,]),'MINUSMINUS':([38,44,45,47,48,64,65,66,67,95,],[-45,75,-41,-48,-49,-43,-46,-44,-47,-42,]),'OR':([38,41,44,45,47,48,64,65,66,67,68,74,75,90,91,92,93,94,95,],[-45,63,-40,-41,-48,-49,-43,-46,-44,-47,-32,-38,-39,-33,-34,-35,-36,-37,-42,]),'LESS_THAN':([38,40,41,44,45,47,48,60,64,65,66,67,68,74,75,87,88,89,90,91,92,93,94,95,],[-45,54,-40,-40,-41,-48,-49,-28,-43,-46,-44,-47,-32,-38,-39,-29,-30,-31,-33,-34,-35,-36,-37,-42,]),'LESS_THAN_EQUALS':([38,40,41,44,45,47,48,60,64,65,66,67,68,74,75,87,88,89,90,91,92,93,94,95,],[-45,55,-40,-40,-41,-48,-49,-28,-43,-46,-44,-47,-32,-38,-39,-29,-30,-31,-33,-34,-35,-36,-37,-42,]),'GREATER_THAN':([38,40,41,44,45,47,48,60,64,65,66,67,68,74,75,87,88,89,90,91,92,93,94,95,],[-45,56,-40,-40,-41,-48,-49,-28,-43,-46,-44,-47,-32,-38,-39,-29,-30,-31,-33,-34,-35,-36,-37,-42,]),'GREATER_THAN_EQUALS':([38,40,41,44,45,47,48,60,64,65,66,67,68,74,75,87,88,89,90,91,92,93,94,95,],[-45,57,-40,-40,-41,-48,-49,-28,-43,-46,-44,-47,-32,-38,-39,-29,-30,-31,-33,-34,-35,-36,-37,-42,]),'NOT_EQUALS':([38,40,41,44,45,47,48,60,64,65,66,67,68,74,75,87,88,89,90,91,92,93,94,95,],[-45,58,-40,-40,-41,-48,-49,-28,-43,-46,-44,-47,-32,-38,-39,-29,-30,-31,-33,-34,-35,-36,-37,-42,]),'EQUALS':([38,40,41,44,45,47,48,60,64,65,66,67,68,74,75,87,88,89,90,91,92,93,94,95,],[-45,59,-40,-40,-41,-48,-49,-28,-43,-46,-44,-47,-32,-38,-39,-29,-30,-31,-33,-34,-35,-36,-37,-42,]),'RPAREN':([38,40,41,44,45,47,48,49,50,53,60,64,65,66,67,68,74,75,76,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,],[-45,-40,-40,-40,-41,-48,-49,77,78,-21,-28,-43,-46,-44,-47,-32,-38,-39,95,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,-34,-35,-36,-37,-42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,51,],[5,79,]),'empty':([4,13,18,19,51,],[7,17,17,17,7,]),'block':([5,],[8,]),'varsp':([6,28,],[10,36,]),'seenid':([11,],[15,]),'statement':([13,18,19,],[16,30,31,]),'assign':([13,18,19,],[18,18,18,]),'writefunction':([13,18,19,],[19,19,19,]),'type':([14,],[23,]),'seentype':([23,],[35,]),'expression':([32,33,34,46,],[39,49,50,76,]),'simpleexpression':([32,33,34,46,54,55,56,57,58,59,61,62,63,],[40,40,40,40,81,82,83,84,85,86,87,88,89,]),'term':([32,33,34,46,54,55,56,57,58,59,61,62,63,69,70,71,72,73,],[41,41,41,41,41,41,41,41,41,41,41,41,41,90,91,92,93,94,]),'factor':([32,33,34,46,54,55,56,57,58,59,61,62,63,69,70,71,72,73,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'const':([32,33,34,46,54,55,56,57,58,59,61,62,63,69,70,71,72,73,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'genquad':([39,40,41,44,],[52,53,60,68,]),'assignnow':([52,],[80,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE','program',6,'p_program','parser_1.py',114),
  ('vars -> VAR varsp COLON type seentype SEMICOLON','vars',6,'p_vars','parser_1.py',119),
  ('vars -> VAR varsp COLON type seentype SEMICOLON vars','vars',7,'p_vars','parser_1.py',120),
  ('vars -> empty','vars',1,'p_vars','parser_1.py',121),
  ('varsp -> IDENTIFIER seenid','varsp',2,'p_varsp','parser_1.py',125),
  ('varsp -> IDENTIFIER seenid COMMA varsp','varsp',4,'p_varsp','parser_1.py',126),
  ('seenid -> <empty>','seenid',0,'p_seenid','parser_1.py',130),
  ('seentype -> <empty>','seentype',0,'p_seentype','parser_1.py',137),
  ('type -> INT','type',1,'p_type','parser_1.py',155),
  ('type -> REAL','type',1,'p_type','parser_1.py',156),
  ('type -> STRING','type',1,'p_type','parser_1.py',157),
  ('type -> BOOLEAN','type',1,'p_type','parser_1.py',158),
  ('block -> BEGIN SEMICOLON statement END SEMICOLON','block',5,'p_block','parser_1.py',163),
  ('statement -> empty','statement',1,'p_statement','parser_1.py',180),
  ('statement -> assign','statement',1,'p_statement','parser_1.py',181),
  ('statement -> assign statement','statement',2,'p_statement','parser_1.py',182),
  ('statement -> writefunction','statement',1,'p_statement','parser_1.py',183),
  ('statement -> writefunction statement','statement',2,'p_statement','parser_1.py',184),
  ('assign -> IDENTIFIER ASSIGNOP expression genquad assignnow SEMICOLON','assign',6,'p_assign','parser_1.py',193),
  ('assignnow -> <empty>','assignnow',0,'p_assignnow','parser_1.py',197),
  ('expression -> simpleexpression genquad','expression',2,'p_expression','parser_1.py',210),
  ('expression -> simpleexpression LESS_THAN simpleexpression','expression',3,'p_expression','parser_1.py',211),
  ('expression -> simpleexpression LESS_THAN_EQUALS simpleexpression','expression',3,'p_expression','parser_1.py',212),
  ('expression -> simpleexpression GREATER_THAN simpleexpression','expression',3,'p_expression','parser_1.py',213),
  ('expression -> simpleexpression GREATER_THAN_EQUALS simpleexpression','expression',3,'p_expression','parser_1.py',214),
  ('expression -> simpleexpression NOT_EQUALS simpleexpression','expression',3,'p_expression','parser_1.py',215),
  ('expression -> simpleexpression EQUALS simpleexpression','expression',3,'p_expression','parser_1.py',216),
  ('simpleexpression -> term genquad','simpleexpression',2,'p_simpleexpression','parser_1.py',225),
  ('simpleexpression -> term PLUS simpleexpression','simpleexpression',3,'p_simpleexpression','parser_1.py',226),
  ('simpleexpression -> term MINUS simpleexpression','simpleexpression',3,'p_simpleexpression','parser_1.py',227),
  ('simpleexpression -> term OR simpleexpression','simpleexpression',3,'p_simpleexpression','parser_1.py',228),
  ('term -> factor genquad','term',2,'p_term','parser_1.py',243),
  ('term -> factor DIV term','term',3,'p_term','parser_1.py',244),
  ('term -> factor MULTIPLY term','term',3,'p_term','parser_1.py',245),
  ('term -> factor DIVIDE term','term',3,'p_term','parser_1.py',246),
  ('term -> factor MOD term','term',3,'p_term','parser_1.py',247),
  ('term -> factor AND term','term',3,'p_term','parser_1.py',248),
  ('term -> factor PLUSPLUS','term',2,'p_term','parser_1.py',249),
  ('term -> factor MINUSMINUS','term',2,'p_term','parser_1.py',250),
  ('genquad -> <empty>','genquad',0,'p_genquad','parser_1.py',276),
  ('factor -> const','factor',1,'p_factor','parser_1.py',281),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser_1.py',282),
  ('const -> PLUS IDENTIFIER','const',2,'p_const','parser_1.py',290),
  ('const -> MINUS IDENTIFIER','const',2,'p_const','parser_1.py',291),
  ('const -> IDENTIFIER','const',1,'p_const','parser_1.py',292),
  ('const -> PLUS NUMBER_CONST','const',2,'p_const','parser_1.py',293),
  ('const -> MINUS NUMBER_CONST','const',2,'p_const','parser_1.py',294),
  ('const -> NUMBER_CONST','const',1,'p_const','parser_1.py',295),
  ('const -> STRING_CONST','const',1,'p_const','parser_1.py',296),
  ('writefunction -> PRINT LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',338),
  ('writefunction -> WRITE LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',339),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',344),
]
