
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGNOP BEGIN BOOLEAN CHAR COLON COMMA DIV DIVIDE DO ELSE END EQUALS FALSE FOR GREATER_THAN GREATER_THAN_EQUALS IDENTIFIER IF INT LBRACKET LCURLYBRACE LESS_THAN LESS_THAN_EQUALS LPAREN MINUS MINUSMINUS MOD MULTIPLY NOT NOT_EQUALS NUMBER_CONST OR PERIOD PLUS PLUSPLUS PRINT PROGRAM RBRACKET RCURLYBRACE REAL RPAREN SEMICOLON STRING STRING_CONST THEN TRUE VAR WHILE WRITEprogram : PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACEvars : VAR varsp COLON type seentype SEMICOLON\n            | VAR varsp COLON type seentype SEMICOLON vars\n            | empty varsp : IDENTIFIER seenid\n            | IDENTIFIER seenid COMMA varspseenid : seentype : type : INT\n            | REAL\n            | STRING\n            | BOOLEANblock : BEGIN SEMICOLON statement END SEMICOLONstatement : empty\n                | assign\n                | assign statement\n                | writefunction\n                | writefunction statementassign : IDENTIFIER ASSIGNOP expression assignnow SEMICOLONassignnow : expression : simpleexpression\n                | simpleexpression LESS_THAN seenoperator simpleexpression genquad\n                | simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression GREATER_THAN seenoperator simpleexpression genquad\n                | simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression NOT_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression EQUALS seenoperator simpleexpression genquad\n                    simpleexpression : term seenterm simpleexpressionpseenterm :  simpleexpressionp : empty\n                        | PLUS seenoperator simpleexpression\n                        | MINUS seenoperator simpleexpression\n                        | OR seenoperator simpleexpressionterm : factor seenfactor termptermp : empty\n            | MULTIPLY seenoperator term\n            | DIV seenoperator term\n            | DIVIDE seenoperator term\n            | MOD seenoperator term\n            | AND seenoperator term seenoperator : seenfactor :  genquad : factor : const\n                | LPAREN expression RPARENconst : PLUS IDENTIFIER\n            | MINUS IDENTIFIER\n            | IDENTIFIER\n            | PLUS NUMBER_CONST\n            | MINUS NUMBER_CONST\n            | NUMBER_CONST\n            | STRING_CONST\n    writefunction : PRINT LPAREN expression RPAREN SEMICOLON\n                    | WRITE LPAREN expression RPAREN SEMICOLONempty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,],[0,-1,]),'IDENTIFIER':([2,6,13,18,19,28,32,33,34,44,45,46,53,54,55,56,57,58,69,70,71,72,73,74,75,78,79,80,83,84,85,86,87,89,90,97,98,99,100,101,102,103,104,],[3,11,20,20,20,11,38,38,38,38,62,64,-41,-41,-41,-41,-41,-41,-19,38,38,38,38,38,38,-41,-41,-41,-41,-41,-41,-41,-41,-53,-54,38,38,38,38,38,38,38,38,]),'LCURLYBRACE':([3,],[4,]),'VAR':([4,51,],[6,6,]),'BEGIN':([4,5,7,51,68,],[-55,9,-4,-2,-3,]),'RCURLYBRACE':([8,37,],[12,-13,]),'SEMICOLON':([9,23,24,25,26,27,29,35,38,39,40,41,42,43,47,48,52,59,60,62,63,64,65,66,67,76,77,81,82,88,91,92,93,94,95,96,105,106,107,108,109,110,111,112,113,114,115,116,117,118,],[13,-8,-9,-10,-11,-12,37,51,-48,-20,-21,-29,-42,-44,-51,-52,69,-55,-55,-46,-49,-47,-50,89,90,-28,-30,-34,-35,-45,-43,-43,-43,-43,-43,-43,-22,-23,-24,-25,-26,-27,-31,-32,-33,-36,-37,-38,-39,-40,]),'COLON':([10,11,15,36,],[14,-7,-5,-6,]),'COMMA':([11,15,],[-7,28,]),'END':([13,16,17,18,19,30,31,69,89,90,],[-55,29,-14,-15,-17,-16,-18,-19,-53,-54,]),'PRINT':([13,18,19,69,89,90,],[21,21,21,-19,-53,-54,]),'WRITE':([13,18,19,69,89,90,],[22,22,22,-19,-53,-54,]),'INT':([14,],[24,]),'REAL':([14,],[25,]),'STRING':([14,],[26,]),'BOOLEAN':([14,],[27,]),'ASSIGNOP':([20,],[32,]),'LPAREN':([21,22,32,33,34,44,53,54,55,56,57,58,70,71,72,73,74,75,78,79,80,83,84,85,86,87,97,98,99,100,101,102,103,104,],[33,34,44,44,44,44,-41,-41,-41,-41,-41,-41,44,44,44,44,44,44,-41,-41,-41,-41,-41,-41,-41,-41,44,44,44,44,44,44,44,44,]),'PLUS':([32,33,34,38,41,42,43,44,47,48,53,54,55,56,57,58,59,60,62,63,64,65,70,71,72,73,74,75,78,79,80,81,82,83,84,85,86,87,88,97,98,99,100,101,102,103,104,114,115,116,117,118,],[45,45,45,-48,-29,-42,-44,45,-51,-52,-41,-41,-41,-41,-41,-41,78,-55,-46,-49,-47,-50,45,45,45,45,45,45,-41,-41,-41,-34,-35,-41,-41,-41,-41,-41,-45,45,45,45,45,45,45,45,45,-36,-37,-38,-39,-40,]),'MINUS':([32,33,34,38,41,42,43,44,47,48,53,54,55,56,57,58,59,60,62,63,64,65,70,71,72,73,74,75,78,79,80,81,82,83,84,85,86,87,88,97,98,99,100,101,102,103,104,114,115,116,117,118,],[46,46,46,-48,-29,-42,-44,46,-51,-52,-41,-41,-41,-41,-41,-41,79,-55,-46,-49,-47,-50,46,46,46,46,46,46,-41,-41,-41,-34,-35,-41,-41,-41,-41,-41,-45,46,46,46,46,46,46,46,46,-36,-37,-38,-39,-40,]),'NUMBER_CONST':([32,33,34,44,45,46,53,54,55,56,57,58,70,71,72,73,74,75,78,79,80,83,84,85,86,87,97,98,99,100,101,102,103,104,],[47,47,47,47,63,65,-41,-41,-41,-41,-41,-41,47,47,47,47,47,47,-41,-41,-41,-41,-41,-41,-41,-41,47,47,47,47,47,47,47,47,]),'STRING_CONST':([32,33,34,44,53,54,55,56,57,58,70,71,72,73,74,75,78,79,80,83,84,85,86,87,97,98,99,100,101,102,103,104,],[48,48,48,48,-41,-41,-41,-41,-41,-41,48,48,48,48,48,48,-41,-41,-41,-41,-41,-41,-41,-41,48,48,48,48,48,48,48,48,]),'MULTIPLY':([38,42,43,47,48,60,62,63,64,65,88,],[-48,-42,-44,-51,-52,83,-46,-49,-47,-50,-45,]),'DIV':([38,42,43,47,48,60,62,63,64,65,88,],[-48,-42,-44,-51,-52,84,-46,-49,-47,-50,-45,]),'DIVIDE':([38,42,43,47,48,60,62,63,64,65,88,],[-48,-42,-44,-51,-52,85,-46,-49,-47,-50,-45,]),'MOD':([38,42,43,47,48,60,62,63,64,65,88,],[-48,-42,-44,-51,-52,86,-46,-49,-47,-50,-45,]),'AND':([38,42,43,47,48,60,62,63,64,65,88,],[-48,-42,-44,-51,-52,87,-46,-49,-47,-50,-45,]),'OR':([38,41,42,43,47,48,59,60,62,63,64,65,81,82,88,114,115,116,117,118,],[-48,-29,-42,-44,-51,-52,80,-55,-46,-49,-47,-50,-34,-35,-45,-36,-37,-38,-39,-40,]),'LESS_THAN':([38,40,41,42,43,47,48,59,60,62,63,64,65,76,77,81,82,88,111,112,113,114,115,116,117,118,],[-48,53,-29,-42,-44,-51,-52,-55,-55,-46,-49,-47,-50,-28,-30,-34,-35,-45,-31,-32,-33,-36,-37,-38,-39,-40,]),'LESS_THAN_EQUALS':([38,40,41,42,43,47,48,59,60,62,63,64,65,76,77,81,82,88,111,112,113,114,115,116,117,118,],[-48,54,-29,-42,-44,-51,-52,-55,-55,-46,-49,-47,-50,-28,-30,-34,-35,-45,-31,-32,-33,-36,-37,-38,-39,-40,]),'GREATER_THAN':([38,40,41,42,43,47,48,59,60,62,63,64,65,76,77,81,82,88,111,112,113,114,115,116,117,118,],[-48,55,-29,-42,-44,-51,-52,-55,-55,-46,-49,-47,-50,-28,-30,-34,-35,-45,-31,-32,-33,-36,-37,-38,-39,-40,]),'GREATER_THAN_EQUALS':([38,40,41,42,43,47,48,59,60,62,63,64,65,76,77,81,82,88,111,112,113,114,115,116,117,118,],[-48,56,-29,-42,-44,-51,-52,-55,-55,-46,-49,-47,-50,-28,-30,-34,-35,-45,-31,-32,-33,-36,-37,-38,-39,-40,]),'NOT_EQUALS':([38,40,41,42,43,47,48,59,60,62,63,64,65,76,77,81,82,88,111,112,113,114,115,116,117,118,],[-48,57,-29,-42,-44,-51,-52,-55,-55,-46,-49,-47,-50,-28,-30,-34,-35,-45,-31,-32,-33,-36,-37,-38,-39,-40,]),'EQUALS':([38,40,41,42,43,47,48,59,60,62,63,64,65,76,77,81,82,88,111,112,113,114,115,116,117,118,],[-48,58,-29,-42,-44,-51,-52,-55,-55,-46,-49,-47,-50,-28,-30,-34,-35,-45,-31,-32,-33,-36,-37,-38,-39,-40,]),'RPAREN':([38,40,41,42,43,47,48,49,50,59,60,61,62,63,64,65,76,77,81,82,88,91,92,93,94,95,96,105,106,107,108,109,110,111,112,113,114,115,116,117,118,],[-48,-21,-29,-42,-44,-51,-52,66,67,-55,-55,88,-46,-49,-47,-50,-28,-30,-34,-35,-45,-43,-43,-43,-43,-43,-43,-22,-23,-24,-25,-26,-27,-31,-32,-33,-36,-37,-38,-39,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,51,],[5,68,]),'empty':([4,13,18,19,51,59,60,],[7,17,17,17,7,77,82,]),'block':([5,],[8,]),'varsp':([6,28,],[10,36,]),'seenid':([11,],[15,]),'statement':([13,18,19,],[16,30,31,]),'assign':([13,18,19,],[18,18,18,]),'writefunction':([13,18,19,],[19,19,19,]),'type':([14,],[23,]),'seentype':([23,],[35,]),'expression':([32,33,34,44,],[39,49,50,61,]),'simpleexpression':([32,33,34,44,70,71,72,73,74,75,97,98,99,],[40,40,40,40,91,92,93,94,95,96,111,112,113,]),'term':([32,33,34,44,70,71,72,73,74,75,97,98,99,100,101,102,103,104,],[41,41,41,41,41,41,41,41,41,41,41,41,41,114,115,116,117,118,]),'factor':([32,33,34,44,70,71,72,73,74,75,97,98,99,100,101,102,103,104,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'const':([32,33,34,44,70,71,72,73,74,75,97,98,99,100,101,102,103,104,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'assignnow':([39,],[52,]),'seenterm':([41,],[59,]),'seenfactor':([42,],[60,]),'seenoperator':([53,54,55,56,57,58,78,79,80,83,84,85,86,87,],[70,71,72,73,74,75,97,98,99,100,101,102,103,104,]),'simpleexpressionp':([59,],[76,]),'termp':([60,],[81,]),'genquad':([91,92,93,94,95,96,],[105,106,107,108,109,110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE','program',6,'p_program','parser_1.py',115),
  ('vars -> VAR varsp COLON type seentype SEMICOLON','vars',6,'p_vars','parser_1.py',120),
  ('vars -> VAR varsp COLON type seentype SEMICOLON vars','vars',7,'p_vars','parser_1.py',121),
  ('vars -> empty','vars',1,'p_vars','parser_1.py',122),
  ('varsp -> IDENTIFIER seenid','varsp',2,'p_varsp','parser_1.py',126),
  ('varsp -> IDENTIFIER seenid COMMA varsp','varsp',4,'p_varsp','parser_1.py',127),
  ('seenid -> <empty>','seenid',0,'p_seenid','parser_1.py',131),
  ('seentype -> <empty>','seentype',0,'p_seentype','parser_1.py',138),
  ('type -> INT','type',1,'p_type','parser_1.py',156),
  ('type -> REAL','type',1,'p_type','parser_1.py',157),
  ('type -> STRING','type',1,'p_type','parser_1.py',158),
  ('type -> BOOLEAN','type',1,'p_type','parser_1.py',159),
  ('block -> BEGIN SEMICOLON statement END SEMICOLON','block',5,'p_block','parser_1.py',164),
  ('statement -> empty','statement',1,'p_statement','parser_1.py',181),
  ('statement -> assign','statement',1,'p_statement','parser_1.py',182),
  ('statement -> assign statement','statement',2,'p_statement','parser_1.py',183),
  ('statement -> writefunction','statement',1,'p_statement','parser_1.py',184),
  ('statement -> writefunction statement','statement',2,'p_statement','parser_1.py',185),
  ('assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON','assign',5,'p_assign','parser_1.py',194),
  ('assignnow -> <empty>','assignnow',0,'p_assignnow','parser_1.py',198),
  ('expression -> simpleexpression','expression',1,'p_expression','parser_1.py',211),
  ('expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',212),
  ('expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',213),
  ('expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',214),
  ('expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',215),
  ('expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',216),
  ('expression -> simpleexpression EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',217),
  ('simpleexpression -> term seenterm simpleexpressionp','simpleexpression',3,'p_simpleexpression','parser_1.py',227),
  ('seenterm -> <empty>','seenterm',0,'p_seenterm','parser_1.py',244),
  ('simpleexpressionp -> empty','simpleexpressionp',1,'p_simpleexpressionp','parser_1.py',252),
  ('simpleexpressionp -> PLUS seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',253),
  ('simpleexpressionp -> MINUS seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',254),
  ('simpleexpressionp -> OR seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',255),
  ('term -> factor seenfactor termp','term',3,'p_term','parser_1.py',259),
  ('termp -> empty','termp',1,'p_termp','parser_1.py',272),
  ('termp -> MULTIPLY seenoperator term','termp',3,'p_termp','parser_1.py',273),
  ('termp -> DIV seenoperator term','termp',3,'p_termp','parser_1.py',274),
  ('termp -> DIVIDE seenoperator term','termp',3,'p_termp','parser_1.py',275),
  ('termp -> MOD seenoperator term','termp',3,'p_termp','parser_1.py',276),
  ('termp -> AND seenoperator term','termp',3,'p_termp','parser_1.py',277),
  ('seenoperator -> <empty>','seenoperator',0,'p_seenoperator','parser_1.py',281),
  ('seenfactor -> <empty>','seenfactor',0,'p_seenfactor','parser_1.py',287),
  ('genquad -> <empty>','genquad',0,'p_genquad','parser_1.py',295),
  ('factor -> const','factor',1,'p_factor','parser_1.py',301),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser_1.py',302),
  ('const -> PLUS IDENTIFIER','const',2,'p_const','parser_1.py',310),
  ('const -> MINUS IDENTIFIER','const',2,'p_const','parser_1.py',311),
  ('const -> IDENTIFIER','const',1,'p_const','parser_1.py',312),
  ('const -> PLUS NUMBER_CONST','const',2,'p_const','parser_1.py',313),
  ('const -> MINUS NUMBER_CONST','const',2,'p_const','parser_1.py',314),
  ('const -> NUMBER_CONST','const',1,'p_const','parser_1.py',315),
  ('const -> STRING_CONST','const',1,'p_const','parser_1.py',316),
  ('writefunction -> PRINT LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',358),
  ('writefunction -> WRITE LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',359),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',364),
]
