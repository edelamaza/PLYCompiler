
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGNOP BEGIN BOOLEAN CHAR COLON COMMA DIV DIVIDE DO ELSE END EQUALS FALSE FOR GREATER_THAN GREATER_THAN_EQUALS IDENTIFIER IF INT LBRACKET LCURLYBRACE LESS_THAN LESS_THAN_EQUALS LPAREN MINUS MINUSMINUS MOD MULTIPLY NOT NOT_EQUALS NUMBER_CONST OR PERIOD PLUS PLUSPLUS PRINT PROGRAM RBRACKET RCURLYBRACE REAL RPAREN SEMICOLON STRING STRING_CONST THEN TRUE VAR WHILE WRITEprogram : PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACEvars : VAR varsp COLON type seentype SEMICOLON\n            | VAR varsp COLON type seentype SEMICOLON vars\n            | empty varsp : IDENTIFIER seenid\n            | IDENTIFIER seenid COMMA varspseenid : seentype : type : INT\n            | REAL\n            | STRING\n            | BOOLEANblock : BEGIN SEMICOLON statement END SEMICOLONstatement : empty\n                | assign\n                | assign statement\n                | writefunction\n                | writefunction statement\n                | condition\n                | condition statement\n                | while\n                | while statement\n                | for\n                | for statement\n                | IDENTIFIER PLUSPLUS seenunary checknum SEMICOLON\n                | IDENTIFIER MINUSMINUS seenunary checknum SEMICOLON\n                | IDENTIFIER PLUSPLUS seenunary checknum SEMICOLON statement\n                | IDENTIFIER MINUSMINUS seenunary checknum SEMICOLON statementcondition : IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse\n                | IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse\n                | IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelsecheckbool : checknum : seenif : seencurlyif : seencurlyelse : while : WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile seenwhile : seencurlywhile : for : FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor\n            | FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor checknum seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyforseenboolfor : seenchangefor : seencurlyfor : assign : IDENTIFIER ASSIGNOP expression assignnow SEMICOLONassignfor : IDENTIFIER ASSIGNOP expression pushtype assignnowforpushtype : assignnow : assignnowfor : expression : simpleexpression\n                | simpleexpression LESS_THAN seenoperator simpleexpression genquad\n                | simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression GREATER_THAN seenoperator simpleexpression genquad\n                | simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression NOT_EQUALS seenoperator simpleexpression genquad\n                | simpleexpression EQUALS seenoperator simpleexpression genquad\n                | IDENTIFIER PLUSPLUS seenunary checknum\n                | IDENTIFIER MINUSMINUS seenunary checknum\n                    seenunary : simpleexpression : term seenterm simpleexpressionpseenterm :  simpleexpressionp : empty\n                        | PLUS seenoperator simpleexpression\n                        | MINUS seenoperator simpleexpression\n                        | OR seenoperator simpleexpressionterm : factor seenfactor termptermp : empty\n            | MULTIPLY seenoperator term\n            | DIV seenoperator term\n            | DIVIDE seenoperator term\n            | MOD seenoperator term\n            | AND seenoperator term\n            | PLUSPLUS seenoperator\n            | MINUSMINUS seenoperatorseenoperator : seenfactor :  genquad : factor : const\n                | LPAREN seenoperator expression RPAREN exitparenexitparen : const : PLUS IDENTIFIER\n            | MINUS IDENTIFIER\n            | IDENTIFIER\n            | PLUS NUMBER_CONST\n            | MINUS NUMBER_CONST\n            | NUMBER_CONST\n            | STRING_CONST\n    writefunction : PRINT LPAREN expression RPAREN SEMICOLON\n                    | WRITE LPAREN expression RPAREN SEMICOLONempty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,],[0,-1,]),'IDENTIFIER':([2,6,13,18,19,20,21,22,34,43,44,45,46,47,48,60,61,62,69,77,78,79,80,81,82,85,96,97,100,101,102,103,104,105,106,109,110,111,114,115,116,117,118,122,123,138,139,140,141,142,143,144,145,169,170,171,179,180,181,185,186,187,190,193,195,196,197,200,201,202,203,204,205,],[3,11,23,23,23,23,23,23,11,54,54,54,54,54,70,-75,86,88,54,-75,-75,-75,-75,-75,-75,54,23,23,-45,132,132,132,132,132,132,-75,-75,-75,-75,-75,-75,-75,-75,-88,-89,132,132,132,132,132,132,132,132,174,23,23,54,-35,-39,-36,-37,23,-29,23,23,-36,-44,-30,-40,-44,-36,-41,-31,]),'LCURLYBRACE':([3,167,168,182,188,191,],[4,170,171,187,193,195,]),'VAR':([4,71,],[6,6,]),'BEGIN':([4,5,7,71,95,],[-90,9,-4,-2,-3,]),'RCURLYBRACE':([8,17,18,19,20,21,22,36,37,38,39,40,51,96,97,100,122,123,127,128,170,171,175,176,180,181,185,186,187,190,192,193,195,196,197,198,199,200,201,202,203,204,205,],[12,-14,-15,-17,-19,-21,-23,-16,-18,-20,-22,-24,-13,-25,-26,-45,-88,-89,-27,-28,-90,-90,180,181,-35,-39,-36,-37,-90,-29,197,-90,-90,-36,-44,202,203,-30,-40,-44,-36,-41,-31,]),'SEMICOLON':([9,29,30,31,32,33,35,41,42,49,52,53,54,55,56,57,58,59,63,64,72,73,74,75,76,83,84,86,87,88,89,90,91,94,98,99,107,108,112,113,119,120,126,129,130,131,132,133,134,135,136,137,146,147,148,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,],[13,-8,-9,-10,-11,-12,51,-59,-59,71,-33,-33,-83,-48,-50,-61,-76,-78,-86,-87,96,97,-59,-59,100,-90,-90,-81,-84,-82,-85,122,123,-32,-33,-33,-60,-62,-66,-67,-75,-75,-42,-57,-58,-77,-83,-77,-77,-77,-77,-77,-73,-74,-80,169,-51,-52,-53,-54,-55,-56,-63,-64,-65,-68,-69,-70,-71,-72,-79,]),'COLON':([10,11,15,50,],[14,-7,-5,-6,]),'COMMA':([11,15,],[-7,34,]),'END':([13,16,17,18,19,20,21,22,36,37,38,39,40,96,97,100,122,123,127,128,180,181,185,186,190,196,197,200,201,202,203,204,205,],[-90,35,-14,-15,-17,-19,-21,-23,-16,-18,-20,-22,-24,-25,-26,-45,-88,-89,-27,-28,-35,-39,-36,-37,-29,-36,-44,-30,-40,-44,-36,-41,-31,]),'PRINT':([13,18,19,20,21,22,96,97,100,122,123,170,171,180,181,185,186,187,190,193,195,196,197,200,201,202,203,204,205,],[24,24,24,24,24,24,24,24,-45,-88,-89,24,24,-35,-39,-36,-37,24,-29,24,24,-36,-44,-30,-40,-44,-36,-41,-31,]),'WRITE':([13,18,19,20,21,22,96,97,100,122,123,170,171,180,181,185,186,187,190,193,195,196,197,200,201,202,203,204,205,],[25,25,25,25,25,25,25,25,-45,-88,-89,25,25,-35,-39,-36,-37,25,-29,25,25,-36,-44,-30,-40,-44,-36,-41,-31,]),'IF':([13,18,19,20,21,22,96,97,100,122,123,170,171,180,181,185,186,187,190,191,193,195,196,197,200,201,202,203,204,205,],[26,26,26,26,26,26,26,26,-45,-88,-89,26,26,-35,-39,-36,-37,26,-29,26,26,26,-36,-44,-30,-40,-44,-36,-41,-31,]),'WHILE':([13,18,19,20,21,22,96,97,100,122,123,170,171,180,181,185,186,187,190,193,195,196,197,200,201,202,203,204,205,],[27,27,27,27,27,27,27,27,-45,-88,-89,27,27,-35,-39,-36,-37,27,-29,27,27,-36,-44,-30,-40,-44,-36,-41,-31,]),'FOR':([13,18,19,20,21,22,96,97,100,122,123,170,171,180,181,185,186,187,190,193,195,196,197,200,201,202,203,204,205,],[28,28,28,28,28,28,28,28,-45,-88,-89,28,28,-35,-39,-36,-37,28,-29,28,28,-36,-44,-30,-40,-44,-36,-41,-31,]),'INT':([14,],[30,]),'REAL':([14,],[31,]),'STRING':([14,],[32,]),'BOOLEAN':([14,],[33,]),'PLUSPLUS':([23,54,58,59,63,64,84,86,87,88,89,132,148,166,174,],[41,74,-76,-78,-86,-87,119,-81,-84,-82,-85,-83,-80,-79,74,]),'MINUSMINUS':([23,54,58,59,63,64,84,86,87,88,89,132,148,166,174,],[42,75,-76,-78,-86,-87,120,-81,-84,-82,-85,-83,-80,-79,75,]),'ASSIGNOP':([23,70,174,],[43,43,179,]),'LPAREN':([24,25,26,27,28,43,44,45,46,47,60,69,77,78,79,80,81,82,85,100,101,102,103,104,105,106,109,110,111,114,115,116,117,118,138,139,140,141,142,143,144,145,169,179,],[44,45,46,47,48,60,60,60,60,60,-75,60,-75,-75,-75,-75,-75,-75,60,-45,60,60,60,60,60,60,-75,-75,-75,-75,-75,-75,-75,-75,60,60,60,60,60,60,60,60,60,60,]),'PLUS':([43,44,45,46,47,54,57,58,59,60,63,64,69,77,78,79,80,81,82,83,84,85,86,87,88,89,100,101,102,103,104,105,106,109,110,111,112,113,114,115,116,117,118,119,120,132,138,139,140,141,142,143,144,145,146,147,148,161,162,163,164,165,166,169,174,179,],[61,61,61,61,61,-83,-61,-76,-78,-75,-86,-87,61,-75,-75,-75,-75,-75,-75,109,-90,61,-81,-84,-82,-85,-45,61,61,61,61,61,61,-75,-75,-75,-66,-67,-75,-75,-75,-75,-75,-75,-75,-83,61,61,61,61,61,61,61,61,-73,-74,-80,-68,-69,-70,-71,-72,-79,61,-83,61,]),'MINUS':([43,44,45,46,47,54,57,58,59,60,63,64,69,77,78,79,80,81,82,83,84,85,86,87,88,89,100,101,102,103,104,105,106,109,110,111,112,113,114,115,116,117,118,119,120,132,138,139,140,141,142,143,144,145,146,147,148,161,162,163,164,165,166,169,174,179,],[62,62,62,62,62,-83,-61,-76,-78,-75,-86,-87,62,-75,-75,-75,-75,-75,-75,110,-90,62,-81,-84,-82,-85,-45,62,62,62,62,62,62,-75,-75,-75,-66,-67,-75,-75,-75,-75,-75,-75,-75,-83,62,62,62,62,62,62,62,62,-73,-74,-80,-68,-69,-70,-71,-72,-79,62,-83,62,]),'NUMBER_CONST':([43,44,45,46,47,60,61,62,69,77,78,79,80,81,82,85,100,101,102,103,104,105,106,109,110,111,114,115,116,117,118,138,139,140,141,142,143,144,145,169,179,],[63,63,63,63,63,-75,87,89,63,-75,-75,-75,-75,-75,-75,63,-45,63,63,63,63,63,63,-75,-75,-75,-75,-75,-75,-75,-75,63,63,63,63,63,63,63,63,63,63,]),'STRING_CONST':([43,44,45,46,47,60,69,77,78,79,80,81,82,85,100,101,102,103,104,105,106,109,110,111,114,115,116,117,118,138,139,140,141,142,143,144,145,169,179,],[64,64,64,64,64,-75,64,-75,-75,-75,-75,-75,-75,64,-45,64,64,64,64,64,64,-75,-75,-75,-75,-75,-75,-75,-75,64,64,64,64,64,64,64,64,64,64,]),'MULTIPLY':([54,58,59,63,64,84,86,87,88,89,132,148,166,174,],[-83,-76,-78,-86,-87,114,-81,-84,-82,-85,-83,-80,-79,-83,]),'DIV':([54,58,59,63,64,84,86,87,88,89,132,148,166,174,],[-83,-76,-78,-86,-87,115,-81,-84,-82,-85,-83,-80,-79,-83,]),'DIVIDE':([54,58,59,63,64,84,86,87,88,89,132,148,166,174,],[-83,-76,-78,-86,-87,116,-81,-84,-82,-85,-83,-80,-79,-83,]),'MOD':([54,58,59,63,64,84,86,87,88,89,132,148,166,174,],[-83,-76,-78,-86,-87,117,-81,-84,-82,-85,-83,-80,-79,-83,]),'AND':([54,58,59,63,64,84,86,87,88,89,132,148,166,174,],[-83,-76,-78,-86,-87,118,-81,-84,-82,-85,-83,-80,-79,-83,]),'OR':([54,57,58,59,63,64,83,84,86,87,88,89,112,113,119,120,132,146,147,148,161,162,163,164,165,166,174,],[-83,-61,-76,-78,-86,-87,111,-90,-81,-84,-82,-85,-66,-67,-75,-75,-83,-73,-74,-80,-68,-69,-70,-71,-72,-79,-83,]),'LESS_THAN':([54,56,57,58,59,63,64,83,84,86,87,88,89,107,108,112,113,119,120,132,146,147,148,158,159,160,161,162,163,164,165,166,174,],[-83,77,-61,-76,-78,-86,-87,-90,-90,-81,-84,-82,-85,-60,-62,-66,-67,-75,-75,-83,-73,-74,-80,-63,-64,-65,-68,-69,-70,-71,-72,-79,-83,]),'LESS_THAN_EQUALS':([54,56,57,58,59,63,64,83,84,86,87,88,89,107,108,112,113,119,120,132,146,147,148,158,159,160,161,162,163,164,165,166,174,],[-83,78,-61,-76,-78,-86,-87,-90,-90,-81,-84,-82,-85,-60,-62,-66,-67,-75,-75,-83,-73,-74,-80,-63,-64,-65,-68,-69,-70,-71,-72,-79,-83,]),'GREATER_THAN':([54,56,57,58,59,63,64,83,84,86,87,88,89,107,108,112,113,119,120,132,146,147,148,158,159,160,161,162,163,164,165,166,174,],[-83,79,-61,-76,-78,-86,-87,-90,-90,-81,-84,-82,-85,-60,-62,-66,-67,-75,-75,-83,-73,-74,-80,-63,-64,-65,-68,-69,-70,-71,-72,-79,-83,]),'GREATER_THAN_EQUALS':([54,56,57,58,59,63,64,83,84,86,87,88,89,107,108,112,113,119,120,132,146,147,148,158,159,160,161,162,163,164,165,166,174,],[-83,80,-61,-76,-78,-86,-87,-90,-90,-81,-84,-82,-85,-60,-62,-66,-67,-75,-75,-83,-73,-74,-80,-63,-64,-65,-68,-69,-70,-71,-72,-79,-83,]),'NOT_EQUALS':([54,56,57,58,59,63,64,83,84,86,87,88,89,107,108,112,113,119,120,132,146,147,148,158,159,160,161,162,163,164,165,166,174,],[-83,81,-61,-76,-78,-86,-87,-90,-90,-81,-84,-82,-85,-60,-62,-66,-67,-75,-75,-83,-73,-74,-80,-63,-64,-65,-68,-69,-70,-71,-72,-79,-83,]),'EQUALS':([54,56,57,58,59,63,64,83,84,86,87,88,89,107,108,112,113,119,120,132,146,147,148,158,159,160,161,162,163,164,165,166,174,],[-83,82,-61,-76,-78,-86,-87,-90,-90,-81,-84,-82,-85,-60,-62,-66,-67,-75,-75,-83,-73,-74,-80,-63,-64,-65,-68,-69,-70,-71,-72,-79,-83,]),'RPAREN':([54,56,57,58,59,63,64,65,66,67,68,74,75,83,84,86,87,88,89,98,99,107,108,112,113,119,120,121,129,130,131,132,133,134,135,136,137,146,147,148,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,172,173,174,177,178,183,184,189,194,],[-83,-50,-61,-76,-78,-86,-87,90,91,92,93,-59,-59,-90,-90,-81,-84,-82,-85,-33,-33,-60,-62,-66,-67,-75,-75,148,-57,-58,-77,-83,-77,-77,-77,-77,-77,-73,-74,-80,-51,-52,-53,-54,-55,-56,-63,-64,-65,-68,-69,-70,-71,-72,-79,-43,-33,-83,182,-43,188,-47,-49,-46,]),'THEN':([92,124,149,],[-32,-34,167,]),'DO':([93,125,150,],[-32,-38,168,]),'ELSE':([180,185,],[-35,191,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,71,],[5,95,]),'empty':([4,13,18,19,20,21,22,71,83,84,96,97,170,171,187,193,195,],[7,17,17,17,17,17,17,7,108,113,17,17,17,17,17,17,17,]),'block':([5,],[8,]),'varsp':([6,34,],[10,50,]),'seenid':([11,],[15,]),'statement':([13,18,19,20,21,22,96,97,170,171,187,193,195,],[16,36,37,38,39,40,127,128,175,176,192,198,199,]),'assign':([13,18,19,20,21,22,48,96,97,170,171,187,193,195,],[18,18,18,18,18,18,69,18,18,18,18,18,18,18,]),'writefunction':([13,18,19,20,21,22,96,97,170,171,187,193,195,],[19,19,19,19,19,19,19,19,19,19,19,19,19,]),'condition':([13,18,19,20,21,22,96,97,170,171,187,191,193,195,],[20,20,20,20,20,20,20,20,20,20,20,196,20,20,]),'while':([13,18,19,20,21,22,96,97,170,171,187,193,195,],[21,21,21,21,21,21,21,21,21,21,21,21,21,]),'for':([13,18,19,20,21,22,96,97,170,171,187,193,195,],[22,22,22,22,22,22,22,22,22,22,22,22,22,]),'type':([14,],[29,]),'seentype':([29,],[49,]),'seenunary':([41,42,74,75,],[52,53,98,99,]),'expression':([43,44,45,46,47,69,85,169,179,],[55,65,66,67,68,94,121,172,184,]),'simpleexpression':([43,44,45,46,47,69,85,101,102,103,104,105,106,138,139,140,169,179,],[56,56,56,56,56,56,56,131,133,134,135,136,137,158,159,160,56,56,]),'term':([43,44,45,46,47,69,85,101,102,103,104,105,106,138,139,140,141,142,143,144,145,169,179,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,161,162,163,164,165,57,57,]),'factor':([43,44,45,46,47,69,85,101,102,103,104,105,106,138,139,140,141,142,143,144,145,169,179,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'const':([43,44,45,46,47,69,85,101,102,103,104,105,106,138,139,140,141,142,143,144,145,169,179,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'checknum':([52,53,98,99,173,],[72,73,129,130,178,]),'assignnow':([55,],[76,]),'seenterm':([57,],[83,]),'seenfactor':([58,],[84,]),'seenoperator':([60,77,78,79,80,81,82,109,110,111,114,115,116,117,118,119,120,],[85,101,102,103,104,105,106,138,139,140,141,142,143,144,145,146,147,]),'simpleexpressionp':([83,],[107,]),'termp':([84,],[112,]),'checkbool':([92,93,94,],[124,125,126,]),'seenif':([124,],[149,]),'seenwhile':([125,],[150,]),'seenboolfor':([126,],[151,]),'genquad':([131,133,134,135,136,137,],[152,153,154,155,156,157,]),'exitparen':([148,],[166,]),'assignfor':([169,],[173,]),'seenchangefor':([172,178,],[177,183,]),'seencurlyif':([180,],[185,]),'seencurlywhile':([181,],[186,]),'pushtype':([184,],[189,]),'seencurlyelse':([185,196,203,],[190,200,205,]),'assignnowfor':([189,],[194,]),'seencurlyfor':([197,202,],[201,204,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE','program',6,'p_program','parser_1.py',178),
  ('vars -> VAR varsp COLON type seentype SEMICOLON','vars',6,'p_vars','parser_1.py',183),
  ('vars -> VAR varsp COLON type seentype SEMICOLON vars','vars',7,'p_vars','parser_1.py',184),
  ('vars -> empty','vars',1,'p_vars','parser_1.py',185),
  ('varsp -> IDENTIFIER seenid','varsp',2,'p_varsp','parser_1.py',189),
  ('varsp -> IDENTIFIER seenid COMMA varsp','varsp',4,'p_varsp','parser_1.py',190),
  ('seenid -> <empty>','seenid',0,'p_seenid','parser_1.py',194),
  ('seentype -> <empty>','seentype',0,'p_seentype','parser_1.py',201),
  ('type -> INT','type',1,'p_type','parser_1.py',222),
  ('type -> REAL','type',1,'p_type','parser_1.py',223),
  ('type -> STRING','type',1,'p_type','parser_1.py',224),
  ('type -> BOOLEAN','type',1,'p_type','parser_1.py',225),
  ('block -> BEGIN SEMICOLON statement END SEMICOLON','block',5,'p_block','parser_1.py',230),
  ('statement -> empty','statement',1,'p_statement','parser_1.py',234),
  ('statement -> assign','statement',1,'p_statement','parser_1.py',235),
  ('statement -> assign statement','statement',2,'p_statement','parser_1.py',236),
  ('statement -> writefunction','statement',1,'p_statement','parser_1.py',237),
  ('statement -> writefunction statement','statement',2,'p_statement','parser_1.py',238),
  ('statement -> condition','statement',1,'p_statement','parser_1.py',239),
  ('statement -> condition statement','statement',2,'p_statement','parser_1.py',240),
  ('statement -> while','statement',1,'p_statement','parser_1.py',241),
  ('statement -> while statement','statement',2,'p_statement','parser_1.py',242),
  ('statement -> for','statement',1,'p_statement','parser_1.py',243),
  ('statement -> for statement','statement',2,'p_statement','parser_1.py',244),
  ('statement -> IDENTIFIER PLUSPLUS seenunary checknum SEMICOLON','statement',5,'p_statement','parser_1.py',245),
  ('statement -> IDENTIFIER MINUSMINUS seenunary checknum SEMICOLON','statement',5,'p_statement','parser_1.py',246),
  ('statement -> IDENTIFIER PLUSPLUS seenunary checknum SEMICOLON statement','statement',6,'p_statement','parser_1.py',247),
  ('statement -> IDENTIFIER MINUSMINUS seenunary checknum SEMICOLON statement','statement',6,'p_statement','parser_1.py',248),
  ('condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif seencurlyelse','condition',12,'p_condition','parser_1.py',252),
  ('condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE condition seencurlyelse','condition',14,'p_condition','parser_1.py',253),
  ('condition -> IF LPAREN expression RPAREN checkbool seenif THEN LCURLYBRACE statement RCURLYBRACE seencurlyif ELSE LCURLYBRACE statement RCURLYBRACE seencurlyelse','condition',16,'p_condition','parser_1.py',254),
  ('checkbool -> <empty>','checkbool',0,'p_checkbool','parser_1.py',258),
  ('checknum -> <empty>','checknum',0,'p_checknum','parser_1.py',264),
  ('seenif -> <empty>','seenif',0,'p_seenif','parser_1.py',270),
  ('seencurlyif -> <empty>','seencurlyif',0,'p_seencurlyif','parser_1.py',277),
  ('seencurlyelse -> <empty>','seencurlyelse',0,'p_seencurlyelse','parser_1.py',285),
  ('while -> WHILE LPAREN expression RPAREN checkbool seenwhile DO LCURLYBRACE statement RCURLYBRACE seencurlywhile','while',11,'p_while','parser_1.py',291),
  ('seenwhile -> <empty>','seenwhile',0,'p_seenwhile','parser_1.py',295),
  ('seencurlywhile -> <empty>','seencurlywhile',0,'p_seencurlywhile','parser_1.py',304),
  ('for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON expression seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor','for',14,'p_for','parser_1.py',312),
  ('for -> FOR LPAREN assign expression checkbool seenboolfor SEMICOLON assignfor checknum seenchangefor RPAREN LCURLYBRACE statement RCURLYBRACE seencurlyfor','for',15,'p_for','parser_1.py',313),
  ('seenboolfor -> <empty>','seenboolfor',0,'p_seenboolfor','parser_1.py',317),
  ('seenchangefor -> <empty>','seenchangefor',0,'p_seenchangefor','parser_1.py',326),
  ('seencurlyfor -> <empty>','seencurlyfor',0,'p_seencurlyfor','parser_1.py',337),
  ('assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON','assign',5,'p_assign','parser_1.py',346),
  ('assignfor -> IDENTIFIER ASSIGNOP expression pushtype assignnowfor','assignfor',5,'p_assignfor','parser_1.py',350),
  ('pushtype -> <empty>','pushtype',0,'p_pushtype','parser_1.py',354),
  ('assignnow -> <empty>','assignnow',0,'p_assignnow','parser_1.py',360),
  ('assignnowfor -> <empty>','assignnowfor',0,'p_assignnowfor','parser_1.py',367),
  ('expression -> simpleexpression','expression',1,'p_expression','parser_1.py',374),
  ('expression -> simpleexpression LESS_THAN seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',375),
  ('expression -> simpleexpression LESS_THAN_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',376),
  ('expression -> simpleexpression GREATER_THAN seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',377),
  ('expression -> simpleexpression GREATER_THAN_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',378),
  ('expression -> simpleexpression NOT_EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',379),
  ('expression -> simpleexpression EQUALS seenoperator simpleexpression genquad','expression',5,'p_expression','parser_1.py',380),
  ('expression -> IDENTIFIER PLUSPLUS seenunary checknum','expression',4,'p_expression','parser_1.py',381),
  ('expression -> IDENTIFIER MINUSMINUS seenunary checknum','expression',4,'p_expression','parser_1.py',382),
  ('seenunary -> <empty>','seenunary',0,'p_seenunary','parser_1.py',388),
  ('simpleexpression -> term seenterm simpleexpressionp','simpleexpression',3,'p_simpleexpression','parser_1.py',394),
  ('seenterm -> <empty>','seenterm',0,'p_seenterm','parser_1.py',398),
  ('simpleexpressionp -> empty','simpleexpressionp',1,'p_simpleexpressionp','parser_1.py',406),
  ('simpleexpressionp -> PLUS seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',407),
  ('simpleexpressionp -> MINUS seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',408),
  ('simpleexpressionp -> OR seenoperator simpleexpression','simpleexpressionp',3,'p_simpleexpressionp','parser_1.py',409),
  ('term -> factor seenfactor termp','term',3,'p_term','parser_1.py',413),
  ('termp -> empty','termp',1,'p_termp','parser_1.py',417),
  ('termp -> MULTIPLY seenoperator term','termp',3,'p_termp','parser_1.py',418),
  ('termp -> DIV seenoperator term','termp',3,'p_termp','parser_1.py',419),
  ('termp -> DIVIDE seenoperator term','termp',3,'p_termp','parser_1.py',420),
  ('termp -> MOD seenoperator term','termp',3,'p_termp','parser_1.py',421),
  ('termp -> AND seenoperator term','termp',3,'p_termp','parser_1.py',422),
  ('termp -> PLUSPLUS seenoperator','termp',2,'p_termp','parser_1.py',423),
  ('termp -> MINUSMINUS seenoperator','termp',2,'p_termp','parser_1.py',424),
  ('seenoperator -> <empty>','seenoperator',0,'p_seenoperator','parser_1.py',428),
  ('seenfactor -> <empty>','seenfactor',0,'p_seenfactor','parser_1.py',433),
  ('genquad -> <empty>','genquad',0,'p_genquad','parser_1.py',441),
  ('factor -> const','factor',1,'p_factor','parser_1.py',446),
  ('factor -> LPAREN seenoperator expression RPAREN exitparen','factor',5,'p_factor','parser_1.py',447),
  ('exitparen -> <empty>','exitparen',0,'p_exitparen','parser_1.py',455),
  ('const -> PLUS IDENTIFIER','const',2,'p_const','parser_1.py',460),
  ('const -> MINUS IDENTIFIER','const',2,'p_const','parser_1.py',461),
  ('const -> IDENTIFIER','const',1,'p_const','parser_1.py',462),
  ('const -> PLUS NUMBER_CONST','const',2,'p_const','parser_1.py',463),
  ('const -> MINUS NUMBER_CONST','const',2,'p_const','parser_1.py',464),
  ('const -> NUMBER_CONST','const',1,'p_const','parser_1.py',465),
  ('const -> STRING_CONST','const',1,'p_const','parser_1.py',466),
  ('writefunction -> PRINT LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',505),
  ('writefunction -> WRITE LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',506),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',511),
]
