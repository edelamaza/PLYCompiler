
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGNOP BEGIN BOOLEAN CHAR COLON COMMA DIV DIVIDE DO ELSE END EQUALS FALSE FOR GREATER_THAN GREATER_THAN_EQUALS IDENTIFIER IF INT LBRACKET LCURLYBRACE LESS_THAN LESS_THAN_EQUALS LPAREN MINUS MINUSMINUS MOD MULTIPLY NOT NOT_EQUALS NUMBER_CONST OR PERIOD PLUS PLUSPLUS PRINT PROGRAM RBRACKET RCURLYBRACE REAL RPAREN SEMICOLON STRING STRING_CONST THEN TRUE VAR WHILE WRITEprogram : PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACEvars : VAR varsp COLON type seentype SEMICOLON\n            | VAR varsp COLON type seentype SEMICOLON vars\n            | empty varsp : IDENTIFIER seenid\n            | IDENTIFIER seenid COMMA varspseenid : seentype : type : INT\n            | REAL\n            | STRING\n            | BOOLEANblock : BEGIN SEMICOLON statement END SEMICOLONstatement : empty\n                | assign\n                | assign statement\n                | writefunction\n                | writefunction statementassign : IDENTIFIER ASSIGNOP expression assignnow SEMICOLONassignnow : expression : simpleexpression\n                    | simpleexpression LESS_THAN simpleexpression\n                    | simpleexpression LESS_THAN_EQUALS simpleexpression\n                    | simpleexpression GREATER_THAN simpleexpression\n                    | simpleexpression GREATER_THAN_EQUALS simpleexpression\n                    | simpleexpression NOT_EQUALS simpleexpression\n                    | simpleexpression EQUALS simpleexpression\n                    simpleexpression : term\n                        | term PLUS simpleexpression\n                        | term MINUS simpleexpression\n                        | term OR simpleexpression\n                        term : factor\n            | factor DIV term\n            | factor MULTIPLY term\n            | factor DIVIDE term\n            | factor MOD term\n            | factor AND term\n            | factor PLUSPLUS\n            | factor MINUSMINUS\n    factor : const\n                | LPAREN expression RPARENconst : PLUS IDENTIFIER\n            | MINUS IDENTIFIER\n            | IDENTIFIER\n            | PLUS NUMBER_CONST\n            | MINUS NUMBER_CONST\n            | NUMBER_CONST\n            | STRING_CONST\n    writefunction : PRINT LPAREN expression RPAREN SEMICOLON\n                    | WRITE LPAREN expression RPAREN SEMICOLONempty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,],[0,-1,]),'IDENTIFIER':([2,6,13,18,19,28,32,33,34,42,43,46,53,54,55,56,57,58,59,60,61,66,67,68,69,70,77,93,94,],[3,11,20,20,20,11,38,38,38,62,64,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-19,-49,-50,]),'LCURLYBRACE':([3,],[4,]),'VAR':([4,51,],[6,6,]),'BEGIN':([4,5,7,51,76,],[-51,9,-4,-2,-3,]),'RCURLYBRACE':([8,37,],[12,-13,]),'SEMICOLON':([9,23,24,25,26,27,29,35,38,39,40,41,44,45,47,48,52,62,63,64,65,71,72,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,],[13,-8,-9,-10,-11,-12,37,51,-44,-20,-21,-28,-32,-40,-47,-48,77,-42,-45,-43,-46,-38,-39,93,94,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,-34,-35,-36,-37,-41,]),'COLON':([10,11,15,36,],[14,-7,-5,-6,]),'COMMA':([11,15,],[-7,28,]),'END':([13,16,17,18,19,30,31,77,93,94,],[-51,29,-14,-15,-17,-16,-18,-19,-49,-50,]),'PRINT':([13,18,19,77,93,94,],[21,21,21,-19,-49,-50,]),'WRITE':([13,18,19,77,93,94,],[22,22,22,-19,-49,-50,]),'INT':([14,],[24,]),'REAL':([14,],[25,]),'STRING':([14,],[26,]),'BOOLEAN':([14,],[27,]),'ASSIGNOP':([20,],[32,]),'LPAREN':([21,22,32,33,34,46,53,54,55,56,57,58,59,60,61,66,67,68,69,70,],[33,34,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'PLUS':([32,33,34,38,41,44,45,46,47,48,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,87,88,89,90,91,92,],[42,42,42,-44,59,-32,-40,42,-47,-48,42,42,42,42,42,42,42,42,42,-42,-45,-43,-46,42,42,42,42,42,-38,-39,-33,-34,-35,-36,-37,-41,]),'MINUS':([32,33,34,38,41,44,45,46,47,48,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,87,88,89,90,91,92,],[43,43,43,-44,60,-32,-40,43,-47,-48,43,43,43,43,43,43,43,43,43,-42,-45,-43,-46,43,43,43,43,43,-38,-39,-33,-34,-35,-36,-37,-41,]),'NUMBER_CONST':([32,33,34,42,43,46,53,54,55,56,57,58,59,60,61,66,67,68,69,70,],[47,47,47,63,65,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'STRING_CONST':([32,33,34,46,53,54,55,56,57,58,59,60,61,66,67,68,69,70,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'DIV':([38,44,45,47,48,62,63,64,65,92,],[-44,66,-40,-47,-48,-42,-45,-43,-46,-41,]),'MULTIPLY':([38,44,45,47,48,62,63,64,65,92,],[-44,67,-40,-47,-48,-42,-45,-43,-46,-41,]),'DIVIDE':([38,44,45,47,48,62,63,64,65,92,],[-44,68,-40,-47,-48,-42,-45,-43,-46,-41,]),'MOD':([38,44,45,47,48,62,63,64,65,92,],[-44,69,-40,-47,-48,-42,-45,-43,-46,-41,]),'AND':([38,44,45,47,48,62,63,64,65,92,],[-44,70,-40,-47,-48,-42,-45,-43,-46,-41,]),'PLUSPLUS':([38,44,45,47,48,62,63,64,65,92,],[-44,71,-40,-47,-48,-42,-45,-43,-46,-41,]),'MINUSMINUS':([38,44,45,47,48,62,63,64,65,92,],[-44,72,-40,-47,-48,-42,-45,-43,-46,-41,]),'OR':([38,41,44,45,47,48,62,63,64,65,71,72,87,88,89,90,91,92,],[-44,61,-32,-40,-47,-48,-42,-45,-43,-46,-38,-39,-33,-34,-35,-36,-37,-41,]),'LESS_THAN':([38,40,41,44,45,47,48,62,63,64,65,71,72,84,85,86,87,88,89,90,91,92,],[-44,53,-28,-32,-40,-47,-48,-42,-45,-43,-46,-38,-39,-29,-30,-31,-33,-34,-35,-36,-37,-41,]),'LESS_THAN_EQUALS':([38,40,41,44,45,47,48,62,63,64,65,71,72,84,85,86,87,88,89,90,91,92,],[-44,54,-28,-32,-40,-47,-48,-42,-45,-43,-46,-38,-39,-29,-30,-31,-33,-34,-35,-36,-37,-41,]),'GREATER_THAN':([38,40,41,44,45,47,48,62,63,64,65,71,72,84,85,86,87,88,89,90,91,92,],[-44,55,-28,-32,-40,-47,-48,-42,-45,-43,-46,-38,-39,-29,-30,-31,-33,-34,-35,-36,-37,-41,]),'GREATER_THAN_EQUALS':([38,40,41,44,45,47,48,62,63,64,65,71,72,84,85,86,87,88,89,90,91,92,],[-44,56,-28,-32,-40,-47,-48,-42,-45,-43,-46,-38,-39,-29,-30,-31,-33,-34,-35,-36,-37,-41,]),'NOT_EQUALS':([38,40,41,44,45,47,48,62,63,64,65,71,72,84,85,86,87,88,89,90,91,92,],[-44,57,-28,-32,-40,-47,-48,-42,-45,-43,-46,-38,-39,-29,-30,-31,-33,-34,-35,-36,-37,-41,]),'EQUALS':([38,40,41,44,45,47,48,62,63,64,65,71,72,84,85,86,87,88,89,90,91,92,],[-44,58,-28,-32,-40,-47,-48,-42,-45,-43,-46,-38,-39,-29,-30,-31,-33,-34,-35,-36,-37,-41,]),'RPAREN':([38,40,41,44,45,47,48,49,50,62,63,64,65,71,72,73,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,],[-44,-21,-28,-32,-40,-47,-48,74,75,-42,-45,-43,-46,-38,-39,92,-22,-23,-24,-25,-26,-27,-29,-30,-31,-33,-34,-35,-36,-37,-41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,51,],[5,76,]),'empty':([4,13,18,19,51,],[7,17,17,17,7,]),'block':([5,],[8,]),'varsp':([6,28,],[10,36,]),'seenid':([11,],[15,]),'statement':([13,18,19,],[16,30,31,]),'assign':([13,18,19,],[18,18,18,]),'writefunction':([13,18,19,],[19,19,19,]),'type':([14,],[23,]),'seentype':([23,],[35,]),'expression':([32,33,34,46,],[39,49,50,73,]),'simpleexpression':([32,33,34,46,53,54,55,56,57,58,59,60,61,],[40,40,40,40,78,79,80,81,82,83,84,85,86,]),'term':([32,33,34,46,53,54,55,56,57,58,59,60,61,66,67,68,69,70,],[41,41,41,41,41,41,41,41,41,41,41,41,41,87,88,89,90,91,]),'factor':([32,33,34,46,53,54,55,56,57,58,59,60,61,66,67,68,69,70,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'const':([32,33,34,46,53,54,55,56,57,58,59,60,61,66,67,68,69,70,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'assignnow':([39,],[52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER LCURLYBRACE vars block RCURLYBRACE','program',6,'p_program','parser_1.py',22),
  ('vars -> VAR varsp COLON type seentype SEMICOLON','vars',6,'p_vars','parser_1.py',27),
  ('vars -> VAR varsp COLON type seentype SEMICOLON vars','vars',7,'p_vars','parser_1.py',28),
  ('vars -> empty','vars',1,'p_vars','parser_1.py',29),
  ('varsp -> IDENTIFIER seenid','varsp',2,'p_varsp','parser_1.py',33),
  ('varsp -> IDENTIFIER seenid COMMA varsp','varsp',4,'p_varsp','parser_1.py',34),
  ('seenid -> <empty>','seenid',0,'p_seenid','parser_1.py',38),
  ('seentype -> <empty>','seentype',0,'p_seentype','parser_1.py',45),
  ('type -> INT','type',1,'p_type','parser_1.py',63),
  ('type -> REAL','type',1,'p_type','parser_1.py',64),
  ('type -> STRING','type',1,'p_type','parser_1.py',65),
  ('type -> BOOLEAN','type',1,'p_type','parser_1.py',66),
  ('block -> BEGIN SEMICOLON statement END SEMICOLON','block',5,'p_block','parser_1.py',71),
  ('statement -> empty','statement',1,'p_statement','parser_1.py',88),
  ('statement -> assign','statement',1,'p_statement','parser_1.py',89),
  ('statement -> assign statement','statement',2,'p_statement','parser_1.py',90),
  ('statement -> writefunction','statement',1,'p_statement','parser_1.py',91),
  ('statement -> writefunction statement','statement',2,'p_statement','parser_1.py',92),
  ('assign -> IDENTIFIER ASSIGNOP expression assignnow SEMICOLON','assign',5,'p_assign','parser_1.py',101),
  ('assignnow -> <empty>','assignnow',0,'p_assignnow','parser_1.py',105),
  ('expression -> simpleexpression','expression',1,'p_expression','parser_1.py',114),
  ('expression -> simpleexpression LESS_THAN simpleexpression','expression',3,'p_expression','parser_1.py',115),
  ('expression -> simpleexpression LESS_THAN_EQUALS simpleexpression','expression',3,'p_expression','parser_1.py',116),
  ('expression -> simpleexpression GREATER_THAN simpleexpression','expression',3,'p_expression','parser_1.py',117),
  ('expression -> simpleexpression GREATER_THAN_EQUALS simpleexpression','expression',3,'p_expression','parser_1.py',118),
  ('expression -> simpleexpression NOT_EQUALS simpleexpression','expression',3,'p_expression','parser_1.py',119),
  ('expression -> simpleexpression EQUALS simpleexpression','expression',3,'p_expression','parser_1.py',120),
  ('simpleexpression -> term','simpleexpression',1,'p_simpleexpression','parser_1.py',126),
  ('simpleexpression -> term PLUS simpleexpression','simpleexpression',3,'p_simpleexpression','parser_1.py',127),
  ('simpleexpression -> term MINUS simpleexpression','simpleexpression',3,'p_simpleexpression','parser_1.py',128),
  ('simpleexpression -> term OR simpleexpression','simpleexpression',3,'p_simpleexpression','parser_1.py',129),
  ('term -> factor','term',1,'p_term','parser_1.py',135),
  ('term -> factor DIV term','term',3,'p_term','parser_1.py',136),
  ('term -> factor MULTIPLY term','term',3,'p_term','parser_1.py',137),
  ('term -> factor DIVIDE term','term',3,'p_term','parser_1.py',138),
  ('term -> factor MOD term','term',3,'p_term','parser_1.py',139),
  ('term -> factor AND term','term',3,'p_term','parser_1.py',140),
  ('term -> factor PLUSPLUS','term',2,'p_term','parser_1.py',141),
  ('term -> factor MINUSMINUS','term',2,'p_term','parser_1.py',142),
  ('factor -> const','factor',1,'p_factor','parser_1.py',148),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser_1.py',149),
  ('const -> PLUS IDENTIFIER','const',2,'p_const','parser_1.py',154),
  ('const -> MINUS IDENTIFIER','const',2,'p_const','parser_1.py',155),
  ('const -> IDENTIFIER','const',1,'p_const','parser_1.py',156),
  ('const -> PLUS NUMBER_CONST','const',2,'p_const','parser_1.py',157),
  ('const -> MINUS NUMBER_CONST','const',2,'p_const','parser_1.py',158),
  ('const -> NUMBER_CONST','const',1,'p_const','parser_1.py',159),
  ('const -> STRING_CONST','const',1,'p_const','parser_1.py',160),
  ('writefunction -> PRINT LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',166),
  ('writefunction -> WRITE LPAREN expression RPAREN SEMICOLON','writefunction',5,'p_writefunction','parser_1.py',167),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',172),
]
